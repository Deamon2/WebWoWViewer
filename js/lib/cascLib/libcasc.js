// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 806777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 28304;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([1,62,97,162,38,127,84,44,55,197,12,16,45,76,158,58,90,192,105,240,114,177,65,125,243,129,191,168,182,12,104,251,98,217,14,250,127,54,215,28,57,138,226,241,254,55,189,185,152,237,191,214,216,217,44,64,174,176,234,222,164,118,18,254,108,4,26,3,149,141,242,65,6,3,246,84,21,55,211,219,52,227,151,172,230,221,48,238,253,201,138,42,176,147,205,60,10,113,129,152,60,32,169,17,46,44,184,195,151,194,242,78,208,181,228,82,241,141,194,103,84,250,110,159,133,79,156,161,1,150,203,111,94,203,173,124,181,40,56,145,185,113,43,75,1,182,230,196,201,187,174,135,104,94,134,198,6,61,253,166,201,232,82,152,7,107,61,66,3,111,255,30,82,160,227,222,173,116,12,227,255,255,146,49,70,129,38,152,87,8,225,185,7,79,168,138,16,6,145,140,83,216,89,221,162,99,90,56,220,50,231,43,17,179,47,41,21,216,52,138,53,109,22,73,102,120,104,205,148,234,1,53,185,177,108,147,177,18,74,186,20,141,119,86,115,168,99,20,105,189,42,120,208,92,80,62,147,153,73,89,179,14,90,236,1,238,251,77,228,45,21,94,228,90,23,147,179,126,227,26,142,184,92,238,14,238,27,104,21,164,44,89,238,57,31,155,84,169,159,8,28,173,13,8,247,227,54,244,54,142,137,76,23,89,173,144,88,183,200,36,49,16,12,0,253,224,206,24,187,179,63,58,193,91,48,159,15,137,212,253,117,139,101,234,222,199,164,231,33,244,37,209,51,3,152,149,195,96,54,248,5,113,92,140,223,220,111,2,143,65,128,157,165,83,102,173,65,109,60,51,116,89,238,227,2,4,242,37,201,250,227,202,152,183,142,135,116,191,39,80,147,203,27,95,199,20,81,27,12,200,150,132,202,129,21,6,218,46,245,5,45,185,23,56,11,138,166,239,122,95,142,106,35,129,105,211,250,176,44,190,144,42,18,133,131,108,230,218,88,149,2,13,214,3,176,101,10,142,107,34,59,163,165,87,253,252,53,201,155,157,177,26,50,98,96,202,36,106,203,65,32,89,1,245,26,171,185,66,198,135,120,130,60,150,76,111,36,122,204,15,74,37,132,248,26,172,161,159,142,225,15,79,137,56,28,116,143,101,49,187,252,217,119,83,208,108,195,205,27,62,78,30,207,178,88,119,61,230,13,55,198,100,114,53,149,242,124,92,219,240,139,250,37,17,86,179,1,120,49,229,125,208,81,25,159,132,1,249,94,76,3,200,132,220,234,51,54,128,58,186,215,102,184,22,19,149,232,130,191,37,180,129,246,26,77,98,17,65,218,110,48,141,209,160,253,31,19,17,195,42,209,184,37,40,224,164,86,137,123,60,225,194,210,126,74,20,36,39,91,185,198,202,115,228,190,161,69,223,43,137,182,90,239,2,248,63,162,96,54,92,138,117,147,198,219,183,188,58,146,191,227,2,81,141,145,204,48,121,6,113,191,16,75,22,227,205,178,115,202,144,92,191,241,31,34,114,11,172,194,174,106,173,143,229,51,23,74,113,66,185,47,33,211,109,224,44,22,67,96,46,193,108,58,226,164,210,84,160,143,217,48,161,203,171,112,180,221,17,102,25,135,102,177,196,175,117,137,239,209,58,212,221,102,122,75,11,94,233,238,39,239,91,54,188,210,181,81,255,28,132,170,58,57,148,204,235,3,62,66,218,210,73,110,180,89,147,23,61,101,231,252,174,41,138,147,99,189,106,161,137,242,0,52,111,137,248,46,48,70,26,128,41,173,84,81,212,188,24,233,208,245,172,68,157,192,85,62,203,106,18,120,80,80,250,189,197,24,98,171,237,121,178,222,72,200,231,230,108,98,0,188,192,42,6,125,63,129,255,170,11,92,119,240,136,204,194,211,144,73,189,38,127,6,109,104,54,40,249,237,181,233,209,142,74,37,121,137,78,56,180,171,144,88,186,92,115,40,238,52,203,65,17,100,41,103,183,152,73,209,170,123,31,208,152,25,197,198,98,131,163,38,236,248,107,110,241,159,70,185,255,213,20,189,25,9,169,229,220,135,3,244,184,187,29,253,154,108,34,122,131,223,181,197,35,20,6,226,216,115,182,252,153,33,122,24,8,129,218,141,98,84,197,113,196,9,69,133,226,67,50,101,240,205,235,47,78,101,192,238,112,8,113,77,158,90,153,140,23,130,203,226,142,218,106,252,152,158,214,202,210,121,136,89,146,192,55,168,238,5,176,201,78,15,129,19,88,1,190,139,67,20,45,217,154,158,105,15,173,40,139,96,130,234,67,237,102,113,33,158,127,5,252,146,123,159,79,91,5,86,129,66,145,42,5,43,15,247,147,55,210,100,211,168,196,209,172,32,253,20,149,127,171,194,113,150,233,246,231,2,74,229,198,242,188,174,52,162,64,198,197,246,199,247,53,215,217,76,135,38,127,164,153,77,69,229,74,206,203,207,223,247,156,114,169,122,36,169,152,227,165,80,15,56,113,243,118,40,192,79,91,72,184,202,222,75,78,56,50,215,196,42,172,146,104,240,11,231,182,180,142,201,175,228,112,255,78,197,10,165,148,194,80,26,114,101,75,150,248,99,80,197,169,39,150,47,122,44,28,222,1,14,59,151,186,216,59,188,180,108,196,56,177,122,72,231,108,79,86,84,163,239,139,16,142,142,111,74,73,240,253,225,210,155,39,79,110,125,189,183,255,129,95,233,16,2,144,132,195,208,109,141,145,133,112,144,217,38,187,40,174,218,75,240,40,202,204,75,163,202,221,90,145,87,105,95,11,77,208,220,130,177,1,200,10,186,192,164,213,126,103,248,89,43,182,138,205,198,37,79,121,118,88,59,218,205,82,87,163,247,61,21,152,162,202,45,153,33,61,103,193,84,58,99,169,31,141,70,127,93,109,65,31,138,84,139,99,41,165,8,126,234,61,22,62,107,137,93,94,138,206,141,177,105,226,249,138,195,106,213,44,8,142,119,193,127,253,13,1,181,54,190,14,154,137,204,126,58,203,41,207,20,198,11,193,59,30,70,22,15,12,69,250,207,40,232,1,151,43,110,116,66,14,197,25,230,249,217,125,89,74,163,124,174,230,24,254,112,209,123,74,171,85,174,27,240,199,197,25,175,240,40,193,86,16,164,91,79,124,232,117,185,156,84,105,123,111,163,130,225,250,209,70,92,133,30,63,71,52,161,179,102,161,178,114,195,146,12,70,148,109,86,89,242,250,243,39,192,183,236,130,139,116,138,219,98,25,161,204,1,216,101,129,205,12,15,250,173,147,99,236,20,221,37,236,221,42,91,98,201,218,10,9,153,201,241,163,183,47,239,74,1,72,138,136,255,2,40,10,160,122,146,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,43,0,0,109,102,0,0,56,43,0,0,205,102,0,0,32,6,0,0,0,0,0,0,56,43,0,0,122,102,0,0,48,6,0,0,0,0,0,0,16,43,0,0,155,102,0,0,56,43,0,0,168,102,0,0,16,6,0,0,0,0,0,0,56,43,0,0,240,103,0,0,8,6,0,0,0,0,0,0,56,43,0,0,33,104,0,0,32,6,0,0,0,0,0,0,56,43,0,0,253,103,0,0,88,6,0,0,0,0,0,0,201,59,0,0,234,59,0,0,11,60,0,0,44,60,0,0,77,60,0,0,110,60,0,0,143,60,0,0,176,60,0,0,209,60,0,0,242,60,0,0,19,61,0,0,52,61,0,0,85,61,0,0,118,61,0,0,151,61,0,0,184,61,0,0,217,61,0,0,250,61,0,0,27,62,0,0,60,62,0,0,93,62,0,0,126,62,0,0,159,62,0,0,192,62,0,0,225,62,0,0,2,63,0,0,35,63,0,0,0,0,0,0,136,59,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,217,65,0,0,200,65,0,0,31,66,0,0,1,0,0,0,43,66,0,0,2,0,0,0,0,0,0,0,0,0,0,0,245,65,0,0,253,65,0,0,7,66,0,0,12,66,0,0,23,66,0,0,0,0,0,0,26,67,0,0,4,0,0,0,0,0,1,0,31,67,0,0,3,0,0,0,0,0,2,0,35,67,0,0,7,0,0,0,0,0,3,0,43,67,0,0,10,0,0,0,0,0,4,0,54,67,0,0,3,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,147,71,0,0,106,71,0,0,119,71,0,0,0,0,0,0,0,0,0,0,176,73,0,0,182,73,0,0,186,73,0,0,196,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,73,0,0,213,73,0,0,217,73,0,0,222,73,0,0,226,73,0,0,233,73,0,0,237,73,0,0,245,73,0,0,249,73,0,0,4,74,0,0,0,0,0,0,0,0,0,0,8,74,0,0,14,74,0,0,18,74,0,0,31,74,0,0,0,0,0,0,0,0,0,0,35,74,0,0,47,74,0,0,51,74,0,0,61,74,0,0,0,0,0,0,0,0,0,0,65,74,0,0,75,74,0,0,0,0,0,0,0,0,0,0,79,74,0,0,84,74,0,0,88,74,0,0,100,74,0,0,104,74,0,0,112,74,0,0,116,74,0,0,126,74,0,0,130,74,0,0,136,74,0,0,140,74,0,0,150,74,0,0,154,74,0,0,162,74,0,0,166,74,0,0,175,74,0,0,179,74,0,0,188,74,0,0,192,74,0,0,200,74,0,0,204,74,0,0,210,74,0,0,0,0,0,0,0,0,0,0,214,74,0,0,220,74,0,0,224,74,0,0,229,74,0,0,233,74,0,0,239,74,0,0,243,74,0,0,254,74,0,0,0,0,0,0,0,0,0,0,2,75,0,0,12,75,0,0,16,75,0,0,24,75,0,0,28,75,0,0,35,75,0,0,39,75,0,0,48,75,0,0,52,75,0,0,58,75,0,0,62,75,0,0,72,75,0,0,76,75,0,0,87,75,0,0,91,75,0,0,99,75,0,0,103,75,0,0,112,75,0,0,116,75,0,0,122,75,0,0,126,75,0,0,129,75,0,0,132,75,0,0,140,75,0,0,144,75,0,0,151,75,0,0,155,75,0,0,162,75,0,0,0,0,0,0,0,0,0,0,166,75,0,0,176,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,75,0,0,184,75,0,0,188,75,0,0,197,75,0,0,201,75,0,0,212,75,0,0,216,75,0,0,221,75,0,0,225,75,0,0,232,75,0,0,236,75,0,0,245,75,0,0,249,75,0,0,255,75,0,0,3,76,0,0,12,76,0,0,16,76,0,0,30,76,0,0,0,0,0,0,0,0,0,0,34,76,0,0,43,76,0,0,164,73,0,0,172,73,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,5,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,7,0,0,0,129,106,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,41,0,0,32,42,0,0,5,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,137,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,102,0,0,0,0,0,0,16,6,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,56,6,0,0,11,0,0,0,19,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,72,6,0,0,23,0,0,0,24,0,0,0,25,0,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,72,0,78,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,47,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,92,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,40,110,77,97,120,68,105,103,105,116,115,32,38,32,48,120,48,49,41,32,61,61,32,48,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,99,111,109,109,111,110,47,67,111,109,109,111,110,46,99,112,112,0,67,111,110,118,101,114,116,83,116,114,105,110,103,84,111,73,110,116,51,50,0,110,77,97,120,68,105,103,105,116,115,32,60,61,32,56,0,98,97,115,101,32,33,61,32,78,85,76,76,0,113,115,111,114,116,95,112,111,105,110,116,101,114,95,97,114,114,97,121,0,99,111,109,112,97,114,101,32,33,61,32,78,85,76,76,0,73,116,101,109,73,110,100,101,120,32,60,32,112,65,114,114,97,121,45,62,73,116,101,109,67,111,117,110,116,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,99,111,109,109,111,110,47,68,121,110,97,109,105,99,65,114,114,97,121,46,99,112,112,0,65,114,114,97,121,95,73,116,101,109,65,116,0,112,65,114,114,97,121,45,62,73,116,101,109,65,114,114,97,121,32,60,61,32,65,114,114,97,121,73,116,101,109,32,38,38,32,65,114,114,97,121,73,116,101,109,32,60,61,32,112,65,114,114,97,121,45,62,73,116,101,109,65,114,114,97,121,32,43,32,40,112,65,114,114,97,121,45,62,73,116,101,109,67,111,117,110,116,32,42,32,112,65,114,114,97,121,45,62,73,116,101,109,83,105,122,101,41,0,65,114,114,97,121,95,73,110,100,101,120,79,102,0,112,65,114,114,97,121,45,62,73,116,101,109,65,114,114,97,121,32,33,61,32,78,85,76,76,0,69,110,108,97,114,103,101,65,114,114,97,121,0,112,65,114,114,97,121,45,62,73,116,101,109,67,111,117,110,116,77,97,120,32,33,61,32,48,0,102,108,97,116,45,0,112,97,114,116,45,0,109,112,113,101,45,0,98,108,107,52,45,0,102,105,108,101,58,0,109,97,112,58,0,104,116,116,112,58,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,99,111,109,109,111,110,47,70,105,108,101,83,116,114,101,97,109,46,99,112,112,0,112,83,116,114,101,97,109,45,62,83,116,114,101,97,109,82,101,97,100,32,33,61,32,78,85,76,76,0,70,105,108,101,83,116,114,101,97,109,95,82,101,97,100,0,112,83,116,114,101,97,109,45,62,83,116,114,101,97,109,71,101,116,83,105,122,101,32,33,61,32,78,85,76,76,0,70,105,108,101,83,116,114,101,97,109,95,71,101,116,83,105,122,101,0,112,83,116,114,101,97,109,45,62,66,97,115,101,79,112,101,110,32,33,61,32,78,85,76,76,0,66,108,111,99,107,52,83,116,114,101,97,109,95,79,112,101,110,0,37,115,46,37,117,0,70,105,108,101,83,105,122,101,32,60,61,32,66,76,79,67,75,52,95,77,65,88,95,70,83,73,90,69,0,112,83,116,114,101,97,109,45,62,70,105,108,101,66,105,116,109,97,112,32,33,61,32,78,85,76,76,0,66,108,111,99,107,52,83,116,114,101,97,109,95,66,108,111,99,107,82,101,97,100,0,40,83,116,97,114,116,79,102,102,115,101,116,32,38,32,40,112,83,116,114,101,97,109,45,62,66,108,111,99,107,83,105,122,101,32,45,32,49,41,41,32,61,61,32,48,0,83,116,97,114,116,79,102,102,115,101,116,32,60,32,69,110,100,79,102,102,115,101,116,0,98,65,118,97,105,108,97,98,108,101,32,61,61,32,116,114,117,101,0,112,83,116,114,101,97,109,45,62,66,108,111,99,107,82,101,97,100,32,33,61,32,78,85,76,76,0,66,108,111,99,107,83,116,114,101,97,109,95,82,101,97,100,0,40,66,108,111,99,107,83,105,122,101,32,38,32,40,66,108,111,99,107,83,105,122,101,32,45,32,49,41,41,32,61,61,32,48,0,112,83,116,114,101,97,109,45,62,66,108,111,99,107,67,104,101,99,107,32,33,61,32,78,85,76,76,0,66,108,111,99,107,79,102,102,115,101,116,32,62,32,66,108,111,99,107,79,102,102,115,101,116,48,0,69,110,99,114,83,116,114,101,97,109,95,79,112,101,110,0,112,83,116,114,101,97,109,45,62,83,116,114,101,97,109,83,105,122,101,32,33,61,32,48,0,69,110,99,114,83,116,114,101,97,109,95,66,108,111,99,107,82,101,97,100,0,98,65,118,97,105,108,97,98,108,101,32,33,61,32,102,97,108,115,101,0,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,83,52,56,66,54,67,68,84,78,53,88,69,81,65,75,81,68,74,78,68,76,74,66,74,55,51,70,68,70,77,51,85,0,85,67,77,88,70,54,69,74,89,51,53,50,69,70,72,52,88,70,82,88,67,70,72,50,88,67,57,77,81,82,90,75,0,77,77,75,86,72,89,52,56,82,80,55,87,88,80,52,71,72,89,66,81,55,83,76,57,74,57,85,78,80,72,66,80,0,56,77,88,76,87,72,81,55,86,71,71,76,84,90,57,77,81,90,81,83,70,68,67,76,74,89,69,84,51,67,80,80,0,69,74,50,82,53,84,77,54,88,70,69,50,71,85,78,71,53,81,68,71,72,75,81,57,85,65,75,80,87,90,83,90,0,80,66,71,70,66,69,52,50,90,54,76,78,75,54,53,85,71,74,81,51,87,90,86,77,67,76,80,52,72,81,81,84,0,88,55,83,69,74,74,83,57,84,83,71,67,87,53,80,50,56,69,66,83,67,52,55,65,74,80,69,89,56,86,85,50,0,53,75,86,66,81,65,56,86,89,69,54,88,82,89,51,68,76,71,67,53,90,68,69,52,88,83,52,80,55,89,65,50,0,52,55,56,74,68,50,75,53,54,69,86,78,86,86,89,52,88,88,56,84,68,87,89,84,53,66,56,75,66,50,53,52,0,56,84,83,52,86,78,70,81,82,90,84,78,54,89,87,72,69,57,67,72,86,68,72,57,78,86,87,68,52,55,52,65,0,76,74,53,50,90,51,50,68,70,52,76,90,52,90,74,74,88,86,75,75,51,65,90,81,65,54,71,65,66,76,74,66,0,75,54,66,68,72,89,50,69,67,85,69,50,53,52,53,89,75,78,76,66,74,80,86,89,87,72,69,55,88,89,65,71,0,78,68,86,87,56,71,87,76,65,89,67,82,80,71,82,78,89,56,82,84,55,90,90,85,81,85,54,51,86,76,80,82,0,54,86,87,67,81,84,78,56,86,51,90,90,77,82,85,67,90,88,86,56,65,56,67,71,85,88,50,84,65,65,56,72,0,89,52,53,77,68,51,67,65,75,52,75,88,83,83,88,72,89,68,57,86,89,54,52,90,56,69,75,74,52,88,70,88,0,71,56,77,78,56,85,68,71,54,78,65,50,65,78,71,89,54,65,51,68,78,89,56,50,72,82,71,70,50,57,90,72,0,87,57,82,82,72,76,66,50,70,68,85,57,87,87,53,66,51,69,67,69,66,76,82,83,70,87,90,83,70,55,72,87,0,51,68,72,53,82,69,53,78,86,77,53,71,84,70,68,56,53,76,88,71,87,84,54,70,75,56,53,57,69,84,82,53,0,56,87,76,75,85,65,88,69,57,52,80,70,81,85,52,89,50,52,57,80,65,90,50,52,78,52,82,52,88,75,84,81,0,65,51,52,68,88,88,51,86,72,71,71,88,83,81,66,82,70,69,53,85,70,70,68,88,77,70,57,71,52,71,53,52,0,90,71,55,74,57,75,57,51,56,72,74,69,70,87,80,81,85,65,55,54,56,77,65,50,80,70,69,82,54,69,65,74,0,78,69,55,67,85,78,78,78,84,86,65,80,88,86,55,69,51,71,50,66,83,86,66,87,71,86,77,87,56,66,76,50,0,51,86,57,69,50,70,84,77,66,77,57,81,81,87,75,55,85,54,77,65,77,87,65,90,87,81,68,66,56,51,56,70,0,50,78,83,70,66,56,77,69,76,85,76,74,56,51,85,54,89,72,65,51,85,80,54,75,52,77,81,68,52,56,76,54,0,81,65,50,84,90,57,69,87,90,52,67,85,85,56,66,77,66,53,87,88,67,84,89,54,53,70,57,67,83,87,52,69,0,86,72,66,51,55,56,87,54,52,66,65,84,57,83,72,55,68,54,56,86,86,57,78,76,81,68,75,57,89,69,71,84,0,85,51,78,70,81,74,86,52,77,54,71,67,55,75,66,78,57,88,81,74,51,66,82,68,78,51,80,76,68,57,78,69,0,80,97,114,116,83,116,114,101,97,109,95,79,112,101,110,0,80,97,114,116,83,116,114,101,97,109,95,66,108,111,99,107,82,101,97,100,0,40,83,116,97,114,116,79,102,102,115,101,116,32,38,32,40,66,108,111,99,107,83,105,122,101,32,45,32,49,41,41,32,61,61,32,48,0,80,97,114,116,83,116,114,101,97,109,95,85,112,100,97,116,101,66,105,116,109,97,112,0,40,66,108,111,99,107,79,102,102,115,101,116,32,38,32,40,112,83,116,114,101,97,109,45,62,66,108,111,99,107,83,105,122,101,32,45,32,49,41,41,32,61,61,32,48,0,80,97,114,116,83,116,114,101,97,109,95,66,108,111,99,107,67,104,101,99,107,0,37,117,0,70,105,108,101,66,105,116,109,97,112,45,62,76,97,114,103,101,86,97,108,117,101,72,105,32,61,61,32,48,0,80,97,114,116,83,116,114,101,97,109,95,67,104,101,99,107,70,105,108,101,0,70,105,108,101,66,105,116,109,97,112,45,62,76,97,114,103,101,86,97,108,117,101,76,111,32,61,61,32,48,0,70,105,108,101,66,105,116,109,97,112,45,62,70,108,97,103,115,32,61,61,32,48,32,124,124,32,70,105,108,101,66,105,116,109,97,112,45,62,70,108,97,103,115,32,61,61,32,51,0,70,108,97,116,83,116,114,101,97,109,95,79,112,101,110,0,70,108,97,116,83,116,114,101,97,109,95,66,108,111,99,107,82,101,97,100,0,70,108,97,116,83,116,114,101,97,109,95,85,112,100,97,116,101,66,105,116,109,97,112,0,70,105,108,101,66,105,116,109,97,112,32,33,61,32,78,85,76,76,0,70,108,97,116,83,116,114,101,97,109,95,66,108,111,99,107,67,104,101,99,107,0,83,116,114,101,97,109,83,105,122,101,32,33,61,32,48,0,65,108,108,111,99,97,116,101,70,105,108,101,83,116,114,101,97,109,0,112,67,97,99,104,101,45,62,112,80,111,115,32,61,61,32,112,67,97,99,104,101,45,62,112,66,101,103,105,110,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,99,111,109,109,111,110,47,76,105,115,116,70,105,108,101,46,99,112,112,0,76,105,115,116,70,105,108,101,95,86,101,114,105,102,121,77,68,53,0,49,46,50,46,53,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,68,101,99,114,121,112,116,46,99,112,112,0,67,97,115,99,68,101,99,114,121,112,116,0,101,120,112,97,110,100,32,49,54,45,98,121,116,101,32,107,0,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,0,100,97,116,97,0,100,97,114,99,104,0,83,67,50,68,97,116,97,0,68,97,116,97,92,67,97,115,99,0,68,97,116,97,0,72,101,114,111,101,115,68,97,116,97,0,66,78,84,68,97,116,97,0,46,98,117,105,108,100,46,105,110,102,111,0,46,98,117,105,108,100,46,100,98,0,98,117,105,108,100,45,112,114,111,100,117,99,116,0,98,117,105,108,100,45,110,97,109,101,0,114,111,111,116,0,112,97,116,99,104,0,100,111,119,110,108,111,97,100,0,105,110,115,116,97,108,108,0,101,110,99,111,100,105,110,103,0,112,66,108,111,98,45,62,112,98,68,97,116,97,32,33,61,32,78,85,76,76,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,70,105,108,101,115,46,99,112,112,0,76,111,97,100,66,108,111,98,65,114,114,97,121,0,112,66,108,111,98,45,62,99,98,68,97,116,97,32,33,61,32,48,0,100,119,66,117,105,108,100,78,117,109,98,101,114,32,33,61,32,48,0,71,101,116,66,117,105,108,100,78,117,109,98,101,114,0,71,101,116,71,97,109,101,84,121,112,101,0,72,101,114,111,0,87,111,87,0,68,105,97,98,108,111,51,0,80,114,111,109,101,116,104,101,117,115,0,83,67,50,0,97,114,99,104,105,118,101,45,103,114,111,117,112,0,97,114,99,104,105,118,101,115,0,112,97,116,99,104,45,97,114,99,104,105,118,101,45,103,114,111,117,112,0,112,97,116,99,104,45,97,114,99,104,105,118,101,115,0,99,111,110,102,105,103,0,112,86,97,114,66,108,111,98,45,62,112,98,68,97,116,97,32,61,61,32,78,85,76,76,0,76,111,97,100,73,110,102,111,86,97,114,105,97,98,108,101,0,112,86,97,114,66,108,111,98,45,62,99,98,68,97,116,97,32,61,61,32,48,0,65,99,116,105,118,101,0,68,69,67,0,66,117,105,108,100,32,75,101,121,0,72,69,88,0,67,68,78,32,75,101,121,0,67,68,78,32,72,111,115,116,115,0,83,84,82,73,78,71,0,67,68,78,32,80,97,116,104,0,84,97,103,115,0,101,110,85,83,0,107,111,75,82,0,102,114,70,82,0,100,101,68,69,0,122,104,67,78,0,101,115,69,83,0,122,104,84,87,0,101,110,71,66,0,101,110,67,78,0,101,110,84,87,0,101,115,77,88,0,114,117,82,85,0,112,116,66,82,0,105,116,73,84,0,112,116,80,84,0,84,67,97,115,99,83,101,97,114,99,104,0,112,83,101,97,114,99,104,32,33,61,32,78,85,76,76,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,70,105,110,100,70,105,108,101,46,99,112,112,0,70,114,101,101,83,101,97,114,99,104,72,97,110,100,108,101,0,42,0,84,67,97,115,99,70,105,108,101,0,71,101,116,76,97,115,116,69,114,114,111,114,40,41,32,33,61,32,69,82,82,79,82,95,83,85,67,67,69,83,83,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,79,112,101,110,70,105,108,101,46,99,112,112,0,67,97,115,99,79,112,101,110,70,105,108,101,0,84,67,97,115,99,83,116,111,114,97,103,101,0,104,115,45,62,112,69,110,99,111,100,105,110,103,77,97,112,32,33,61,32,78,85,76,76,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,79,112,101,110,83,116,111,114,97,103,101,46,99,112,112,0,76,111,97,100,82,111,111,116,70,105,108,101,0,104,115,45,62,112,82,111,111,116,72,97,110,100,108,101,114,32,61,61,32,78,85,76,76,0,69,78,67,79,68,73,78,71,0,82,79,79,84,0,68,79,87,78,76,79,65,68,0,73,78,83,84,65,76,76,0,104,115,45,62,112,73,110,100,101,120,69,110,116,114,121,77,97,112,32,33,61,32,78,85,76,76,0,67,114,101,97,116,101,77,97,112,79,102,69,110,99,111,100,105,110,103,75,101,121,115,0,104,115,45,62,112,69,110,99,111,100,105,110,103,77,97,112,32,61,61,32,78,85,76,76,0,76,111,97,100,69,110,99,111,100,105,110,103,70,105,108,101,84,111,77,101,109,111,114,121,0,112,75,101,121,77,97,112,112,105,110,103,45,62,115,122,70,105,108,101,78,97,109,101,32,33,61,32,78,85,76,76,32,38,38,32,112,75,101,121,77,97,112,112,105,110,103,45,62,115,122,70,105,108,101,78,97,109,101,91,48,93,32,33,61,32,48,0,76,111,97,100,75,101,121,77,97,112,112,105,110,103,0,112,75,101,121,77,97,112,112,105,110,103,45,62,112,98,70,105,108,101,68,97,116,97,32,33,61,32,78,85,76,76,0,86,101,114,105,102,121,65,110,100,80,97,114,115,101,75,101,121,77,97,112,112,105,110,103,0,112,75,101,121,77,97,112,112,105,110,103,45,62,99,98,70,105,108,101,68,97,116,97,32,33,61,32,48,0,104,115,45,62,115,122,73,110,100,101,120,70,111,114,109,97,116,32,33,61,32,78,85,76,76,0,67,114,101,97,116,101,73,110,100,101,120,70,105,108,101,78,97,109,101,0,104,115,45,62,115,122,73,110,100,101,120,80,97,116,104,32,33,61,32,78,85,76,76,0,73,110,100,101,120,86,97,108,117,101,32,60,61,32,48,120,48,70,0,73,110,100,101,120,68,105,114,101,99,116,111,114,121,95,79,110,70,105,108,101,70,111,117,110,100,0,37,48,50,120,37,48,56,120,46,105,100,120,0,48,49,50,51,52,53,54,55,56,57,97,65,98,66,99,67,100,68,101,69,102,70,0,46,105,100,120,0,100,97,116,97,46,105,37,120,37,120,0,100,97,116,97,46,105,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,82,101,97,100,70,105,108,101,46,99,112,112,0,80,114,111,99,101,115,115,70,105,108,101,70,114,97,109,101,0,104,102,45,62,112,70,114,97,109,101,115,32,33,61,32,78,85,76,76,0,70,105,110,100,70,105,108,101,70,114,97,109,101,0,104,102,45,62,70,114,97,109,101,67,111,117,110,116,32,33,61,32,48,0,104,102,32,33,61,32,78,85,76,76,0,76,111,97,100,70,105,108,101,70,114,97,109,101,115,0,104,102,45,62,112,83,116,114,101,97,109,32,33,61,32,78,85,76,76,0,104,115,45,62,100,119,70,105,108,101,66,101,103,105,110,68,101,108,116,97,32,60,61,32,66,76,84,69,95,72,69,65,68,69,82,95,68,69,76,84,65,0,69,110,115,117,114,101,72,101,97,100,101,114,65,114,101,97,73,115,76,111,97,100,101,100,0,100,97,116,97,46,37,48,51,117,0,100,119,82,111,111,116,69,110,116,114,105,101,115,32,60,32,68,73,65,66,76,79,51,95,77,65,88,95,83,85,66,68,73,82,83,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,82,111,111,116,70,105,108,101,95,68,105,97,98,108,111,51,46,99,112,112,0,82,111,111,116,72,97,110,100,108,101,114,95,67,114,101,97,116,101,68,105,97,98,108,111,51,0,66,97,115,101,92,68,97,116,97,95,68,51,92,80,67,92,77,105,115,99,92,80,97,99,107,97,103,101,115,46,100,97,116,0,66,97,115,101,92,67,111,114,101,84,79,67,46,100,97,116,0,100,119,70,105,108,101,73,110,100,101,120,32,60,32,100,119,70,105,108,101,73,110,100,101,120,101,115,0,82,101,115,111,108,118,101,70,117,108,108,70,105,108,101,78,97,109,101,115,0,37,115,92,37,115,92,37,115,0,85,110,107,110,111,119,110,0,117,110,107,0,65,99,116,111,114,0,97,99,114,0,65,100,118,101,110,116,117,114,101,0,97,100,118,0,65,109,98,105,101,110,116,83,111,117,110,100,0,97,109,115,0,65,110,105,109,0,97,110,105,0,65,110,105,109,50,68,0,97,110,50,0,65,110,105,109,83,101,116,0,97,110,115,0,65,112,112,101,97,114,97,110,99,101,0,97,112,112,0,67,108,111,116,104,0,99,108,116,0,67,111,110,118,101,114,115,97,116,105,111,110,0,99,110,118,0,69,102,102,101,99,116,71,114,111,117,112,0,101,102,103,0,69,110,99,111,117,110,116,101,114,0,101,110,99,0,69,120,112,108,111,115,105,111,110,0,120,112,108,0,70,111,110,116,0,102,110,116,0,71,97,109,101,66,97,108,97,110,99,101,0,103,97,109,0,71,108,111,98,97,108,115,0,103,108,111,0,76,101,118,101,108,65,114,101,97,0,108,118,108,0,76,105,103,104,116,0,108,105,116,0,77,97,114,107,101,114,83,101,116,0,109,114,107,0,77,111,110,115,116,101,114,0,109,111,110,0,79,98,115,101,114,118,101,114,0,111,98,115,0,80,97,114,116,105,99,108,101,0,112,114,116,0,80,104,121,115,105,99,115,0,112,104,121,0,80,111,119,101,114,0,112,111,119,0,81,117,101,115,116,0,113,115,116,0,82,111,112,101,0,114,111,112,0,83,99,101,110,101,0,115,99,110,0,83,99,101,110,101,71,114,111,117,112,0,115,99,103,0,83,104,97,100,101,114,77,97,112,0,115,104,109,0,83,104,97,100,101,114,115,0,115,104,100,0,83,104,97,107,101,115,0,115,104,107,0,83,107,105,108,108,75,105,116,0,115,107,108,0,83,111,117,110,100,0,115,110,100,0,83,111,117,110,100,66,97,110,107,0,115,98,107,0,83,116,114,105,110,103,76,105,115,116,0,115,116,108,0,83,117,114,102,97,99,101,0,115,114,102,0,84,101,120,116,117,114,101,115,0,116,101,120,0,84,114,97,105,108,0,116,114,108,0,85,73,0,117,105,0,87,101,97,116,104,101,114,0,119,116,104,0,87,111,114,108,100,115,0,119,114,108,0,82,101,99,105,112,101,0,114,99,112,0,67,111,110,100,105,116,105,111,110,0,99,110,100,0,65,99,116,0,97,99,116,0,77,97,116,101,114,105,97,108,0,109,97,116,0,81,117,101,115,116,82,97,110,103,101,0,113,115,114,0,76,111,114,101,0,108,111,114,0,82,101,118,101,114,98,0,114,101,118,0,80,104,121,115,77,101,115,104,0,112,104,109,0,77,117,115,105,99,0,109,117,115,0,84,117,116,111,114,105,97,108,0,116,117,116,0,66,111,115,115,69,110,99,111,117,110,116,101,114,0,98,111,115,0,65,99,99,111,108,97,100,101,0,97,99,111,0,100,119,82,111,111,116,73,110,100,101,120,32,60,32,48,120,49,48,48,0,67,114,101,97,116,101,83,104,111,114,116,78,97,109,101,0,100,119,65,115,115,101,116,73,110,100,101,120,32,60,32,48,120,49,48,48,0,37,115,92,37,48,52,117,46,0,37,115,46,0,37,115,92,37,115,0,80,97,114,115,101,68,105,114,101,99,116,111,114,121,70,105,108,101,0,112,82,111,111,116,72,97,110,100,108,101,114,45,62,70,105,108,101,84,97,98,108,101,46,73,116,101,109,67,111,117,110,116,32,60,32,112,82,111,111,116,72,97,110,100,108,101,114,45,62,70,105,108,101,84,97,98,108,101,46,73,116,101,109,67,111,117,110,116,77,97,120,0,100,119,82,111,111,116,68,105,114,73,110,100,101,120,32,33,61,32,68,73,65,66,76,79,51,95,73,78,86,65,76,73,68,95,73,78,68,69,88,0,102,97,108,115,101,0,80,97,114,115,101,68,105,114,69,110,116,114,105,101,115,95,78,97,109,101,100,0,112,70,105,108,101,69,110,116,114,121,32,33,61,32,78,85,76,76,0,80,97,114,115,101,68,105,114,69,110,116,114,105,101,115,95,70,105,108,101,73,100,50,0,80,97,114,115,101,68,105,114,69,110,116,114,105,101,115,95,70,105,108,101,73,100,49,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,7,7,1,7,2,2,1,7,3,3,1,3,2,2,1,7,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,7,5,5,1,5,2,2,1,5,3,3,1,3,2,2,1,5,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,7,6,6,1,6,2,2,1,6,3,3,1,3,2,2,1,6,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,6,5,5,1,5,2,2,1,5,3,3,1,3,2,2,1,5,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,7,7,7,1,7,2,2,1,7,3,3,1,3,2,2,1,7,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,7,5,5,1,5,2,2,1,5,3,3,1,3,2,2,1,5,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,7,6,6,1,6,2,2,1,6,3,3,1,3,2,2,1,6,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,6,5,5,1,5,2,2,1,5,3,3,1,3,2,2,1,5,4,4,1,4,2,2,1,4,3,3,1,3,2,2,1,7,7,7,7,7,7,7,2,7,7,7,3,7,3,3,2,7,7,7,4,7,4,4,2,7,4,4,3,4,3,3,2,7,7,7,5,7,5,5,2,7,5,5,3,5,3,3,2,7,5,5,4,5,4,4,2,5,4,4,3,4,3,3,2,7,7,7,6,7,6,6,2,7,6,6,3,6,3,3,2,7,6,6,4,6,4,4,2,6,4,4,3,4,3,3,2,7,6,6,5,6,5,5,2,6,5,5,3,5,3,3,2,6,5,5,4,5,4,4,2,5,4,4,3,4,3,3,2,7,7,7,7,7,7,7,2,7,7,7,3,7,3,3,2,7,7,7,4,7,4,4,2,7,4,4,3,4,3,3,2,7,7,7,5,7,5,5,2,7,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([5,3,5,3,3,2,7,5,5,4,5,4,4,2,5,4,4,3,4,3,3,2,7,7,7,6,7,6,6,2,7,6,6,3,6,3,3,2,7,6,6,4,6,4,4,2,6,4,4,3,4,3,3,2,7,6,6,5,6,5,5,2,6,5,5,3,5,3,3,2,6,5,5,4,5,4,4,2,5,4,4,3,4,3,3,2,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,7,7,7,7,7,7,7,4,7,7,7,4,7,4,4,3,7,7,7,7,7,7,7,5,7,7,7,5,7,5,5,3,7,7,7,5,7,5,5,4,7,5,5,4,5,4,4,3,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,3,7,7,7,6,7,6,6,4,7,6,6,4,6,4,4,3,7,7,7,6,7,6,6,5,7,6,6,5,6,5,5,3,7,6,6,5,6,5,5,4,6,5,5,4,5,4,4,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,7,7,7,7,7,7,7,4,7,7,7,4,7,4,4,3,7,7,7,7,7,7,7,5,7,7,7,5,7,5,5,3,7,7,7,5,7,5,5,4,7,5,5,4,5,4,4,3,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,3,7,7,7,6,7,6,6,4,7,6,6,4,6,4,4,3,7,7,7,6,7,6,6,5,7,6,6,5,6,5,5,3,7,6,6,5,6,5,5,4,6,5,5,4,5,4,4,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,7,7,7,7,7,7,7,5,7,7,7,5,7,5,5,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,4,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,5,7,7,7,6,7,6,6,5,7,6,6,5,6,5,5,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,7,7,7,7,7,7,7,5,7,7,7,5,7,5,5,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,4,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,5,7,7,7,6,7,6,6,5,7,6,6,5,6,5,5,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,6,7,7,7,6,7,6,6,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,40,66,105,116,115,80,101,114,69,110,116,114,121,32,42,32,84,111,116,97,108,69,110,116,114,105,101,115,41,32,47,32,51,50,32,60,61,32,73,116,101,109,67,111,117,110,116,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,82,111,111,116,70,105,108,101,95,77,110,100,120,46,99,112,112,0,76,111,97,100,70,114,111,109,83,116,114,101,97,109,0,40,101,99,120,32,43,32,101,100,120,41,32,60,32,115,105,122,101,111,102,40,116,97,98,108,101,95,49,66,65,49,56,49,56,41,0,115,117,98,95,49,57,53,57,67,66,48,0,40,101,115,105,32,43,32,101,100,120,41,32,60,32,115,105,122,101,111,102,40,116,97,98,108,101,95,49,66,65,49,56,49,56,41,0,115,117,98,95,49,57,53,57,70,53,48,0,112,82,111,111,116,72,97,110,100,108,101,114,45,62,112,80,97,99,107,97,103,101,115,32,33,61,32,78,85,76,76,0,70,105,110,100,77,110,100,120,80,97,99,107,97,103,101,0,112,77,110,100,120,73,110,102,111,45,62,77,110,100,120,69,110,116,114,105,101,115,86,97,108,105,100,32,60,61,32,112,77,110,100,120,73,110,102,111,45,62,77,110,100,120,69,110,116,114,105,101,115,84,111,116,97,108,0,82,111,111,116,72,97,110,100,108,101,114,95,67,114,101,97,116,101,77,78,68,88,0,112,77,110,100,120,73,110,102,111,32,33,61,32,78,85,76,76,0,76,111,97,100,80,97,99,107,97,103,101,78,97,109,101,115,0,112,80,97,99,107,97,103,101,115,45,62,80,97,99,107,97,103,101,115,91,110,80,97,99,107,97,103,101,73,110,100,101,120,93,46,115,122,70,105,108,101,78,97,109,101,32,61,61,32,78,85,76,76,0,73,110,115,101,114,116,84,111,80,97,99,107,97,103,101,76,105,115,116,0,112,80,97,99,107,97,103,101,115,45,62,80,97,99,107,97,103,101,115,91,110,80,97,99,107,97,103,101,73,110,100,101,120,93,46,110,76,101,110,103,116,104,32,61,61,32,48,0,112,83,101,97,114,99,104,45,62,112,82,111,111,116,67,111,110,116,101,120,116,32,33,61,32,78,85,76,76,0,77,110,100,120,72,97,110,100,108,101,114,95,83,101,97,114,99,104,0,112,83,116,114,117,99,116,49,67,45,62,99,99,104,70,111,117,110,100,80,97,116,104,32,60,32,77,65,88,95,80,65,84,72,0,70,105,108,108,70,105,110,100,68,97,116,97,0,70,73,76,69,78,65,77,69,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,82,111,111,116,70,105,108,101,95,79,118,114,46,99,112,112,0,73,110,115,101,114,116,70,105,108,101,69,110,116,114,121,0,112,82,111,111,116,72,97,110,100,108,101,114,45,62,70,105,108,101,84,97,98,108,101,46,73,116,101,109,65,114,114,97,121,32,33,61,32,78,85,76,76,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,67,97,115,99,82,111,111,116,70,105,108,101,95,87,111,87,54,46,99,112,112,0,80,97,114,115,101,82,111,111,116,95,65,100,100,82,111,111,116,69,110,116,114,105,101,115,0,112,82,111,111,116,72,97,110,100,108,101,114,45,62,70,105,108,101,84,97,98,108,101,46,73,116,101,109,67,111,117,110,116,77,97,120,32,33,61,32,48,0,112,82,111,111,116,72,97,110,100,108,101,114,45,62,70,105,108,101,68,97,116,97,73,100,76,111,111,107,117,112,84,97,98,108,101,46,73,116,101,109,65,114,114,97,121,32,33,61,32,78,85,76,76,0,112,82,111,111,116,72,97,110,100,108,101,114,45,62,70,105,108,101,68,97,116,97,73,100,76,111,111,107,117,112,84,97,98,108,101,46,73,116,101,109,67,111,117,110,116,77,97,120,32,33,61,32,48,0,40,112,70,105,108,101,69,110,116,114,121,45,62,70,105,108,101,68,97,116,97,73,100,32,43,32,49,41,32,62,32,112,70,105,108,101,69,110,116,114,121,45,62,70,105,108,101,68,97,116,97,73,100,0,77,97,112,95,70,105,110,100,79,98,106,101,99,116,40,112,82,111,111,116,72,97,110,100,108,101,114,45,62,112,82,111,111,116,77,97,112,44,32,38,112,70,105,108,101,69,110,116,114,121,45,62,70,105,108,101,78,97,109,101,72,97,115,104,44,32,78,85,76,76,41,32,61,61,32,78,85,76,76,0,87,111,119,72,97,110,100,108,101,114,95,73,110,115,101,114,116,0,109,100,32,33,61,32,78,85,76,76,0,47,104,111,109,101,47,100,101,97,109,111,110,47,87,111,114,107,47,80,114,111,106,101,99,116,115,47,84,101,115,116,80,114,111,106,101,99,116,115,47,67,97,115,99,76,105,98,47,115,114,99,47,108,105,98,116,111,109,99,114,121,112,116,47,115,114,99,47,104,97,115,104,101,115,47,109,100,53,46,99,0,105,110,32,33,61,32,78,85,76,76,0,111,117,116,32,33,61,32,78,85,76,76,0,76,84,67,95,65,82,71,67,72,75,32,39,37,115,39,32,102,97,105,108,117,114,101,32,111,110,32,108,105,110,101,32,37,100,32,111,102,32,102,105,108,101,32,37,115,10,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:(16895|511),FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
        var entries = ['.', '..']
        for (var key in node.contents) {
          if (!node.contents.hasOwnProperty(key)) {
            continue;
          }
          entries.push(key);
        }
        return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
 console.log("readingFile "+ stream.path);
          try {if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          
          var view = new Int8Array(ab);
                for (var i = 0; i < view.length; ++i) {
                    buffer[i + offset] = view[i];
                    
                }
	  //buffer.set(new Uint8Array(ab), offset);
          return chunk.size;} catch(e) {console.log("reading failed", e)}
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall192(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mmap2
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), prot = SYSCALLS.get(), flags = SYSCALLS.get(), fd = SYSCALLS.get(), off = SYSCALLS.get()
      off <<= 12; // undo pgoffset
      var ptr;
      var allocated = false;
      if (fd === -1) {
        ptr = _malloc(len);
        if (!ptr) return -ERRNO_CODES.ENOMEM;
        _memset(ptr, 0, len);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -ERRNO_CODES.EBADF;
        var res = FS.mmap(info, HEAPU8, addr, len, off, prot, flags);
        ptr = res.ptr;
        allocated = res.allocated;
      }
      SYSCALLS.mappings[ptr] = { malloc: ptr, len: len, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _raise(sig) {
      Module.printErr('Calling stub instead of raise()');
    ___setErrNo(ERRNO_CODES.ENOSYS);
        Runtime.warnOnce('raise() returning an error as we do not support it');
      return -1;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

   
  Module["_sbrk"] = _sbrk;

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function _abort() {
      Module['abort']();
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;


   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall220": ___syscall220, "_pthread_key_create": _pthread_key_create, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___syscall91": ___syscall91, "___setErrNo": ___setErrNo, "___syscall192": ___syscall192, "___syscall197": ___syscall197, "___cxa_begin_catch": ___cxa_begin_catch, "___syscall195": ___syscall195, "___syscall194": ___syscall194, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_raise": _raise, "_pthread_getspecific": _pthread_getspecific, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall221": ___syscall221, "___cxa_end_catch": ___cxa_end_catch, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "_abort": _abort, "___syscall5": ___syscall5, "___syscall4": ___syscall4, "___syscall3": ___syscall3, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall140": ___syscall140, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall220=env.___syscall220;
  var _pthread_key_create=env._pthread_key_create;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___syscall91=env.___syscall91;
  var ___setErrNo=env.___setErrNo;
  var ___syscall192=env.___syscall192;
  var ___syscall197=env.___syscall197;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___syscall195=env.___syscall195;
  var ___syscall194=env.___syscall194;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _raise=env._raise;
  var _pthread_getspecific=env._pthread_getspecific;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall221=env.___syscall221;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _pthread_once=env._pthread_once;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___syscall5=env.___syscall5;
  var ___syscall4=env.___syscall4;
  var ___syscall3=env.___syscall3;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___syscall140=env.___syscall140;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _GetLastError() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6674]|0;
 return ($0|0);
}
function _SetLastError($nError) {
 $nError = $nError|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $nError;
 $1 = $0;
 HEAP32[6674] = $1;
 STACKTOP = sp;return;
}
function __Z10CopyStringPcPKcj($szTarget,$szSource,$cchLength) {
 $szTarget = $szTarget|0;
 $szSource = $szSource|0;
 $cchLength = $cchLength|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szTarget;
 $1 = $szSource;
 $2 = $cchLength;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _memcpy(($3|0),($4|0),($5|0))|0;
 $6 = $2;
 $7 = $0;
 $8 = (($7) + ($6)|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function __Z10CascNewStrPKcj($szString,$nCharsToReserve) {
 $szString = $szString|0;
 $nCharsToReserve = $nCharsToReserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $nLength = 0, $szNewString = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szString;
 $1 = $nCharsToReserve;
 $szNewString = 0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $20 = $szNewString;
  STACKTOP = sp;return ($20|0);
 }
 $4 = $0;
 $5 = (_strlen($4)|0);
 $nLength = $5;
 $6 = $nLength;
 $7 = $1;
 $8 = (($6) + ($7))|0;
 $9 = (($8) + 1)|0;
 $10 = $9;
 $11 = (_malloc($10)|0);
 $szNewString = $11;
 $12 = $szNewString;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $20 = $szNewString;
  STACKTOP = sp;return ($20|0);
 }
 $14 = $szNewString;
 $15 = $0;
 $16 = $nLength;
 _memcpy(($14|0),($15|0),($16|0))|0;
 $17 = $nLength;
 $18 = $szNewString;
 $19 = (($18) + ($17)|0);
 HEAP8[$19>>0] = 0;
 $20 = $szNewString;
 STACKTOP = sp;return ($20|0);
}
function __Z18CascNewStrFromAnsiPKcS0_($szBegin,$szEnd) {
 $szBegin = $szBegin|0;
 $szEnd = $szEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $szNewString = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szBegin;
 $1 = $szEnd;
 $szNewString = 0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = $0;
  $6 = ($4>>>0)>($5>>>0);
  if ($6) {
   $7 = $1;
   $8 = $0;
   $9 = $7;
   $10 = $8;
   $11 = (($9) - ($10))|0;
   $12 = (($11) + 1)|0;
   $13 = $12;
   $14 = (_malloc($13)|0);
   $szNewString = $14;
   $15 = $szNewString;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    $17 = $szNewString;
    $18 = $0;
    $19 = $1;
    $20 = $0;
    $21 = $19;
    $22 = $20;
    $23 = (($21) - ($22))|0;
    __Z10CopyStringPcPKcj($17,$18,$23);
   }
  }
 }
 $24 = $szNewString;
 STACKTOP = sp;return ($24|0);
}
function __Z11CombinePathPKcS0_($szDirectory,$szSubDir) {
 $szDirectory = $szDirectory|0;
 $szSubDir = $szSubDir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $nLength1 = 0, $nLength2 = 0, $or$cond = 0, $or$cond5 = 0, $szFullPath = 0, $szPathPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $szDirectory;
 $1 = $szSubDir;
 $szFullPath = 0;
 $nLength1 = 0;
 $nLength2 = 0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $0;
   $5 = (_strlen($4)|0);
   $nLength1 = $5;
   while(1) {
    $6 = $nLength1;
    $7 = ($6>>>0)>(0);
    if (!($7)) {
     break L1;
    }
    $8 = $nLength1;
    $9 = (($8) - 1)|0;
    $10 = $0;
    $11 = (($10) + ($9)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)==(92);
    if (!($14)) {
     $15 = $nLength1;
     $16 = (($15) - 1)|0;
     $17 = $0;
     $18 = (($17) + ($16)|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 << 24 >> 24;
     $21 = ($20|0)==(47);
     if (!($21)) {
      break L1;
     }
    }
    $22 = $nLength1;
    $23 = (($22) + -1)|0;
    $nLength1 = $23;
   }
  }
 } while(0);
 $24 = $1;
 $25 = ($24|0)!=(0|0);
 L10: do {
  if ($25) {
   while(1) {
    $26 = $1;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = ($28|0)==(47);
    $30 = $1;
    if (!($29)) {
     break;
    }
    $31 = ((($30)) + 1|0);
    $1 = $31;
   }
   $32 = (_strlen($30)|0);
   $nLength2 = $32;
   while(1) {
    $33 = $nLength2;
    $34 = ($33>>>0)>(0);
    if (!($34)) {
     break L10;
    }
    $35 = $nLength2;
    $36 = (($35) - 1)|0;
    $37 = $1;
    $38 = (($37) + ($36)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(47);
    if (!($41)) {
     break L10;
    }
    $42 = $nLength2;
    $43 = (($42) + -1)|0;
    $nLength2 = $43;
   }
  }
 } while(0);
 $44 = $nLength1;
 $45 = $nLength2;
 $46 = (($44) + ($45))|0;
 $47 = (($46) + 2)|0;
 $48 = $47;
 $49 = (_malloc($48)|0);
 $szPathPtr = $49;
 $szFullPath = $49;
 $50 = $szFullPath;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  $80 = $szFullPath;
  STACKTOP = sp;return ($80|0);
 }
 $52 = $0;
 $53 = ($52|0)!=(0|0);
 $54 = $nLength1;
 $55 = ($54|0)!=(0);
 $or$cond = $53 & $55;
 if ($or$cond) {
  $56 = $szPathPtr;
  $57 = $0;
  $58 = $nLength1;
  $59 = $58;
  _memcpy(($56|0),($57|0),($59|0))|0;
  $60 = $nLength1;
  $61 = $szPathPtr;
  $62 = (($61) + ($60)|0);
  $szPathPtr = $62;
 }
 $63 = $1;
 $64 = ($63|0)!=(0|0);
 $65 = $nLength2;
 $66 = ($65|0)!=(0);
 $or$cond5 = $64 & $66;
 if ($or$cond5) {
  $67 = $szPathPtr;
  $68 = $szFullPath;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = $szPathPtr;
   $71 = ((($70)) + 1|0);
   $szPathPtr = $71;
   HEAP8[$70>>0] = 47;
  }
  $72 = $szPathPtr;
  $73 = $1;
  $74 = $nLength2;
  $75 = $74;
  _memcpy(($72|0),($73|0),($75|0))|0;
  $76 = $nLength2;
  $77 = $szPathPtr;
  $78 = (($77) + ($76)|0);
  $szPathPtr = $78;
 }
 $79 = $szPathPtr;
 HEAP8[$79>>0] = 0;
 $80 = $szFullPath;
 STACKTOP = sp;return ($80|0);
}
function __Z17NormalizeFileNamePKhPcPKcj($NormTable,$szNormName,$szFileName,$cchMaxChars) {
 $NormTable = $NormTable|0;
 $szNormName = $szNormName|0;
 $szFileName = $szFileName|0;
 $cchMaxChars = $cchMaxChars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $szNormNameEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $NormTable;
 $1 = $szNormName;
 $2 = $szFileName;
 $3 = $cchMaxChars;
 $4 = $1;
 $5 = $3;
 $6 = (($4) + ($5)|0);
 $szNormNameEnd = $6;
 $i = 0;
 while(1) {
  $7 = $2;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 5;
   break;
  }
  $11 = $1;
  $12 = $szNormNameEnd;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   label = 5;
   break;
  }
  $14 = $2;
  $15 = ((($14)) + 1|0);
  $2 = $15;
  $16 = HEAP8[$14>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = $0;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $1;
  $22 = ((($21)) + 1|0);
  $1 = $22;
  HEAP8[$21>>0] = $20;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 if ((label|0) == 5) {
  $25 = $1;
  HEAP8[$25>>0] = 0;
  $26 = $i;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z30NormalizeFileName_UpperBkSlashPcPKcj($szNormName,$szFileName,$cchMaxChars) {
 $szNormName = $szNormName|0;
 $szFileName = $szFileName|0;
 $cchMaxChars = $cchMaxChars|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szNormName;
 $1 = $szFileName;
 $2 = $cchMaxChars;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__Z17NormalizeFileNamePKhPcPKcj(13838,$3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __Z28NormalizeFileName_LowerSlashPcPKcj($szNormName,$szFileName,$cchMaxChars) {
 $szNormName = $szNormName|0;
 $szFileName = $szFileName|0;
 $cchMaxChars = $cchMaxChars|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szNormName;
 $1 = $szFileName;
 $2 = $cchMaxChars;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__Z17NormalizeFileNamePKhPcPKcj(13582,$3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __Z16CalcFileNameHashPKc($szFileName) {
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $dwHashHigh = 0, $dwHashLow = 0, $nLength = 0, $szNormName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $szNormName = sp + 16|0;
 $dwHashHigh = sp + 8|0;
 $dwHashLow = sp + 4|0;
 $0 = $szFileName;
 HEAP32[$dwHashHigh>>2] = 0;
 HEAP32[$dwHashLow>>2] = 0;
 $1 = $0;
 $2 = (__Z30NormalizeFileName_UpperBkSlashPcPKcj($szNormName,$1,1024)|0);
 $nLength = $2;
 $3 = $nLength;
 _hashlittle2($szNormName,$3,$dwHashHigh,$dwHashLow);
 $4 = HEAP32[$dwHashHigh>>2]|0;
 $5 = HEAP32[$dwHashLow>>2]|0;
 tempRet0 = ($4);
 STACKTOP = sp;return ($5|0);
}
function __Z19ConvertDigitToInt32PKcPj($szString,$PtrValue) {
 $szString = $szString|0;
 $PtrValue = $PtrValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Digit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szString;
 $1 = $PtrValue;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (13838 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) - 48)|0;
 $9 = $8&255;
 $Digit = $9;
 $10 = $Digit;
 $11 = $10&255;
 $12 = ($11|0)>(9);
 if ($12) {
  $13 = $Digit;
  $14 = $13&255;
  $15 = (($14) - 7)|0;
  $16 = $15&255;
  $Digit = $16;
 }
 $17 = $Digit;
 $18 = $17&255;
 $19 = $1;
 HEAP32[$19>>2] = $18;
 $20 = $Digit;
 $21 = $20&255;
 $22 = ($21|0)>(15);
 $23 = $22 ? 1000 : 0;
 STACKTOP = sp;return ($23|0);
}
function __Z20ConvertStringToInt08PKcPj($szString,$PtrValue) {
 $szString = $szString|0;
 $PtrValue = $PtrValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DigitOne = 0, $DigitTwo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szString;
 $1 = $PtrValue;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (13838 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) - 48)|0;
 $9 = $8&255;
 $DigitOne = $9;
 $10 = $0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = (13838 + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) - 48)|0;
 $18 = $17&255;
 $DigitTwo = $18;
 $19 = $DigitOne;
 $20 = $19&255;
 $21 = ($20|0)>(9);
 if ($21) {
  $22 = $DigitOne;
  $23 = $22&255;
  $24 = (($23) - 7)|0;
  $25 = $24&255;
  $DigitOne = $25;
 }
 $26 = $DigitTwo;
 $27 = $26&255;
 $28 = ($27|0)>(9);
 if ($28) {
  $29 = $DigitTwo;
  $30 = $29&255;
  $31 = (($30) - 7)|0;
  $32 = $31&255;
  $DigitTwo = $32;
 }
 $33 = $DigitOne;
 $34 = $33&255;
 $35 = $34 << 4;
 $36 = $DigitTwo;
 $37 = $36&255;
 $38 = $35 | $37;
 $39 = $1;
 HEAP32[$39>>2] = $38;
 $40 = $DigitOne;
 $41 = $40&255;
 $42 = ($41|0)<=(15);
 if (!($42)) {
  $46 = 0;
  $47 = $46 ? 0 : 1000;
  STACKTOP = sp;return ($47|0);
 }
 $43 = $DigitTwo;
 $44 = $43&255;
 $45 = ($44|0)<=(15);
 $46 = $45;
 $47 = $46 ? 0 : 1000;
 STACKTOP = sp;return ($47|0);
}
function __Z20ConvertStringToInt32PKcjPj($szString,$nMaxDigits,$PtrValue) {
 $szString = $szString|0;
 $nMaxDigits = $nMaxDigits|0;
 $PtrValue = $PtrValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $DigitOne = 0, $DigitTwo = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $szString;
 $2 = $nMaxDigits;
 $3 = $PtrValue;
 $4 = $2;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  ___assert_fail((14111|0),(14136|0),306,(14206|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7>>>0)<=(8);
 if (!($8)) {
  ___assert_fail((14227|0),(14136|0),307,(14206|0));
  // unreachable;
 }
 $9 = $3;
 HEAP32[$9>>2] = 0;
 $10 = $2;
 $11 = $10 >>> 1;
 $2 = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $2;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 15;
   break;
  }
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (13838 + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($20) - 48)|0;
  $22 = $21&255;
  $DigitOne = $22;
  $23 = $DigitOne;
  $24 = $23&255;
  $25 = ($24|0)>(9);
  if ($25) {
   $26 = $DigitOne;
   $27 = $26&255;
   $28 = (($27) - 7)|0;
   $29 = $28&255;
   $DigitOne = $29;
  }
  $30 = $1;
  $31 = ((($30)) + 1|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = (13838 + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($36) - 48)|0;
  $38 = $37&255;
  $DigitTwo = $38;
  $39 = $DigitTwo;
  $40 = $39&255;
  $41 = ($40|0)>(9);
  if ($41) {
   $42 = $DigitTwo;
   $43 = $42&255;
   $44 = (($43) - 7)|0;
   $45 = $44&255;
   $DigitTwo = $45;
  }
  $46 = $DigitOne;
  $47 = $46&255;
  $48 = ($47|0)>(15);
  if ($48) {
   label = 13;
   break;
  }
  $49 = $DigitTwo;
  $50 = $49&255;
  $51 = ($50|0)>(15);
  if ($51) {
   label = 13;
   break;
  }
  $52 = $3;
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 << 8;
  $55 = $DigitOne;
  $56 = $55&255;
  $57 = $56 << 4;
  $58 = $54 | $57;
  $59 = $DigitTwo;
  $60 = $59&255;
  $61 = $58 | $60;
  $62 = $3;
  HEAP32[$62>>2] = $61;
  $63 = $1;
  $64 = ((($63)) + 2|0);
  $1 = $64;
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 if ((label|0) == 13) {
  $0 = 1000;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function __Z21ConvertStringToBinaryPKcjPh($szString,$nMaxDigits,$pbBinary) {
 $szString = $szString|0;
 $nMaxDigits = $nMaxDigits|0;
 $pbBinary = $pbBinary|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ByteValue = 0, $DigitValue = 0, $dwCounter = 0, $szStringEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $szString;
 $2 = $nMaxDigits;
 $3 = $pbBinary;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5)|0);
 $szStringEnd = $6;
 $dwCounter = 0;
 $ByteValue = 0;
 while(1) {
  $7 = $1;
  $8 = $szStringEnd;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 10;
   break;
  }
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (13838 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($15) - 48)|0;
  $17 = $16&255;
  $DigitValue = $17;
  $18 = $DigitValue;
  $19 = $18&255;
  $20 = ($19|0)>(9);
  if ($20) {
   $21 = $DigitValue;
   $22 = $21&255;
   $23 = (($22) - 7)|0;
   $24 = $23&255;
   $DigitValue = $24;
  }
  $25 = $DigitValue;
  $26 = $25&255;
  $27 = ($26|0)>(15);
  if ($27) {
   label = 6;
   break;
  }
  $28 = $ByteValue;
  $29 = $28&255;
  $30 = $29 << 4;
  $31 = $DigitValue;
  $32 = $31&255;
  $33 = $30 | $32;
  $34 = $33&255;
  $ByteValue = $34;
  $35 = $dwCounter;
  $36 = (($35) + 1)|0;
  $dwCounter = $36;
  $37 = $dwCounter;
  $38 = $37 & 1;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = $ByteValue;
   $41 = $3;
   $42 = ((($41)) + 1|0);
   $3 = $42;
   HEAP8[$41>>0] = $40;
  }
  $43 = $1;
  $44 = ((($43)) + 1|0);
  $1 = $44;
 }
 if ((label|0) == 6) {
  $0 = 1000;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __Z16GetPlainFileNamePKc($szFileName) {
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $szPlainName = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szFileName;
 $1 = $0;
 $szPlainName = $1;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(92);
  if ($9) {
   label = 5;
  } else {
   $10 = $0;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)==(47);
   if ($13) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $14 = $0;
   $15 = ((($14)) + 1|0);
   $szPlainName = $15;
  }
  $16 = $0;
  $17 = ((($16)) + 1|0);
  $0 = $17;
 }
 $18 = $szPlainName;
 STACKTOP = sp;return ($18|0);
}
function __Z13CheckWildCardPKcS0_($szString,$szWildCard) {
 $szString = $szString|0;
 $szWildCard = $szWildCard|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $8 = 0, $9 = 0, $szWildCardPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 12|0;
 $1 = $szString;
 $2 = $szWildCard;
 L1: while(1) {
  while(1) {
   $3 = $2;
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = ($5|0)==(63);
   if (!($6)) {
    break;
   }
   $7 = $1;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(0);
   if ($10) {
    label = 5;
    break L1;
   }
   $11 = $2;
   $12 = ((($11)) + 1|0);
   $2 = $12;
   $13 = $1;
   $14 = ((($13)) + 1|0);
   $1 = $14;
  }
  $15 = $2;
  $szWildCardPtr = $15;
  $16 = $szWildCardPtr;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   label = 21;
   break;
  }
  $20 = $szWildCardPtr;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)==(42);
  $24 = $szWildCardPtr;
  if ($23) {
   $25 = ((($24)) + 1|0);
   $szWildCardPtr = $25;
   $26 = $szWildCardPtr;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(42);
   if ($29) {
    continue;
   }
   $30 = $szWildCardPtr;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = ($32|0)==(0);
   if ($33) {
    label = 11;
    break;
   }
   $34 = $szWildCardPtr;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = (13838 + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = $1;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = (13838 + ($42)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($39|0)==($45|0);
   if ($46) {
    $47 = $1;
    $48 = $szWildCardPtr;
    $49 = (__Z13CheckWildCardPKcS0_($47,$48)|0);
    if ($49) {
     label = 14;
     break;
    }
   }
  } else {
   $50 = HEAP8[$24>>0]|0;
   $51 = $50 << 24 >> 24;
   $52 = (13838 + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $1;
   $56 = HEAP8[$55>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = (13838 + ($57)|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = ($54|0)!=($60|0);
   if ($61) {
    label = 16;
    break;
   }
   $62 = $szWildCardPtr;
   $63 = ((($62)) + 1|0);
   $2 = $63;
  }
  $64 = $1;
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($66|0)==(0);
  if ($67) {
   label = 19;
   break;
  }
  $68 = $1;
  $69 = ((($68)) + 1|0);
  $1 = $69;
 }
 if ((label|0) == 5) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 }
 else if ((label|0) == 11) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 else if ((label|0) == 14) {
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
 }
 else if ((label|0) == 16) {
  $$expand_i1_val6 = 0;
  HEAP8[$0>>0] = $$expand_i1_val6;
 }
 else if ((label|0) == 19) {
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
 }
 else if ((label|0) == 21) {
  $70 = $1;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = ($72|0)==(0);
  $74 = $73 ? 1 : 0;
  $$expand_i1_val10 = $74&1;
  HEAP8[$0>>0] = $$expand_i1_val10;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $75 = $$pre_trunc&1;
 STACKTOP = sp;return ($75|0);
}
function __Z10IsValidMD5Ph($pbMd5) {
 $pbMd5 = $pbMd5|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $BitSummary = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pbMd5;
 $BitSummary = 0;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $3 | $7;
 $9 = $0;
 $10 = ((($9)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $8 | $12;
 $14 = $0;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $13 | $17;
 $19 = $0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $18 | $22;
 $24 = $0;
 $25 = ((($24)) + 5|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $23 | $27;
 $29 = $0;
 $30 = ((($29)) + 6|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $28 | $32;
 $34 = $0;
 $35 = ((($34)) + 7|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $33 | $37;
 $39 = $BitSummary;
 $40 = $39&255;
 $41 = $40 | $38;
 $42 = $41&255;
 $BitSummary = $42;
 $43 = $0;
 $44 = ((($43)) + 8|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $0;
 $48 = ((($47)) + 9|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = $46 | $50;
 $52 = $0;
 $53 = ((($52)) + 10|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $51 | $55;
 $57 = $0;
 $58 = ((($57)) + 11|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $56 | $60;
 $62 = $0;
 $63 = ((($62)) + 12|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $61 | $65;
 $67 = $0;
 $68 = ((($67)) + 13|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $66 | $70;
 $72 = $0;
 $73 = ((($72)) + 14|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = $71 | $75;
 $77 = $0;
 $78 = ((($77)) + 15|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $76 | $80;
 $82 = $BitSummary;
 $83 = $82&255;
 $84 = $83 | $81;
 $85 = $84&255;
 $BitSummary = $85;
 $86 = $BitSummary;
 $87 = $86&255;
 $88 = ($87|0)!=(0);
 STACKTOP = sp;return ($88|0);
}
function __Z19VerifyDataBlockHashPvjPh($pvDataBlock,$cbDataBlock,$expected_md5) {
 $pvDataBlock = $pvDataBlock|0;
 $cbDataBlock = $cbDataBlock|0;
 $expected_md5 = $expected_md5|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $md5_digest = 0, $md5_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $0 = sp + 128|0;
 $md5_state = sp;
 $md5_digest = sp + 112|0;
 $1 = $pvDataBlock;
 $2 = $cbDataBlock;
 $3 = $expected_md5;
 $4 = $3;
 $5 = (__Z10IsValidMD5Ph($4)|0);
 if ($5) {
  (_md5_init($md5_state)|0);
  $6 = $1;
  $7 = $2;
  (_md5_process($md5_state,$6,$7)|0);
  (_md5_done($md5_state,$md5_digest)|0);
  $8 = $3;
  $9 = (_memcmp($md5_digest,$8,16)|0);
  $10 = ($9|0)==(0);
  $$expand_i1_val2 = $10&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $11 = $$pre_trunc&1;
  STACKTOP = sp;return ($11|0);
 } else {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $11 = $$pre_trunc&1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _qsort_pointer_array($base,$num,$compare,$context) {
 $base = $base|0;
 $num = $num|0;
 $compare = $compare|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hi = 0, $higuy = 0, $histk = 0, $lo = 0, $loguy = 0, $lostk = 0, $mid = 0, $size = 0, $stkptr = 0;
 var $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $lostk = sp + 128|0;
 $histk = sp + 8|0;
 $0 = $base;
 $1 = $num;
 $2 = $compare;
 $3 = $context;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((14243|0),(14136|0),544,(14256|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((14276|0),(14136|0),545,(14256|0));
  // unreachable;
 }
 $8 = $1;
 $9 = ($8>>>0)<(2);
 if ($9) {
  STACKTOP = sp;return;
 }
 $stkptr = 0;
 $lo = 0;
 $10 = $1;
 $11 = (($10) - 1)|0;
 $hi = $11;
 while(1) {
  $12 = $hi;
  $13 = $lo;
  $14 = (($12) - ($13))|0;
  $15 = (($14) + 1)|0;
  $size = $15;
  $16 = $lo;
  $17 = $size;
  $18 = (($17>>>0) / 2)&-1;
  $19 = (($16) + ($18))|0;
  $mid = $19;
  $20 = $2;
  $21 = $3;
  $22 = $lo;
  $23 = $0;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $mid;
  $27 = $0;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iiii[$20 & 127]($21,$25,$29)|0);
  $31 = ($30|0)>(0);
  if ($31) {
   $32 = $lo;
   $33 = $0;
   $34 = (($33) + ($32<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $temp = $35;
   $36 = $mid;
   $37 = $0;
   $38 = (($37) + ($36<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $lo;
   $41 = $0;
   $42 = (($41) + ($40<<2)|0);
   HEAP32[$42>>2] = $39;
   $43 = $temp;
   $44 = $mid;
   $45 = $0;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $43;
  }
  $47 = $2;
  $48 = $3;
  $49 = $lo;
  $50 = $0;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $hi;
  $54 = $0;
  $55 = (($54) + ($53<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_iiii[$47 & 127]($48,$52,$56)|0);
  $58 = ($57|0)>(0);
  if ($58) {
   $59 = $lo;
   $60 = $0;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $temp = $62;
   $63 = $hi;
   $64 = $0;
   $65 = (($64) + ($63<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $lo;
   $68 = $0;
   $69 = (($68) + ($67<<2)|0);
   HEAP32[$69>>2] = $66;
   $70 = $temp;
   $71 = $hi;
   $72 = $0;
   $73 = (($72) + ($71<<2)|0);
   HEAP32[$73>>2] = $70;
  }
  $74 = $2;
  $75 = $3;
  $76 = $mid;
  $77 = $0;
  $78 = (($77) + ($76<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $hi;
  $81 = $0;
  $82 = (($81) + ($80<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (FUNCTION_TABLE_iiii[$74 & 127]($75,$79,$83)|0);
  $85 = ($84|0)>(0);
  if ($85) {
   $86 = $mid;
   $87 = $0;
   $88 = (($87) + ($86<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $temp = $89;
   $90 = $hi;
   $91 = $0;
   $92 = (($91) + ($90<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $mid;
   $95 = $0;
   $96 = (($95) + ($94<<2)|0);
   HEAP32[$96>>2] = $93;
   $97 = $temp;
   $98 = $hi;
   $99 = $0;
   $100 = (($99) + ($98<<2)|0);
   HEAP32[$100>>2] = $97;
  }
  $101 = $lo;
  $loguy = $101;
  $102 = $hi;
  $higuy = $102;
  while(1) {
   $103 = $mid;
   $104 = $loguy;
   $105 = ($103>>>0)>($104>>>0);
   L23: do {
    if ($105) {
     while(1) {
      $106 = $loguy;
      $107 = (($106) + 1)|0;
      $loguy = $107;
      $108 = $loguy;
      $109 = $mid;
      $110 = ($108>>>0)<($109>>>0);
      if (!($110)) {
       break L23;
      }
      $111 = $2;
      $112 = $3;
      $113 = $loguy;
      $114 = $0;
      $115 = (($114) + ($113<<2)|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $mid;
      $118 = $0;
      $119 = (($118) + ($117<<2)|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (FUNCTION_TABLE_iiii[$111 & 127]($112,$116,$120)|0);
      $122 = ($121|0)<=(0);
      if (!($122)) {
       break;
      }
     }
    }
   } while(0);
   $123 = $mid;
   $124 = $loguy;
   $125 = ($123>>>0)<=($124>>>0);
   L28: do {
    if ($125) {
     while(1) {
      $126 = $loguy;
      $127 = (($126) + 1)|0;
      $loguy = $127;
      $128 = $loguy;
      $129 = $hi;
      $130 = ($128>>>0)<=($129>>>0);
      if (!($130)) {
       break L28;
      }
      $131 = $2;
      $132 = $3;
      $133 = $loguy;
      $134 = $0;
      $135 = (($134) + ($133<<2)|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $mid;
      $138 = $0;
      $139 = (($138) + ($137<<2)|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (FUNCTION_TABLE_iiii[$131 & 127]($132,$136,$140)|0);
      $142 = ($141|0)<=(0);
      if (!($142)) {
       break;
      }
     }
    }
   } while(0);
   while(1) {
    $143 = $higuy;
    $144 = (($143) + -1)|0;
    $higuy = $144;
    $145 = $higuy;
    $146 = $mid;
    $147 = ($145>>>0)>($146>>>0);
    if (!($147)) {
     break;
    }
    $148 = $2;
    $149 = $3;
    $150 = $higuy;
    $151 = $0;
    $152 = (($151) + ($150<<2)|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $mid;
    $155 = $0;
    $156 = (($155) + ($154<<2)|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (FUNCTION_TABLE_iiii[$148 & 127]($149,$153,$157)|0);
    $159 = ($158|0)>(0);
    if (!($159)) {
     break;
    }
   }
   $160 = $higuy;
   $161 = $loguy;
   $162 = ($160>>>0)<($161>>>0);
   if ($162) {
    break;
   }
   $163 = $loguy;
   $164 = $0;
   $165 = (($164) + ($163<<2)|0);
   $166 = HEAP32[$165>>2]|0;
   $temp = $166;
   $167 = $higuy;
   $168 = $0;
   $169 = (($168) + ($167<<2)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $loguy;
   $172 = $0;
   $173 = (($172) + ($171<<2)|0);
   HEAP32[$173>>2] = $170;
   $174 = $temp;
   $175 = $higuy;
   $176 = $0;
   $177 = (($176) + ($175<<2)|0);
   HEAP32[$177>>2] = $174;
   $178 = $mid;
   $179 = $higuy;
   $180 = ($178|0)==($179|0);
   if (!($180)) {
    continue;
   }
   $181 = $loguy;
   $mid = $181;
  }
  $182 = $higuy;
  $183 = (($182) + 1)|0;
  $higuy = $183;
  $184 = $mid;
  $185 = $higuy;
  $186 = ($184>>>0)<($185>>>0);
  L39: do {
   if ($186) {
    while(1) {
     $187 = $higuy;
     $188 = (($187) + -1)|0;
     $higuy = $188;
     $189 = $higuy;
     $190 = $mid;
     $191 = ($189>>>0)>($190>>>0);
     if (!($191)) {
      break L39;
     }
     $192 = $2;
     $193 = $3;
     $194 = $higuy;
     $195 = $0;
     $196 = (($195) + ($194<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $mid;
     $199 = $0;
     $200 = (($199) + ($198<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (FUNCTION_TABLE_iiii[$192 & 127]($193,$197,$201)|0);
     $203 = ($202|0)==(0);
     if (!($203)) {
      break;
     }
    }
   }
  } while(0);
  $204 = $mid;
  $205 = $higuy;
  $206 = ($204>>>0)>=($205>>>0);
  L44: do {
   if ($206) {
    while(1) {
     $207 = $higuy;
     $208 = (($207) + -1)|0;
     $higuy = $208;
     $209 = $higuy;
     $210 = $lo;
     $211 = ($209>>>0)>($210>>>0);
     if (!($211)) {
      break L44;
     }
     $212 = $2;
     $213 = $3;
     $214 = $higuy;
     $215 = $0;
     $216 = (($215) + ($214<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $mid;
     $219 = $0;
     $220 = (($219) + ($218<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (FUNCTION_TABLE_iiii[$212 & 127]($213,$217,$221)|0);
     $223 = ($222|0)==(0);
     if (!($223)) {
      break;
     }
    }
   }
  } while(0);
  $224 = $higuy;
  $225 = $lo;
  $226 = (($224) - ($225))|0;
  $227 = $hi;
  $228 = $loguy;
  $229 = (($227) - ($228))|0;
  $230 = ($226>>>0)>=($229>>>0);
  if ($230) {
   $231 = $lo;
   $232 = $higuy;
   $233 = ($231>>>0)<($232>>>0);
   if ($233) {
    $234 = $lo;
    $235 = $stkptr;
    $236 = (($lostk) + ($235<<2)|0);
    HEAP32[$236>>2] = $234;
    $237 = $higuy;
    $238 = $stkptr;
    $239 = (($histk) + ($238<<2)|0);
    HEAP32[$239>>2] = $237;
    $240 = $stkptr;
    $241 = (($240) + 1)|0;
    $stkptr = $241;
   }
   $242 = $loguy;
   $243 = $hi;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    $245 = $loguy;
    $lo = $245;
    continue;
   }
  } else {
   $246 = $loguy;
   $247 = $hi;
   $248 = ($246>>>0)<($247>>>0);
   if ($248) {
    $249 = $loguy;
    $250 = $stkptr;
    $251 = (($lostk) + ($250<<2)|0);
    HEAP32[$251>>2] = $249;
    $252 = $hi;
    $253 = $stkptr;
    $254 = (($histk) + ($253<<2)|0);
    HEAP32[$254>>2] = $252;
    $255 = $stkptr;
    $256 = (($255) + 1)|0;
    $stkptr = $256;
   }
   $257 = $lo;
   $258 = $higuy;
   $259 = ($257>>>0)<($258>>>0);
   if ($259) {
    $260 = $higuy;
    $hi = $260;
    continue;
   }
  }
  $261 = $stkptr;
  $262 = (($261) + -1)|0;
  $stkptr = $262;
  $263 = $stkptr;
  $264 = ($263|0)>=(0);
  if (!($264)) {
   break;
  }
  $265 = $stkptr;
  $266 = (($lostk) + ($265<<2)|0);
  $267 = HEAP32[$266>>2]|0;
  $lo = $267;
  $268 = $stkptr;
  $269 = (($histk) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $hi = $270;
 }
 STACKTOP = sp;return;
}
function __Z15DirectoryExistsPKc($szDirectory) {
 $szDirectory = $szDirectory|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $dir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = $szDirectory;
 $2 = $1;
 $3 = (_opendir($2)|0);
 $dir = $3;
 $4 = $dir;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $dir;
  (_closedir($6)|0);
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __Z18ScanIndexDirectoryPKcPFbS0_PjS1_PvES1_S1_S2_($szIndexPath,$pfnOnFileFound,$MainIndexes,$OldIndexArray,$pvContext) {
 $szIndexPath = $szIndexPath|0;
 $pfnOnFileFound = $pfnOnFileFound|0;
 $MainIndexes = $MainIndexes|0;
 $OldIndexArray = $OldIndexArray|0;
 $pvContext = $pvContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dir = 0, $dir_entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $szIndexPath;
 $1 = $pfnOnFileFound;
 $2 = $MainIndexes;
 $3 = $OldIndexArray;
 $4 = $pvContext;
 $5 = $0;
 $6 = (_opendir($5)|0);
 $dir = $6;
 $7 = $dir;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $9 = $dir;
  $10 = (_readdir($9)|0);
  $dir_entry = $10;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $dir_entry;
  $13 = ((($12)) + 10|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(4);
  if (!($16)) {
   continue;
  }
  $17 = $1;
  $18 = $dir_entry;
  $19 = ((($18)) + 11|0);
  $20 = $2;
  $21 = $3;
  $22 = $4;
  (FUNCTION_TABLE_iiiii[$17 & 127]($19,$20,$21,$22)|0);
 }
 $23 = $dir;
 (_closedir($23)|0);
 STACKTOP = sp;return 0;
}
function __Z13Array_Create_P14_DYNAMIC_ARRAYjj($pArray,$ItemSize,$ItemCountMax) {
 $pArray = $pArray|0;
 $ItemSize = $ItemSize|0;
 $ItemCountMax = $ItemCountMax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pArray;
 $2 = $ItemSize;
 $3 = $ItemCountMax;
 $4 = $2;
 $5 = $3;
 $6 = Math_imul($4, $5)|0;
 $7 = $6;
 $8 = (_malloc($7)|0);
 $9 = $1;
 HEAP32[$9>>2] = $8;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = 12;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $13 = $3;
  $14 = $1;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $13;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = 0;
  $18 = $2;
  $19 = $1;
  $20 = ((($19)) + 12|0);
  HEAP32[$20>>2] = $18;
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($pArray,$NewItems,$NewItemCount) {
 $pArray = $pArray|0;
 $NewItems = $NewItems|0;
 $NewItemCount = $NewItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewItemPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pArray;
 $2 = $NewItems;
 $3 = $NewItemCount;
 $4 = $1;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (($7) + ($8))|0;
 $10 = (__ZL12EnlargeArrayP14_DYNAMIC_ARRAYj($4,$9)|0);
 if (!($10)) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = Math_imul($15, $18)|0;
 $20 = (($12) + ($19)|0);
 $NewItemPtr = $20;
 $21 = $2;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $NewItemPtr;
  $24 = $2;
  $25 = $3;
  $26 = $1;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($25, $28)|0;
  _memcpy(($23|0),($24|0),($29|0))|0;
 }
 $30 = $3;
 $31 = $1;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30))|0;
 HEAP32[$32>>2] = $34;
 $35 = $NewItemPtr;
 $0 = $35;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function __Z12Array_ItemAtP14_DYNAMIC_ARRAYj($pArray,$ItemIndex) {
 $pArray = $pArray|0;
 $ItemIndex = $ItemIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pArray;
 $1 = $ItemIndex;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)<($5>>>0);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = $0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = Math_imul($9, $12)|0;
  $14 = (($8) + ($13)|0);
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((14292|0),(14322|0),83,(14398|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z13Array_IndexOfP14_DYNAMIC_ARRAYPKv($pArray,$ArrayPtr) {
 $pArray = $pArray|0;
 $ArrayPtr = $ArrayPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ArrayItem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pArray;
 $1 = $ArrayPtr;
 $2 = $1;
 $ArrayItem = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $ArrayItem;
 $6 = ($4>>>0)<=($5>>>0);
 if (!($6)) {
  ___assert_fail((14411|0),(14322|0),91,(14517|0));
  // unreachable;
 }
 $7 = $ArrayItem;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $17 = (($9) + ($16)|0);
 $18 = ($7>>>0)<=($17>>>0);
 if ($18) {
  $19 = $ArrayItem;
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $19;
  $23 = $21;
  $24 = (($22) - ($23))|0;
  $25 = $0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24>>>0) / ($27>>>0))&-1;
  STACKTOP = sp;return ($28|0);
 } else {
  ___assert_fail((14411|0),(14322|0),91,(14517|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z10Array_FreeP14_DYNAMIC_ARRAY($pArray) {
 $pArray = $pArray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pArray;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $0;
   $7 = HEAP32[$6>>2]|0;
   _free($7);
  }
 }
 STACKTOP = sp;return;
}
function __ZL12EnlargeArrayP14_DYNAMIC_ARRAYj($pArray,$NewItemCount) {
 $pArray = $pArray|0;
 $NewItemCount = $NewItemCount|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ItemCountMax = 0, $NewItemArray = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 16|0;
 $1 = $pArray;
 $2 = $NewItemCount;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((14531|0),(14322|0),24,(14557|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  ___assert_fail((14570|0),(14322|0),25,(14557|0));
  // unreachable;
 }
 $10 = $2;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10>>>0)>($13>>>0);
 do {
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $ItemCountMax = $17;
   while(1) {
    $18 = $ItemCountMax;
    $19 = $2;
    $20 = ($18>>>0)<($19>>>0);
    if (!($20)) {
     break;
    }
    $21 = $ItemCountMax;
    $22 = $21 << 1;
    $ItemCountMax = $22;
   }
   $23 = $1;
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $ItemCountMax;
   $29 = Math_imul($27, $28)|0;
   $30 = $29;
   $31 = (_realloc($24,$30)|0);
   $NewItemArray = $31;
   $32 = $NewItemArray;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $34 = $ItemCountMax;
    $35 = $1;
    $36 = ((($35)) + 4|0);
    HEAP32[$36>>2] = $34;
    $37 = $NewItemArray;
    $38 = $1;
    HEAP32[$38>>2] = $37;
    break;
   }
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $39 = $$pre_trunc&1;
   STACKTOP = sp;return ($39|0);
  }
 } while(0);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $39 = $$pre_trunc&1;
 STACKTOP = sp;return ($39|0);
}
function __Z19FileStream_OpenFilePKcj($szFileName,$dwStreamFlags) {
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwProvider = 0, $nPrefixLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $dwProvider = sp + 4|0;
 $1 = $szFileName;
 $2 = $dwStreamFlags;
 $3 = $2;
 $4 = $3 & 255;
 HEAP32[$dwProvider>>2] = $4;
 $5 = $1;
 $6 = (__Z17FileStream_PrefixPKcPj($5,$dwProvider)|0);
 $nPrefixLength = $6;
 $7 = $2;
 $8 = $7 & 65280;
 $9 = HEAP32[$dwProvider>>2]|0;
 $10 = $8 | $9;
 $2 = $10;
 $11 = $nPrefixLength;
 $12 = $1;
 $13 = (($12) + ($11)|0);
 $1 = $13;
 $14 = $2;
 $15 = $14 & 240;
 switch ($15|0) {
 case 0:  {
  $16 = $1;
  $17 = $2;
  $18 = (__ZL15FlatStream_OpenPKcj($16,$17)|0);
  $0 = $18;
  break;
 }
 case 16:  {
  $19 = $1;
  $20 = $2;
  $21 = (__ZL15PartStream_OpenPKcj($19,$20)|0);
  $0 = $21;
  break;
 }
 case 32:  {
  $22 = $1;
  $23 = $2;
  $24 = (__ZL15EncrStream_OpenPKcj($22,$23)|0);
  $0 = $24;
  break;
 }
 case 48:  {
  $25 = $1;
  $26 = $2;
  $27 = (__ZL17Block4Stream_OpenPKcj($25,$26)|0);
  $0 = $27;
  break;
 }
 default: {
  _SetLastError(22);
  $0 = 0;
 }
 }
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function __Z17FileStream_PrefixPKcPj($szFileName,$pdwProvider) {
 $szFileName = $szFileName|0;
 $pdwProvider = $pdwProvider|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $dwProvider = 0, $nPrefixLength1 = 0, $nPrefixLength2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $szFileName;
 $2 = $pdwProvider;
 $nPrefixLength1 = 0;
 $nPrefixLength2 = 0;
 $dwProvider = 0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = (_strncasecmp($5,14596,5)|0);
  $7 = ($6|0)!=(0);
  do {
   if ($7) {
    $9 = $1;
    $10 = (_strncasecmp($9,14602,5)|0);
    $11 = ($10|0)!=(0);
    if (!($11)) {
     $12 = $dwProvider;
     $13 = $12 | 16;
     $dwProvider = $13;
     $nPrefixLength1 = 5;
     break;
    }
    $14 = $1;
    $15 = (_strncasecmp($14,14608,5)|0);
    $16 = ($15|0)!=(0);
    if (!($16)) {
     $17 = $dwProvider;
     $18 = $17 | 32;
     $dwProvider = $18;
     $nPrefixLength1 = 5;
     break;
    }
    $19 = $1;
    $20 = (_strncasecmp($19,14614,5)|0);
    $21 = ($20|0)!=(0);
    if (!($21)) {
     $22 = $dwProvider;
     $23 = $22 | 48;
     $dwProvider = $23;
     $nPrefixLength1 = 5;
    }
   } else {
    $8 = $dwProvider;
    $dwProvider = $8;
    $nPrefixLength1 = 5;
   }
  } while(0);
  $24 = $1;
  $25 = $nPrefixLength1;
  $26 = (($24) + ($25)|0);
  $27 = (_strncasecmp($26,14620,5)|0);
  $28 = ($27|0)!=(0);
  do {
   if ($28) {
    $30 = $1;
    $31 = $nPrefixLength1;
    $32 = (($30) + ($31)|0);
    $33 = (_strncasecmp($32,14626,4)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     $35 = $dwProvider;
     $36 = $35 | 1;
     $dwProvider = $36;
     $nPrefixLength2 = 4;
     break;
    }
    $37 = $1;
    $38 = $nPrefixLength1;
    $39 = (($37) + ($38)|0);
    $40 = (_strncasecmp($39,14631,5)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     $42 = $dwProvider;
     $43 = $42 | 2;
     $dwProvider = $43;
     $nPrefixLength2 = 5;
    }
   } else {
    $29 = $dwProvider;
    $dwProvider = $29;
    $nPrefixLength2 = 5;
   }
  } while(0);
  $44 = $nPrefixLength2;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $nPrefixLength1;
   $47 = $nPrefixLength2;
   $48 = (($46) + ($47))|0;
   $49 = $1;
   $50 = (($49) + ($48)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51 << 24 >> 24;
   $53 = ($52|0)==(47);
   if ($53) {
    $54 = $nPrefixLength1;
    $55 = $nPrefixLength2;
    $56 = (($54) + ($55))|0;
    $57 = (($56) + 1)|0;
    $58 = $1;
    $59 = (($58) + ($57)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)==(47);
    if ($62) {
     $63 = $nPrefixLength2;
     $64 = (($63) + 2)|0;
     $nPrefixLength2 = $64;
    }
   }
   $65 = $2;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $dwProvider;
    $68 = $2;
    HEAP32[$68>>2] = $67;
   }
   $69 = $nPrefixLength1;
   $70 = $nPrefixLength2;
   $71 = (($69) + ($70))|0;
   $0 = $71;
   $72 = $0;
   STACKTOP = sp;return ($72|0);
  }
 }
 $0 = 0;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function __Z15FileStream_ReadP11TFileStreamPyPvj($pStream,$pByteOffset,$pvBuffer,$dwBytesToRead) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pByteOffset;
 $2 = $pvBuffer;
 $3 = $dwBytesToRead;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $0;
  $10 = $1;
  $11 = $2;
  $12 = $3;
  $13 = (FUNCTION_TABLE_iiiii[$8 & 127]($9,$10,$11,$12)|0);
  STACKTOP = sp;return ($13|0);
 } else {
  ___assert_fail((14711|0),(14637|0),2570,(14739|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z18FileStream_GetSizeP11TFileStreamPy($pStream,$pFileSize) {
 $pStream = $pStream|0;
 $pFileSize = $pFileSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pFileSize;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $0;
  $10 = $1;
  $11 = (FUNCTION_TABLE_iii[$8 & 127]($9,$10)|0);
  STACKTOP = sp;return ($11|0);
 } else {
  ___assert_fail((14755|0),(14637|0),2606,(14786|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z16FileStream_CloseP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 96|0);
  $9 = HEAP32[$8>>2]|0;
  __Z16FileStream_CloseP11TFileStream($9);
 }
 $10 = $0;
 $11 = ((($10)) + 96|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 $16 = $0;
 if ($15) {
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  FUNCTION_TABLE_vi[$18 & 255]($19);
 } else {
  $20 = ((($16)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $0;
   $24 = ((($23)) + 60|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $0;
   FUNCTION_TABLE_vi[$25 & 255]($26);
  }
 }
 $27 = $0;
 _free($27);
 STACKTOP = sp;return;
}
function __ZL18AllocateFileStreamPKcjj($szFileName,$StreamSize,$dwStreamFlags) {
 $szFileName = $szFileName|0;
 $StreamSize = $StreamSize|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $FileNameSize = 0, $pMaster = 0, $pStream = 0, $szNextFile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $szFileName;
 $2 = $StreamSize;
 $3 = $dwStreamFlags;
 $pMaster = 0;
 $4 = $1;
 $szNextFile = $4;
 $5 = $2;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___assert_fail((16597|0),(14637|0),997,(16613|0));
  // unreachable;
 }
 while(1) {
  $7 = $szNextFile;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $szNextFile;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)!=(42);
   $72 = $14;
  } else {
   $72 = 0;
  }
  $15 = $szNextFile;
  if (!($72)) {
   break;
  }
  $16 = ((($15)) + 1|0);
  $szNextFile = $16;
 }
 $17 = $1;
 $18 = $15;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = $20;
 $FileNameSize = $21;
 $22 = $szNextFile;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 << 24 >> 24;
 $25 = ($24|0)==(42);
 do {
  if ($25) {
   $26 = $szNextFile;
   $27 = ((($26)) + 1|0);
   $28 = (_strchr($27,42)|0);
   $29 = ($28|0)!=(0|0);
   if (!($29)) {
    $30 = $szNextFile;
    $31 = ((($30)) + 1|0);
    $32 = (__Z19FileStream_OpenFilePKcj($31,256)|0);
    $pMaster = $32;
    break;
   }
   _SetLastError(22);
   $0 = 0;
   $71 = $0;
   STACKTOP = sp;return ($71|0);
  }
 } while(0);
 $33 = $2;
 $34 = $FileNameSize;
 $35 = (($33) + ($34))|0;
 $36 = (($35) + 1)|0;
 $37 = $36;
 $38 = (_malloc($37)|0);
 $pStream = $38;
 $39 = $pStream;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $pStream;
  $42 = $2;
  _memset(($41|0),0,($42|0))|0;
  $43 = $pMaster;
  $44 = $pStream;
  $45 = ((($44)) + 96|0);
  HEAP32[$45>>2] = $43;
  $46 = $3;
  $47 = $pStream;
  $48 = ((($47)) + 124|0);
  HEAP32[$48>>2] = $46;
  $49 = $pStream;
  $50 = $2;
  $51 = (($49) + ($50)|0);
  $52 = $pStream;
  $53 = ((($52)) + 100|0);
  HEAP32[$53>>2] = $51;
  $54 = $pStream;
  $55 = ((($54)) + 100|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $1;
  $58 = $FileNameSize;
  _memcpy(($56|0),($57|0),($58|0))|0;
  $59 = $FileNameSize;
  $60 = (($59>>>0) / 1)&-1;
  $61 = $pStream;
  $62 = ((($61)) + 100|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($60)|0);
  HEAP8[$64>>0] = 0;
  $65 = $3;
  $66 = $65 & 3;
  $67 = (1772 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $pStream;
  FUNCTION_TABLE_vi[$68 & 255]($69);
 }
 $70 = $pStream;
 $0 = $70;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function __ZL15BaseFile_CreateP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = $pStream;
 $2 = $1;
 $3 = ((($2)) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = 420;
 $5 = (_open($4,33346,$vararg_buffer)|0);
 $handle = $5;
 $6 = $handle;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = (___errno_location()|0);
  $9 = HEAP32[$8>>2]|0;
  _SetLastError($9);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $10 = $handle;
  $11 = $10;
  $12 = $1;
  $13 = ((($12)) + 64|0);
  $14 = ((($13)) + 24|0);
  HEAP32[$14>>2] = $11;
  $15 = $1;
  $16 = ((($15)) + 64|0);
  $17 = $16;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = 0;
  $21 = $1;
  $22 = ((($21)) + 64|0);
  $23 = ((($22)) + 8|0);
  $24 = $23;
  $25 = $24;
  HEAP32[$25>>2] = 0;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZL15FlatStream_OpenPKcj($szFileName,$dwStreamFlags) {
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ByteOffset = 0, $pStream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ByteOffset = sp;
 $1 = $szFileName;
 $2 = $dwStreamFlags;
 $3 = $ByteOffset;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = $2;
 $9 = (__ZL18AllocateFileStreamPKcjj($7,160,$8)|0);
 $pStream = $9;
 $10 = $pStream;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $12 = $pStream;
 $13 = ((($12)) + 96|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 $16 = $pStream;
 do {
  if ($15) {
   $17 = (__ZL23FlatStream_CreateMirrorP12TBlockStream($16)|0);
   if (!($17)) {
    $18 = $pStream;
    __Z16FileStream_CloseP11TFileStream($18);
    _SetLastError(2);
    $0 = 0;
    $121 = $0;
    STACKTOP = sp;return ($121|0);
   }
  } else {
   $19 = ((($16)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $pStream;
   $22 = $pStream;
   $23 = ((($22)) + 100|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $2;
   $26 = (FUNCTION_TABLE_iiii[$20 & 127]($21,$24,$25)|0);
   if ($26) {
    $28 = $2;
    $29 = $28 & 1024;
    $30 = ($29|0)!=(0);
    if (!($30)) {
     break;
    }
    $31 = $pStream;
    (__ZL21FlatStream_LoadBitmapP12TBlockStream($31)|0);
    break;
   } else {
    $27 = $pStream;
    __Z16FileStream_CloseP11TFileStream($27);
    $0 = 0;
    $121 = $0;
    STACKTOP = sp;return ($121|0);
   }
  }
 } while(0);
 $32 = $pStream;
 $33 = ((($32)) + 132|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 $36 = $pStream;
 do {
  if ($35) {
   $37 = ((($36)) + 104|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40|0)!=(0);
   $45 = ($43|0)!=(0);
   $46 = $44 | $45;
   if ($46) {
    $47 = $pStream;
    $48 = ((($47)) + 112|0);
    $49 = $48;
    $50 = $49;
    HEAP32[$50>>2] = 0;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = 0;
    $53 = $pStream;
    $54 = ((($53)) + 124|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 256;
    HEAP32[$54>>2] = $56;
    $57 = $pStream;
    HEAP32[$57>>2] = 26;
    $58 = $pStream;
    $59 = ((($58)) + 12|0);
    HEAP32[$59>>2] = 27;
    $60 = $pStream;
    $61 = ((($60)) + 16|0);
    HEAP32[$61>>2] = 28;
    $62 = $pStream;
    $63 = ((($62)) + 20|0);
    HEAP32[$63>>2] = 29;
    $64 = $pStream;
    $65 = ((($64)) + 28|0);
    HEAP32[$65>>2] = 30;
    $66 = $pStream;
    $67 = ((($66)) + 24|0);
    HEAP32[$67>>2] = 31;
    break;
   } else {
    ___assert_fail((15174|0),(14637|0),1376,(16495|0));
    // unreachable;
   }
  } else {
   $68 = ((($36)) + 40|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $pStream;
   (FUNCTION_TABLE_iiiii[$69 & 127]($70,$ByteOffset,0,0)|0);
   $71 = $pStream;
   $72 = ((($71)) + 64|0);
   $73 = $72;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 4)|0;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = $pStream;
   $80 = ((($79)) + 104|0);
   $81 = $80;
   $82 = $81;
   HEAP32[$82>>2] = $75;
   $83 = (($81) + 4)|0;
   $84 = $83;
   HEAP32[$84>>2] = $78;
   $85 = $pStream;
   $86 = ((($85)) + 112|0);
   $87 = $86;
   $88 = $87;
   HEAP32[$88>>2] = 0;
   $89 = (($87) + 4)|0;
   $90 = $89;
   HEAP32[$90>>2] = 0;
   $91 = $pStream;
   $92 = ((($91)) + 40|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $pStream;
   HEAP32[$94>>2] = $93;
   $95 = $pStream;
   $96 = ((($95)) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $pStream;
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $97;
   $100 = $pStream;
   $101 = ((($100)) + 48|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $pStream;
   $104 = ((($103)) + 8|0);
   HEAP32[$104>>2] = $102;
   $105 = $pStream;
   $106 = ((($105)) + 52|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $pStream;
   $109 = ((($108)) + 12|0);
   HEAP32[$109>>2] = $107;
   $110 = $pStream;
   $111 = ((($110)) + 56|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $pStream;
   $114 = ((($113)) + 16|0);
   HEAP32[$114>>2] = $112;
   $115 = $pStream;
   $116 = ((($115)) + 60|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $pStream;
   $119 = ((($118)) + 20|0);
   HEAP32[$119>>2] = $117;
  }
 } while(0);
 $120 = $pStream;
 $0 = $120;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function __ZL15PartStream_OpenPKcj($szFileName,$dwStreamFlags) {
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pStream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $szFileName;
 $2 = $dwStreamFlags;
 $3 = $1;
 $4 = $2;
 $5 = (__ZL18AllocateFileStreamPKcjj($3,160,$4)|0);
 $pStream = $5;
 $6 = $pStream;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $8 = $pStream;
 $9 = ((($8)) + 96|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $pStream;
 if ($11) {
  $13 = (__ZL23PartStream_CreateMirrorP12TBlockStream($12)|0);
  if (!($13)) {
   $14 = $pStream;
   __Z16FileStream_CloseP11TFileStream($14);
   _SetLastError(2);
   $0 = 0;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } else {
  $15 = ((($12)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $pStream;
  $18 = $pStream;
  $19 = ((($18)) + 100|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = (FUNCTION_TABLE_iiii[$16 & 127]($17,$20,$21)|0);
  $23 = $pStream;
  if (!($22)) {
   __Z16FileStream_CloseP11TFileStream($23);
   $0 = 0;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
  $24 = (__ZL21PartStream_LoadBitmapP12TBlockStream($23)|0);
  if (!($24)) {
   $25 = $pStream;
   __Z16FileStream_CloseP11TFileStream($25);
   _SetLastError(1000);
   $0 = 0;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 }
 $26 = $pStream;
 $27 = ((($26)) + 104|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)!=(0);
 $35 = ($33|0)!=(0);
 $36 = $34 | $35;
 if (!($36)) {
  ___assert_fail((15174|0),(14637|0),1795,(16196|0));
  // unreachable;
 }
 $37 = $pStream;
 $38 = ((($37)) + 112|0);
 $39 = $38;
 $40 = $39;
 HEAP32[$40>>2] = 0;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 $43 = $pStream;
 $44 = ((($43)) + 124|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 | 256;
 HEAP32[$44>>2] = $46;
 $47 = $pStream;
 HEAP32[$47>>2] = 26;
 $48 = $pStream;
 $49 = ((($48)) + 16|0);
 HEAP32[$49>>2] = 28;
 $50 = $pStream;
 $51 = ((($50)) + 12|0);
 HEAP32[$51>>2] = 27;
 $52 = $pStream;
 $53 = ((($52)) + 20|0);
 HEAP32[$53>>2] = 32;
 $54 = $pStream;
 $55 = ((($54)) + 28|0);
 HEAP32[$55>>2] = 33;
 $56 = $pStream;
 $57 = ((($56)) + 24|0);
 HEAP32[$57>>2] = 34;
 $58 = $pStream;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __ZL15EncrStream_OpenPKcj($szFileName,$dwStreamFlags) {
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pStream = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $szFileName;
 $2 = $dwStreamFlags;
 $3 = $1;
 $4 = $2;
 $5 = (__ZL18AllocateFileStreamPKcjj($3,224,$4)|0);
 $pStream = $5;
 $6 = $pStream;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $8 = $pStream;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((14805|0),(14637|0),2084,(15158|0));
  // unreachable;
 }
 $12 = $pStream;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $pStream;
 $16 = $pStream;
 $17 = ((($16)) + 100|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = (FUNCTION_TABLE_iiii[$14 & 127]($15,$18,$19)|0);
 if (!($20)) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $21 = $pStream;
 $22 = (__ZL24EncrStream_DetectFileKeyP16TEncryptedStream($21)|0);
 $23 = $pStream;
 if (!($22)) {
  __Z16FileStream_CloseP11TFileStream($23);
  _SetLastError(1005);
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $24 = ((($23)) + 104|0);
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)!=(0);
 $32 = ($30|0)!=(0);
 $33 = $31 | $32;
 if (!($33)) {
  ___assert_fail((15174|0),(14637|0),2092,(15158|0));
  // unreachable;
 }
 $34 = $pStream;
 $35 = ((($34)) + 112|0);
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = $pStream;
 $41 = ((($40)) + 124|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 | 256;
 HEAP32[$41>>2] = $43;
 $44 = $pStream;
 HEAP32[$44>>2] = 26;
 $45 = $pStream;
 $46 = ((($45)) + 16|0);
 HEAP32[$46>>2] = 28;
 $47 = $pStream;
 $48 = ((($47)) + 12|0);
 HEAP32[$48>>2] = 27;
 $49 = $pStream;
 $50 = ((($49)) + 60|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $pStream;
 $53 = ((($52)) + 20|0);
 HEAP32[$53>>2] = $51;
 $54 = $pStream;
 $55 = ((($54)) + 24|0);
 HEAP32[$55>>2] = 35;
 $56 = $pStream;
 $0 = $56;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function __ZL17Block4Stream_OpenPKcj($szFileName,$dwStreamFlags) {
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BlockCount = 0, $FileSize = 0, $NewBaseArray = 0, $RemainderBlock = 0, $dwBaseFiles = 0, $dwBaseFlags = 0, $nNameLength = 0, $nSuffix = 0, $pStream = 0, $szNameBuff = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 24|0;
 $RemainderBlock = sp + 16|0;
 $BlockCount = sp + 8|0;
 $FileSize = sp;
 $1 = $szFileName;
 $2 = $dwStreamFlags;
 $NewBaseArray = 0;
 $dwBaseFiles = 0;
 $3 = $1;
 $4 = $2;
 $5 = (__ZL18AllocateFileStreamPKcjj($3,160,$4)|0);
 $pStream = $5;
 $6 = $pStream;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $245 = $0;
  STACKTOP = sp;return ($245|0);
 }
 $8 = $pStream;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((14805|0),(14637|0),2221,(14831|0));
  // unreachable;
 }
 $12 = $pStream;
 $13 = ((($12)) + 100|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_strlen($14)|0);
 $nNameLength = $15;
 $16 = $nNameLength;
 $17 = (($16) - 2)|0;
 $18 = $pStream;
 $19 = ((($18)) + 100|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($17)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)==(46);
 if ($24) {
  $25 = $nNameLength;
  $26 = (($25) - 1)|0;
  $27 = $pStream;
  $28 = ((($27)) + 100|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(48);
  if ($33) {
   $34 = $nNameLength;
   $35 = (($34) - 2)|0;
   $nNameLength = $35;
  }
 }
 $36 = $nNameLength;
 $37 = $pStream;
 $38 = ((($37)) + 100|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36)|0);
 HEAP8[$40>>0] = 0;
 $41 = $pStream;
 HEAP32[$41>>2] = 26;
 $42 = $pStream;
 $43 = ((($42)) + 12|0);
 HEAP32[$43>>2] = 27;
 $44 = $pStream;
 $45 = ((($44)) + 16|0);
 HEAP32[$45>>2] = 28;
 $46 = $pStream;
 $47 = ((($46)) + 20|0);
 HEAP32[$47>>2] = 36;
 $48 = $pStream;
 $49 = ((($48)) + 24|0);
 HEAP32[$49>>2] = 37;
 $50 = $nNameLength;
 $51 = (($50) + 4)|0;
 $52 = $51;
 $53 = (_malloc($52)|0);
 $szNameBuff = $53;
 $54 = $szNameBuff;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = $2;
  $57 = $56 & 255;
  $58 = $57 | 256;
  $dwBaseFlags = $58;
  $nSuffix = 0;
  while(1) {
   $59 = $nSuffix;
   $60 = ($59|0)<(30);
   if (!($60)) {
    break;
   }
   $61 = $szNameBuff;
   $62 = $pStream;
   $63 = ((($62)) + 100|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $nSuffix;
   HEAP32[$vararg_buffer>>2] = $64;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $65;
   (_sprintf($61,14849,$vararg_buffer)|0);
   $66 = $pStream;
   $67 = ((($66)) + 36|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $pStream;
   $70 = $szNameBuff;
   $71 = $dwBaseFlags;
   $72 = (FUNCTION_TABLE_iiii[$68 & 127]($69,$70,$71)|0);
   if (!($72)) {
    break;
   }
   $73 = $dwBaseFiles;
   $74 = (($73) + 1)|0;
   $75 = $74<<5;
   $76 = (_malloc($75)|0);
   $NewBaseArray = $76;
   $77 = $NewBaseArray;
   $78 = ($77|0)==(0|0);
   if ($78) {
    label = 13;
    break;
   }
   $79 = $pStream;
   $80 = ((($79)) + 132|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0|0);
   if ($82) {
    $83 = $NewBaseArray;
    $84 = $pStream;
    $85 = ((($84)) + 132|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $dwBaseFiles;
    $88 = $87<<5;
    _memcpy(($83|0),($86|0),($88|0))|0;
    $89 = $pStream;
    $90 = ((($89)) + 132|0);
    $91 = HEAP32[$90>>2]|0;
    _free($91);
   }
   $92 = $NewBaseArray;
   $93 = $dwBaseFiles;
   $94 = (($92) + ($93<<5)|0);
   $95 = $pStream;
   $96 = ((($95)) + 64|0);
   ;HEAP32[$94>>2]=HEAP32[$96>>2]|0;HEAP32[$94+4>>2]=HEAP32[$96+4>>2]|0;HEAP32[$94+8>>2]=HEAP32[$96+8>>2]|0;HEAP32[$94+12>>2]=HEAP32[$96+12>>2]|0;HEAP32[$94+16>>2]=HEAP32[$96+16>>2]|0;HEAP32[$94+20>>2]=HEAP32[$96+20>>2]|0;HEAP32[$94+24>>2]=HEAP32[$96+24>>2]|0;HEAP32[$94+28>>2]=HEAP32[$96+28>>2]|0;
   $97 = $NewBaseArray;
   $98 = $pStream;
   $99 = ((($98)) + 132|0);
   HEAP32[$99>>2] = $97;
   $100 = $dwBaseFiles;
   $101 = (($100) + 1)|0;
   $dwBaseFiles = $101;
   $102 = $pStream;
   $103 = ((($102)) + 52|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $pStream;
   (FUNCTION_TABLE_iii[$104 & 127]($105,$FileSize)|0);
   $106 = $FileSize;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111>>>0)<(0);
   $113 = ($108>>>0)<=(134479872);
   $114 = ($111|0)==(0);
   $115 = $114 & $113;
   $116 = $112 | $115;
   if (!($116)) {
    label = 17;
    break;
   }
   $117 = $FileSize;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = (___uremdi3(($119|0),($122|0),16416,0)|0);
   $124 = tempRet0;
   $125 = $RemainderBlock;
   $126 = $125;
   HEAP32[$126>>2] = $123;
   $127 = (($125) + 4)|0;
   $128 = $127;
   HEAP32[$128>>2] = $124;
   $129 = $FileSize;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = (___udivdi3(($131|0),($134|0),16416,0)|0);
   $136 = tempRet0;
   $137 = $BlockCount;
   $138 = $137;
   HEAP32[$138>>2] = $135;
   $139 = (($137) + 4)|0;
   $140 = $139;
   HEAP32[$140>>2] = $136;
   $141 = $BlockCount;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + 4)|0;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = (___muldi3(($143|0),($146|0),16384,0)|0);
   $148 = tempRet0;
   $149 = $pStream;
   $150 = ((($149)) + 104|0);
   $151 = $150;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + 4)|0;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $157 = (_i64Add(($153|0),($156|0),($147|0),($148|0))|0);
   $158 = tempRet0;
   $159 = $150;
   $160 = $159;
   HEAP32[$160>>2] = $157;
   $161 = (($159) + 4)|0;
   $162 = $161;
   HEAP32[$162>>2] = $158;
   $163 = $BlockCount;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $166 = (($163) + 4)|0;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = $pStream;
   $170 = ((($169)) + 148|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + ($165))|0;
   HEAP32[$170>>2] = $172;
   $173 = $FileSize;
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   $176 = (($173) + 4)|0;
   $177 = $176;
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178>>>0)<(0);
   $180 = ($175>>>0)<(134479872);
   $181 = ($178|0)==(0);
   $182 = $181 & $180;
   $183 = $179 | $182;
   if ($183) {
    label = 19;
    break;
   }
   $219 = $nSuffix;
   $220 = (($219) + 1)|0;
   $nSuffix = $220;
  }
  if ((label|0) == 13) {
   _SetLastError(12);
   $0 = 0;
   $245 = $0;
   STACKTOP = sp;return ($245|0);
  }
  else if ((label|0) == 17) {
   ___assert_fail((14855|0),(14637|0),2273,(14831|0));
   // unreachable;
  }
  else if ((label|0) == 19) {
   $184 = $RemainderBlock;
   $185 = $184;
   $186 = HEAP32[$185>>2]|0;
   $187 = (($184) + 4)|0;
   $188 = $187;
   $189 = HEAP32[$188>>2]|0;
   $190 = ($186|0)!=(0);
   $191 = ($189|0)!=(0);
   $192 = $190 | $191;
   if ($192) {
    $193 = $RemainderBlock;
    $194 = $193;
    $195 = HEAP32[$194>>2]|0;
    $196 = (($193) + 4)|0;
    $197 = $196;
    $198 = HEAP32[$197>>2]|0;
    $199 = (_i64Subtract(($195|0),($198|0),32,0)|0);
    $200 = tempRet0;
    $201 = $pStream;
    $202 = ((($201)) + 104|0);
    $203 = $202;
    $204 = $203;
    $205 = HEAP32[$204>>2]|0;
    $206 = (($203) + 4)|0;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (_i64Add(($205|0),($208|0),($199|0),($200|0))|0);
    $210 = tempRet0;
    $211 = $202;
    $212 = $211;
    HEAP32[$212>>2] = $209;
    $213 = (($211) + 4)|0;
    $214 = $213;
    HEAP32[$214>>2] = $210;
    $215 = $pStream;
    $216 = ((($215)) + 148|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + 1)|0;
    HEAP32[$216>>2] = $218;
   }
  }
  $221 = $dwBaseFiles;
  $222 = $pStream;
  $223 = ((($222)) + 140|0);
  HEAP32[$223>>2] = $221;
  $224 = $pStream;
  $225 = ((($224)) + 144|0);
  HEAP32[$225>>2] = 16384;
  $226 = $pStream;
  $227 = ((($226)) + 152|0);
  HEAP32[$227>>2] = 1;
  $228 = $pStream;
  $229 = ((($228)) + 156|0);
  HEAP32[$229>>2] = 0;
  $230 = $pStream;
  $231 = ((($230)) + 112|0);
  $232 = $231;
  $233 = $232;
  HEAP32[$233>>2] = 0;
  $234 = (($232) + 4)|0;
  $235 = $234;
  HEAP32[$235>>2] = 0;
  $236 = $pStream;
  $237 = ((($236)) + 124|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $238 | 256;
  HEAP32[$237>>2] = $239;
  $240 = $szNameBuff;
  _free($240);
 }
 $241 = $dwBaseFiles;
 $242 = ($241|0)==(0);
 if ($242) {
  $243 = $pStream;
  __Z16FileStream_CloseP11TFileStream($243);
  _SetLastError(2);
  $pStream = 0;
 }
 $244 = $pStream;
 $0 = $244;
 $245 = $0;
 STACKTOP = sp;return ($245|0);
}
function __ZL13BaseFile_OpenP11TFileStreamPKcj($pStream,$szFileName,$dwStreamFlags) {
 $pStream = $pStream|0;
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fileinfo = 0, $handle = 0, $oflag = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $0 = sp + 100|0;
 $fileinfo = sp + 12|0;
 $1 = $pStream;
 $2 = $szFileName;
 $3 = $dwStreamFlags;
 $4 = $3;
 $5 = $4 & 256;
 $6 = ($5|0)!=(0);
 $7 = $6 ? 0 : 2;
 $oflag = $7;
 $8 = $2;
 $9 = $oflag;
 $10 = $9 | 32768;
 $11 = (_open($8,$10,$vararg_buffer)|0);
 $handle = $11;
 $12 = $handle;
 $13 = ($12|0)==(-1);
 if ($13) {
  $14 = (___errno_location()|0);
  $15 = HEAP32[$14>>2]|0;
  _SetLastError($15);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 $16 = $handle;
 $17 = (_fstat($16,$fileinfo)|0);
 $18 = ($17|0)==(-1);
 if ($18) {
  $19 = (___errno_location()|0);
  $20 = HEAP32[$19>>2]|0;
  _SetLastError($20);
  $21 = $handle;
  (_close($21)|0);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 } else {
  $22 = ((($fileinfo)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = Math_imul(10000000, $23)|0;
  $25 = ($24|0)<(0);
  $26 = $25 << 31 >> 31;
  $27 = (_i64Add(-717324288,27111902,($24|0),($26|0))|0);
  $28 = tempRet0;
  $29 = $1;
  $30 = ((($29)) + 64|0);
  $31 = ((($30)) + 16|0);
  $32 = $31;
  $33 = $32;
  HEAP32[$33>>2] = $27;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $28;
  $36 = ((($fileinfo)) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = $1;
  $41 = ((($40)) + 64|0);
  $42 = $41;
  $43 = $42;
  HEAP32[$43>>2] = $37;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $39;
  $46 = $handle;
  $47 = $46;
  $48 = $1;
  $49 = ((($48)) + 64|0);
  $50 = ((($49)) + 24|0);
  HEAP32[$50>>2] = $47;
  $51 = $1;
  $52 = ((($51)) + 64|0);
  $53 = ((($52)) + 8|0);
  $54 = $53;
  $55 = $54;
  HEAP32[$55>>2] = 0;
  $56 = (($54) + 4)|0;
  $57 = $56;
  HEAP32[$57>>2] = 0;
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZL16BlockStream_ReadP12TBlockStreamPyPvj($pStream,$pByteOffset,$pvBuffer,$dwBytesToRead) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BlockBuffer = 0, $BlockBufferOffset = 0, $BlockCount = 0;
 var $BlockOffset = 0, $BlockOffset0 = 0, $BlockSize = 0, $ByteOffset = 0, $BytesNeeded = 0, $EndOffset = 0, $TransferBuffer = 0, $bBlockAvailable = 0, $bCallbackCalled = 0, $bPrevBlockAvailable = 0, $bResult = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $0 = sp + 76|0;
 $BlockOffset0 = sp + 24|0;
 $BlockOffset = sp + 16|0;
 $ByteOffset = sp + 8|0;
 $EndOffset = sp;
 $1 = $pStream;
 $2 = $pByteOffset;
 $3 = $pvBuffer;
 $4 = $dwBytesToRead;
 $5 = $1;
 $6 = ((($5)) + 144|0);
 $7 = HEAP32[$6>>2]|0;
 $BlockSize = $7;
 $bCallbackCalled = 0;
 $bResult = 1;
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((15024|0),(14637|0),831,(15051|0));
  // unreachable;
 }
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $531 = $$pre_trunc&1;
  STACKTOP = sp;return ($531|0);
 }
 $14 = $2;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $33 = $19;$36 = $22;
 } else {
  $23 = $1;
  $24 = ((($23)) + 112|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $33 = $27;$36 = $30;
 }
 $31 = $ByteOffset;
 $32 = $31;
 HEAP32[$32>>2] = $33;
 $34 = (($31) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = $ByteOffset;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $4;
 $44 = (_i64Add(($39|0),($42|0),($43|0),0)|0);
 $45 = tempRet0;
 $46 = $EndOffset;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $EndOffset;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = $1;
 $57 = ((($56)) + 104|0);
 $58 = $57;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($55>>>0)>($63>>>0);
 $65 = ($52>>>0)>($60>>>0);
 $66 = ($55|0)==($63|0);
 $67 = $66 & $65;
 $68 = $64 | $67;
 if ($68) {
  _SetLastError(1002);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $531 = $$pre_trunc&1;
  STACKTOP = sp;return ($531|0);
 }
 $69 = $ByteOffset;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = $BlockSize;
 $76 = (_i64Subtract(($75|0),0,1,0)|0);
 $77 = tempRet0;
 $78 = $76 ^ -1;
 $79 = $77 ^ -1;
 $80 = $71 & $78;
 $81 = $74 & $79;
 $82 = $BlockOffset;
 $83 = $82;
 HEAP32[$83>>2] = $80;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = $81;
 $86 = $BlockOffset0;
 $87 = $86;
 HEAP32[$87>>2] = $80;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $81;
 $90 = $EndOffset;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = $BlockOffset;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (_i64Subtract(($92|0),($95|0),($98|0),($101|0))|0);
 $103 = tempRet0;
 $104 = $BlockSize;
 $105 = (($104) - 1)|0;
 $106 = (_i64Add(($102|0),($103|0),($105|0),0)|0);
 $107 = tempRet0;
 $108 = $BlockSize;
 $109 = (___udivdi3(($106|0),($107|0),($108|0),0)|0);
 $110 = tempRet0;
 $BlockCount = $109;
 $111 = $EndOffset;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($111) + 4)|0;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = $BlockOffset;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = (($117) + 4)|0;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = (_i64Subtract(($113|0),($116|0),($119|0),($122|0))|0);
 $124 = tempRet0;
 $BytesNeeded = $123;
 $125 = $BlockSize;
 $126 = $BlockSize;
 $127 = (($126) - 1)|0;
 $128 = $125 & $127;
 $129 = ($128|0)==(0);
 if (!($129)) {
  ___assert_fail((15068|0),(14637|0),852,(15051|0));
  // unreachable;
 }
 $130 = $ByteOffset;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = $BlockSize;
 $137 = (($136) - 1)|0;
 $138 = $132 & $137;
 $BlockBufferOffset = $138;
 $139 = $BlockCount;
 $140 = $BlockSize;
 $141 = Math_imul($139, $140)|0;
 $142 = $141;
 $143 = (_malloc($142)|0);
 $BlockBuffer = $143;
 $TransferBuffer = $143;
 $144 = $TransferBuffer;
 $145 = ($144|0)==(0|0);
 if ($145) {
  _SetLastError(12);
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $531 = $$pre_trunc&1;
  STACKTOP = sp;return ($531|0);
 }
 $146 = $1;
 $147 = ((($146)) + 152|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(0);
 if ($149) {
  $150 = $1;
  $151 = ((($150)) + 28|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0|0);
  if (!($153)) {
   ___assert_fail((15103|0),(14637|0),868,(15051|0));
   // unreachable;
  }
  $154 = $1;
  $155 = ((($154)) + 28|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $1;
  $158 = $BlockOffset;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_iiii[$156 & 127]($157,$160,$163)|0);
  $165 = $164&1;
  $bPrevBlockAvailable = $165;
  while(1) {
   $166 = $BlockOffset;
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = (($166) + 4)|0;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = $EndOffset;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $178 = ($171>>>0)<($177>>>0);
   $179 = ($168>>>0)<($174>>>0);
   $180 = ($171|0)==($177|0);
   $181 = $180 & $179;
   $182 = $178 | $181;
   if (!($182)) {
    break;
   }
   $183 = $1;
   $184 = ((($183)) + 28|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $1;
   $187 = $BlockOffset;
   $188 = $187;
   $189 = HEAP32[$188>>2]|0;
   $190 = (($187) + 4)|0;
   $191 = $190;
   $192 = HEAP32[$191>>2]|0;
   $193 = (FUNCTION_TABLE_iiii[$185 & 127]($186,$189,$192)|0);
   $194 = $193&1;
   $bBlockAvailable = $194;
   $195 = $bBlockAvailable;
   $196 = $195&1;
   $197 = $196&1;
   $198 = $bPrevBlockAvailable;
   $199 = $198&1;
   $200 = $199&1;
   $201 = ($197|0)!=($200|0);
   if ($201) {
    $202 = $1;
    $203 = ((($202)) + 96|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204|0)!=(0|0);
    if ($205) {
     $206 = $1;
     $207 = ((($206)) + 128|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)!=(0|0);
     if ($209) {
      $210 = $bPrevBlockAvailable;
      $211 = $210&1;
      $212 = $211&1;
      $213 = ($212|0)==(0);
      if ($213) {
       $214 = $1;
       $215 = ((($214)) + 128|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = $1;
       $218 = ((($217)) + 136|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = $BlockOffset0;
       $221 = $220;
       $222 = HEAP32[$221>>2]|0;
       $223 = (($220) + 4)|0;
       $224 = $223;
       $225 = HEAP32[$224>>2]|0;
       $226 = $BlockOffset;
       $227 = $226;
       $228 = HEAP32[$227>>2]|0;
       $229 = (($226) + 4)|0;
       $230 = $229;
       $231 = HEAP32[$230>>2]|0;
       $232 = $BlockOffset0;
       $233 = $232;
       $234 = HEAP32[$233>>2]|0;
       $235 = (($232) + 4)|0;
       $236 = $235;
       $237 = HEAP32[$236>>2]|0;
       $238 = (_i64Subtract(($228|0),($231|0),($234|0),($237|0))|0);
       $239 = tempRet0;
       FUNCTION_TABLE_viiii[$216 & 127]($219,$222,$225,$238);
       $bCallbackCalled = 1;
      }
     }
    }
    $240 = $BlockOffset;
    $241 = $240;
    $242 = HEAP32[$241>>2]|0;
    $243 = (($240) + 4)|0;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = $BlockOffset0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = (($246) + 4)|0;
    $250 = $249;
    $251 = HEAP32[$250>>2]|0;
    $252 = ($245>>>0)>($251>>>0);
    $253 = ($242>>>0)>($248>>>0);
    $254 = ($245|0)==($251|0);
    $255 = $254 & $253;
    $256 = $252 | $255;
    if (!($256)) {
     label = 25;
     break;
    }
    $257 = $1;
    $258 = ((($257)) + 24|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $1;
    $261 = $BlockOffset0;
    $262 = $261;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($261) + 4)|0;
    $265 = $264;
    $266 = HEAP32[$265>>2]|0;
    $267 = $BlockOffset;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = $BlockBuffer;
    $274 = $BytesNeeded;
    $275 = $bPrevBlockAvailable;
    $276 = $275&1;
    $277 = (FUNCTION_TABLE_iiiiiiiii[$259 & 63]($260,$263,$266,$269,$272,$273,$274,$276)|0);
    $278 = $277&1;
    $bResult = $278;
    $279 = $bResult;
    $280 = $279&1;
    if (!($280)) {
     break;
    }
    $281 = $BlockOffset;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    $284 = (($281) + 4)|0;
    $285 = $284;
    $286 = HEAP32[$285>>2]|0;
    $287 = $BlockOffset0;
    $288 = $287;
    $289 = HEAP32[$288>>2]|0;
    $290 = (($287) + 4)|0;
    $291 = $290;
    $292 = HEAP32[$291>>2]|0;
    $293 = (_i64Subtract(($283|0),($286|0),($289|0),($292|0))|0);
    $294 = tempRet0;
    $295 = $BlockBuffer;
    $296 = (($295) + ($293)|0);
    $BlockBuffer = $296;
    $297 = $BlockOffset;
    $298 = $297;
    $299 = HEAP32[$298>>2]|0;
    $300 = (($297) + 4)|0;
    $301 = $300;
    $302 = HEAP32[$301>>2]|0;
    $303 = $BlockOffset0;
    $304 = $303;
    $305 = HEAP32[$304>>2]|0;
    $306 = (($303) + 4)|0;
    $307 = $306;
    $308 = HEAP32[$307>>2]|0;
    $309 = (_i64Subtract(($299|0),($302|0),($305|0),($308|0))|0);
    $310 = tempRet0;
    $311 = $BytesNeeded;
    $312 = (($311) - ($309))|0;
    $BytesNeeded = $312;
    $313 = $bBlockAvailable;
    $314 = $313&1;
    $315 = $314&1;
    $bPrevBlockAvailable = $315;
    $316 = $BlockOffset;
    $317 = $316;
    $318 = HEAP32[$317>>2]|0;
    $319 = (($316) + 4)|0;
    $320 = $319;
    $321 = HEAP32[$320>>2]|0;
    $322 = $BlockOffset0;
    $323 = $322;
    HEAP32[$323>>2] = $318;
    $324 = (($322) + 4)|0;
    $325 = $324;
    HEAP32[$325>>2] = $321;
   }
   $326 = $BlockSize;
   $327 = $BlockOffset;
   $328 = $327;
   $329 = HEAP32[$328>>2]|0;
   $330 = (($327) + 4)|0;
   $331 = $330;
   $332 = HEAP32[$331>>2]|0;
   $333 = (_i64Add(($329|0),($332|0),($326|0),0)|0);
   $334 = tempRet0;
   $335 = $BlockOffset;
   $336 = $335;
   HEAP32[$336>>2] = $333;
   $337 = (($335) + 4)|0;
   $338 = $337;
   HEAP32[$338>>2] = $334;
  }
  if ((label|0) == 25) {
   ___assert_fail((15131|0),(14637|0),888,(15051|0));
   // unreachable;
  }
  $339 = $BlockOffset;
  $340 = $339;
  $341 = HEAP32[$340>>2]|0;
  $342 = (($339) + 4)|0;
  $343 = $342;
  $344 = HEAP32[$343>>2]|0;
  $345 = $BlockOffset0;
  $346 = $345;
  $347 = HEAP32[$346>>2]|0;
  $348 = (($345) + 4)|0;
  $349 = $348;
  $350 = HEAP32[$349>>2]|0;
  $351 = ($344>>>0)>($350>>>0);
  $352 = ($341>>>0)>($347>>>0);
  $353 = ($344|0)==($350|0);
  $354 = $353 & $352;
  $355 = $351 | $354;
  if ($355) {
   $356 = $1;
   $357 = ((($356)) + 96|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = ($358|0)!=(0|0);
   if ($359) {
    $360 = $1;
    $361 = ((($360)) + 128|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ($362|0)!=(0|0);
    if ($363) {
     $364 = $bPrevBlockAvailable;
     $365 = $364&1;
     $366 = $365&1;
     $367 = ($366|0)==(0);
     if ($367) {
      $368 = $1;
      $369 = ((($368)) + 128|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = $1;
      $372 = ((($371)) + 136|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = $BlockOffset0;
      $375 = $374;
      $376 = HEAP32[$375>>2]|0;
      $377 = (($374) + 4)|0;
      $378 = $377;
      $379 = HEAP32[$378>>2]|0;
      $380 = $BlockOffset;
      $381 = $380;
      $382 = HEAP32[$381>>2]|0;
      $383 = (($380) + 4)|0;
      $384 = $383;
      $385 = HEAP32[$384>>2]|0;
      $386 = $BlockOffset0;
      $387 = $386;
      $388 = HEAP32[$387>>2]|0;
      $389 = (($386) + 4)|0;
      $390 = $389;
      $391 = HEAP32[$390>>2]|0;
      $392 = (_i64Subtract(($382|0),($385|0),($388|0),($391|0))|0);
      $393 = tempRet0;
      FUNCTION_TABLE_viiii[$370 & 127]($373,$376,$379,$392);
      $bCallbackCalled = 1;
     }
    }
   }
   $394 = $BlockOffset;
   $395 = $394;
   $396 = HEAP32[$395>>2]|0;
   $397 = (($394) + 4)|0;
   $398 = $397;
   $399 = HEAP32[$398>>2]|0;
   $400 = $1;
   $401 = ((($400)) + 104|0);
   $402 = $401;
   $403 = $402;
   $404 = HEAP32[$403>>2]|0;
   $405 = (($402) + 4)|0;
   $406 = $405;
   $407 = HEAP32[$406>>2]|0;
   $408 = ($399>>>0)>($407>>>0);
   $409 = ($396>>>0)>($404>>>0);
   $410 = ($399|0)==($407|0);
   $411 = $410 & $409;
   $412 = $408 | $411;
   if ($412) {
    $413 = $1;
    $414 = ((($413)) + 104|0);
    $415 = $414;
    $416 = $415;
    $417 = HEAP32[$416>>2]|0;
    $418 = (($415) + 4)|0;
    $419 = $418;
    $420 = HEAP32[$419>>2]|0;
    $421 = $BlockOffset;
    $422 = $421;
    HEAP32[$422>>2] = $417;
    $423 = (($421) + 4)|0;
    $424 = $423;
    HEAP32[$424>>2] = $420;
   }
   $425 = $1;
   $426 = ((($425)) + 24|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = $1;
   $429 = $BlockOffset0;
   $430 = $429;
   $431 = HEAP32[$430>>2]|0;
   $432 = (($429) + 4)|0;
   $433 = $432;
   $434 = HEAP32[$433>>2]|0;
   $435 = $BlockOffset;
   $436 = $435;
   $437 = HEAP32[$436>>2]|0;
   $438 = (($435) + 4)|0;
   $439 = $438;
   $440 = HEAP32[$439>>2]|0;
   $441 = $BlockBuffer;
   $442 = $BytesNeeded;
   $443 = $bPrevBlockAvailable;
   $444 = $443&1;
   $445 = (FUNCTION_TABLE_iiiiiiiii[$427 & 63]($428,$431,$434,$437,$440,$441,$442,$444)|0);
   $446 = $445&1;
   $bResult = $446;
  }
 } else {
  $447 = $EndOffset;
  $448 = $447;
  $449 = HEAP32[$448>>2]|0;
  $450 = (($447) + 4)|0;
  $451 = $450;
  $452 = HEAP32[$451>>2]|0;
  $453 = $1;
  $454 = ((($453)) + 104|0);
  $455 = $454;
  $456 = $455;
  $457 = HEAP32[$456>>2]|0;
  $458 = (($455) + 4)|0;
  $459 = $458;
  $460 = HEAP32[$459>>2]|0;
  $461 = ($452>>>0)>($460>>>0);
  $462 = ($449>>>0)>($457>>>0);
  $463 = ($452|0)==($460|0);
  $464 = $463 & $462;
  $465 = $461 | $464;
  if ($465) {
   $466 = $1;
   $467 = ((($466)) + 104|0);
   $468 = $467;
   $469 = $468;
   $470 = HEAP32[$469>>2]|0;
   $471 = (($468) + 4)|0;
   $472 = $471;
   $473 = HEAP32[$472>>2]|0;
   $474 = $EndOffset;
   $475 = $474;
   HEAP32[$475>>2] = $470;
   $476 = (($474) + 4)|0;
   $477 = $476;
   HEAP32[$477>>2] = $473;
  }
  $478 = $1;
  $479 = ((($478)) + 24|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $1;
  $482 = $BlockOffset;
  $483 = $482;
  $484 = HEAP32[$483>>2]|0;
  $485 = (($482) + 4)|0;
  $486 = $485;
  $487 = HEAP32[$486>>2]|0;
  $488 = $EndOffset;
  $489 = $488;
  $490 = HEAP32[$489>>2]|0;
  $491 = (($488) + 4)|0;
  $492 = $491;
  $493 = HEAP32[$492>>2]|0;
  $494 = $BlockBuffer;
  $495 = $BytesNeeded;
  $496 = (FUNCTION_TABLE_iiiiiiiii[$480 & 63]($481,$484,$487,$490,$493,$494,$495,1)|0);
  $497 = $496&1;
  $bResult = $497;
 }
 $498 = $bResult;
 $499 = $498&1;
 if ($499) {
  $500 = $3;
  $501 = $TransferBuffer;
  $502 = $BlockBufferOffset;
  $503 = (($501) + ($502)|0);
  $504 = $4;
  _memcpy(($500|0),($503|0),($504|0))|0;
  $505 = $ByteOffset;
  $506 = $505;
  $507 = HEAP32[$506>>2]|0;
  $508 = (($505) + 4)|0;
  $509 = $508;
  $510 = HEAP32[$509>>2]|0;
  $511 = $4;
  $512 = (_i64Add(($507|0),($510|0),($511|0),0)|0);
  $513 = tempRet0;
  $514 = $1;
  $515 = ((($514)) + 112|0);
  $516 = $515;
  $517 = $516;
  HEAP32[$517>>2] = $512;
  $518 = (($516) + 4)|0;
  $519 = $518;
  HEAP32[$519>>2] = $513;
 } else {
  _SetLastError(1006);
 }
 $520 = $bCallbackCalled;
 $521 = $520&1;
 if ($521) {
  $522 = $1;
  $523 = ((($522)) + 128|0);
  $524 = HEAP32[$523>>2]|0;
  $525 = $1;
  $526 = ((($525)) + 136|0);
  $527 = HEAP32[$526>>2]|0;
  FUNCTION_TABLE_viiii[$524 & 127]($527,0,0,0);
 }
 $528 = $TransferBuffer;
 _free($528);
 $529 = $bResult;
 $530 = $529&1;
 $$expand_i1_val6 = $530&1;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $531 = $$pre_trunc&1;
 STACKTOP = sp;return ($531|0);
}
function __ZL19BlockStream_GetSizeP11TFileStreamPy($pStream,$pFileSize) {
 $pStream = $pStream|0;
 $pFileSize = $pFileSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pFileSize;
 $2 = $0;
 $3 = ((($2)) + 104|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 1;
}
function __ZL18BlockStream_GetPosP11TFileStreamPy($pStream,$pByteOffset) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pByteOffset;
 $2 = $0;
 $3 = ((($2)) + 112|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 1;
}
function __ZL18Block4Stream_CloseP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BaseArray = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $BaseArray = $3;
 $4 = $BaseArray;
 $5 = ($4|0)!=(0|0);
 L1: do {
  if ($5) {
   $i = 0;
   while(1) {
    $6 = $i;
    $7 = $0;
    $8 = ((($7)) + 140|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($6>>>0)<($9>>>0);
    if (!($10)) {
     break L1;
    }
    $11 = $0;
    $12 = ((($11)) + 64|0);
    $13 = $BaseArray;
    $14 = $i;
    $15 = (($13) + ($14<<5)|0);
    ;HEAP32[$12>>2]=HEAP32[$15>>2]|0;HEAP32[$12+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$15+12>>2]|0;HEAP32[$12+16>>2]=HEAP32[$15+16>>2]|0;HEAP32[$12+20>>2]=HEAP32[$15+20>>2]|0;HEAP32[$12+24>>2]=HEAP32[$15+24>>2]|0;HEAP32[$12+28>>2]=HEAP32[$15+28>>2]|0;
    $16 = $0;
    $17 = ((($16)) + 60|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $0;
    FUNCTION_TABLE_vi[$18 & 255]($19);
    $20 = $i;
    $21 = (($20) + 1)|0;
    $i = $21;
   }
  }
 } while(0);
 $22 = $0;
 $23 = ((($22)) + 132|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $29 = $0;
  $30 = ((($29)) + 132|0);
  HEAP32[$30>>2] = 0;
  STACKTOP = sp;return;
 }
 $26 = $0;
 $27 = ((($26)) + 132|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 $29 = $0;
 $30 = ((($29)) + 132|0);
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL22Block4Stream_BlockReadP12TBlockStreamyyPhjb($pStream,$0,$1,$2,$3,$BlockBuffer,$BytesNeeded,$bAvailable) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $BlockBuffer = $BlockBuffer|0;
 $BytesNeeded = $BytesNeeded|0;
 $bAvailable = $bAvailable|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $BaseArray = 0, $BlockIndex = 0, $ByteOffset = 0, $BytesToRead = 0, $StreamIndex = 0, $bResult = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 54|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $ByteOffset = sp;
 $5 = $pStream;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $2;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $3;
 $8 = $BlockBuffer;
 $9 = $BytesNeeded;
 $19 = $bAvailable&1;
 $10 = $19;
 $20 = $5;
 $21 = ((($20)) + 132|0);
 $22 = HEAP32[$21>>2]|0;
 $BaseArray = $22;
 $23 = $5;
 $24 = ((($23)) + 132|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((14884|0),(14637|0),2137,(14912|0));
  // unreachable;
 }
 $27 = $6;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = ((($33)) + 144|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) - 1)|0;
 $37 = $29 & $36;
 $38 = ($37|0)==(0);
 $39 = (0)==(0);
 $40 = $38 & $39;
 if (!($40)) {
  ___assert_fail((14935|0),(14637|0),2138,(14912|0));
  // unreachable;
 }
 $41 = $6;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = $7;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($46>>>0)<($52>>>0);
 $54 = ($43>>>0)<($49>>>0);
 $55 = ($46|0)==($52|0);
 $56 = $55 & $54;
 $57 = $53 | $56;
 if (!($57)) {
  ___assert_fail((14981|0),(14637|0),2139,(14912|0));
  // unreachable;
 }
 $58 = $10;
 $59 = $58&1;
 $60 = $59&1;
 $61 = ($60|0)==(1);
 if (!($61)) {
  ___assert_fail((15005|0),(14637|0),2140,(14912|0));
  // unreachable;
 }
 $62 = $10;
 $63 = $62&1;
 $64 = $63&1;
 $10 = $64;
 $65 = $7;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = $7;
 $72 = $71;
 HEAP32[$72>>2] = $67;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = $70;
 while(1) {
  $75 = $9;
  $76 = ($75|0)!=(0);
  if (!($76)) {
   label = 16;
   break;
  }
  $77 = $6;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $5;
  $84 = ((($83)) + 144|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (___udivdi3(($79|0),($82|0),($85|0),0)|0);
  $87 = tempRet0;
  $88 = (___udivdi3(($86|0),($87|0),8192,0)|0);
  $89 = tempRet0;
  $StreamIndex = $88;
  $90 = $6;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + 4)|0;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = $5;
  $97 = ((($96)) + 144|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (___udivdi3(($92|0),($95|0),($98|0),0)|0);
  $100 = tempRet0;
  $101 = (___uremdi3(($99|0),($100|0),8192,0)|0);
  $102 = tempRet0;
  $BlockIndex = $101;
  $103 = $StreamIndex;
  $104 = $5;
  $105 = ((($104)) + 140|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($103>>>0)>($106>>>0);
  if ($107) {
   label = 12;
   break;
  }
  $108 = $BlockIndex;
  $109 = (___muldi3(($108|0),0,16416,0)|0);
  $110 = tempRet0;
  $111 = $ByteOffset;
  $112 = $111;
  HEAP32[$112>>2] = $109;
  $113 = (($111) + 4)|0;
  $114 = $113;
  HEAP32[$114>>2] = $110;
  $115 = $9;
  $116 = ($115>>>0)<(16384);
  $117 = $9;
  $118 = $116 ? $117 : 16384;
  $BytesToRead = $118;
  $119 = $5;
  $120 = ((($119)) + 64|0);
  $121 = $StreamIndex;
  $122 = $BaseArray;
  $123 = (($122) + ($121<<5)|0);
  ;HEAP32[$120>>2]=HEAP32[$123>>2]|0;HEAP32[$120+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$120+8>>2]=HEAP32[$123+8>>2]|0;HEAP32[$120+12>>2]=HEAP32[$123+12>>2]|0;HEAP32[$120+16>>2]=HEAP32[$123+16>>2]|0;HEAP32[$120+20>>2]=HEAP32[$123+20>>2]|0;HEAP32[$120+24>>2]=HEAP32[$123+24>>2]|0;HEAP32[$120+28>>2]=HEAP32[$123+28>>2]|0;
  $124 = $5;
  $125 = ((($124)) + 40|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $5;
  $128 = $8;
  $129 = $BytesToRead;
  $130 = (FUNCTION_TABLE_iiiii[$126 & 127]($127,$ByteOffset,$128,$129)|0);
  $131 = $130&1;
  $bResult = $131;
  $132 = $StreamIndex;
  $133 = $BaseArray;
  $134 = (($133) + ($132<<5)|0);
  $135 = $5;
  $136 = ((($135)) + 64|0);
  ;HEAP32[$134>>2]=HEAP32[$136>>2]|0;HEAP32[$134+4>>2]=HEAP32[$136+4>>2]|0;HEAP32[$134+8>>2]=HEAP32[$136+8>>2]|0;HEAP32[$134+12>>2]=HEAP32[$136+12>>2]|0;HEAP32[$134+16>>2]=HEAP32[$136+16>>2]|0;HEAP32[$134+20>>2]=HEAP32[$136+20>>2]|0;HEAP32[$134+24>>2]=HEAP32[$136+24>>2]|0;HEAP32[$134+28>>2]=HEAP32[$136+28>>2]|0;
  $137 = $bResult;
  $138 = $137&1;
  $139 = $138&1;
  $140 = ($139|0)==(0);
  if ($140) {
   label = 14;
   break;
  }
  $141 = $BytesToRead;
  $142 = $6;
  $143 = $142;
  $144 = HEAP32[$143>>2]|0;
  $145 = (($142) + 4)|0;
  $146 = $145;
  $147 = HEAP32[$146>>2]|0;
  $148 = (_i64Add(($144|0),($147|0),($141|0),0)|0);
  $149 = tempRet0;
  $150 = $6;
  $151 = $150;
  HEAP32[$151>>2] = $148;
  $152 = (($150) + 4)|0;
  $153 = $152;
  HEAP32[$153>>2] = $149;
  $154 = $BytesToRead;
  $155 = $8;
  $156 = (($155) + ($154)|0);
  $8 = $156;
  $157 = $BytesToRead;
  $158 = $9;
  $159 = (($158) - ($157))|0;
  $9 = $159;
 }
 if ((label|0) == 12) {
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $160 = $$pre_trunc&1;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 14) {
  $$expand_i1_val2 = 0;
  HEAP8[$4>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $160 = $$pre_trunc&1;
  STACKTOP = sp;return ($160|0);
 }
 else if ((label|0) == 16) {
  $$expand_i1_val4 = 1;
  HEAP8[$4>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $160 = $$pre_trunc&1;
  STACKTOP = sp;return ($160|0);
 }
 return (0)|0;
}
function __ZL24EncrStream_DetectFileKeyP16TEncryptedStream($pStream) {
 $pStream = $pStream|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $ByteOffset = 0, $EncryptedHeader = 0;
 var $FileHeader = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $0 = sp + 144|0;
 $ByteOffset = sp;
 $EncryptedHeader = sp + 80|0;
 $FileHeader = sp + 16|0;
 $1 = $pStream;
 $2 = $ByteOffset;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_iiiii[$8 & 127]($9,$ByteOffset,$EncryptedHeader,64)|0);
 L1: do {
  if ($10) {
   $i = 0;
   while(1) {
    $11 = $i;
    $12 = (1656 + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)!=(0|0);
    if (!($14)) {
     break L1;
    }
    $15 = $1;
    $16 = ((($15)) + 160|0);
    $17 = $i;
    $18 = (1656 + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    __ZL21CreateKeyFromAuthCodePhPKc($16,$19);
    dest=$FileHeader; src=$EncryptedHeader; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $20 = $1;
    $21 = ((($20)) + 160|0);
    $22 = $ByteOffset;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    __ZL16DecryptFileChunkPjPhyj($FileHeader,$21,$24,$27,64);
    $28 = HEAP8[$FileHeader>>0]|0;
    $29 = $28&255;
    $30 = ($29|0)==(77);
    if ($30) {
     $31 = ((($FileHeader)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = ($33|0)==(80);
     if ($34) {
      $35 = ((($FileHeader)) + 2|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36&255;
      $38 = ($37|0)==(81);
      if ($38) {
       break;
      }
     }
    }
    $72 = $i;
    $73 = (($72) + 1)|0;
    $i = $73;
   }
   $39 = $1;
   $40 = ((($39)) + 64|0);
   $41 = $40;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = ((($47)) + 104|0);
   $49 = $48;
   $50 = $49;
   HEAP32[$50>>2] = $43;
   $51 = (($49) + 4)|0;
   $52 = $51;
   HEAP32[$52>>2] = $46;
   $53 = $1;
   $54 = ((($53)) + 144|0);
   HEAP32[$54>>2] = 64;
   $55 = $1;
   $56 = ((($55)) + 64|0);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (_i64Add(($59|0),($62|0),64,0)|0);
   $64 = tempRet0;
   $65 = (_i64Subtract(($63|0),($64|0),1,0)|0);
   $66 = tempRet0;
   $67 = (($65>>>0) / 64)&-1;
   $68 = $1;
   $69 = ((($68)) + 148|0);
   HEAP32[$69>>2] = $67;
   $70 = $1;
   $71 = ((($70)) + 152|0);
   HEAP32[$71>>2] = 1;
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $74 = $$pre_trunc&1;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $74 = $$pre_trunc&1;
 STACKTOP = sp;return ($74|0);
}
function __ZL20EncrStream_BlockReadP16TEncryptedStreamyyPhjb($pStream,$0,$1,$2,$3,$BlockBuffer,$BytesNeeded,$bAvailable) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $BlockBuffer = $BlockBuffer|0;
 $BytesNeeded = $BytesNeeded|0;
 $bAvailable = $bAvailable|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $dwBytesToRead = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 33|0;
 $6 = sp + 8|0;
 $7 = sp;
 $5 = $pStream;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $2;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $3;
 $8 = $BlockBuffer;
 $9 = $BytesNeeded;
 $19 = $bAvailable&1;
 $10 = $19;
 $20 = $6;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = ((($26)) + 144|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) - 1)|0;
 $30 = $22 & $29;
 $31 = ($30|0)==(0);
 $32 = (0)==(0);
 $33 = $31 & $32;
 if (!($33)) {
  ___assert_fail((14935|0),(14637|0),2056,(15199|0));
  // unreachable;
 }
 $34 = $6;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $7;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($39>>>0)<($45>>>0);
 $47 = ($36>>>0)<($42>>>0);
 $48 = ($39|0)==($45|0);
 $49 = $48 & $47;
 $50 = $46 | $49;
 if (!($50)) {
  ___assert_fail((14981|0),(14637|0),2057,(15199|0));
  // unreachable;
 }
 $51 = $10;
 $52 = $51&1;
 $53 = $52&1;
 $54 = ($53|0)!=(0);
 if (!($54)) {
  ___assert_fail((15220|0),(14637|0),2058,(15199|0));
  // unreachable;
 }
 $55 = $9;
 $9 = $55;
 $56 = $10;
 $57 = $56&1;
 $58 = $57&1;
 $10 = $58;
 $59 = $7;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $6;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (_i64Subtract(($61|0),($64|0),($67|0),($70|0))|0);
 $72 = tempRet0;
 $dwBytesToRead = $71;
 $73 = $5;
 $74 = ((($73)) + 40|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $5;
 $77 = $8;
 $78 = $dwBytesToRead;
 $79 = (FUNCTION_TABLE_iiiii[$75 & 127]($76,$6,$77,$78)|0);
 if ($79) {
  $80 = $dwBytesToRead;
  $81 = (($80) + 64)|0;
  $82 = (($81) - 1)|0;
  $83 = $82 & -64;
  $dwBytesToRead = $83;
  $84 = $8;
  $85 = $5;
  $86 = ((($85)) + 160|0);
  $87 = $6;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = $dwBytesToRead;
  __ZL16DecryptFileChunkPjPhyj($84,$86,$89,$92,$93);
  $$expand_i1_val2 = 1;
  HEAP8[$4>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $94 = $$pre_trunc&1;
  STACKTOP = sp;return ($94|0);
 } else {
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $94 = $$pre_trunc&1;
  STACKTOP = sp;return ($94|0);
 }
 return (0)|0;
}
function __ZL16DecryptFileChunkPjPhyj($ChunkData,$pbKey,$0,$1,$dwLength) {
 $ChunkData = $ChunkData|0;
 $pbKey = $pbKey|0;
 $0 = $0|0;
 $1 = $1|0;
 $dwLength = $dwLength|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ChunkOffset = 0, $KeyMirror = 0, $KeyShuffled = 0, $RoundCount = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 8|0;
 $ChunkOffset = sp;
 $KeyShuffled = sp + 88|0;
 $KeyMirror = sp + 24|0;
 $2 = $ChunkData;
 $3 = $pbKey;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $dwLength;
 $RoundCount = 20;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (___udivdi3(($12|0),($15|0),64,0)|0);
 $17 = tempRet0;
 $18 = $ChunkOffset;
 $19 = $18;
 HEAP32[$19>>2] = $16;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 $22 = $3;
 dest=$KeyMirror; src=$22; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $23 = $ChunkOffset;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($KeyMirror)) + 20|0);
 HEAP32[$29>>2] = $28;
 $30 = $ChunkOffset;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($KeyMirror)) + 32|0);
 HEAP32[$36>>2] = $32;
 while(1) {
  $37 = $5;
  $38 = ($37>>>0)>=(64);
  if (!($38)) {
   break;
  }
  $39 = HEAP32[$KeyMirror>>2]|0;
  $40 = ((($KeyShuffled)) + 56|0);
  HEAP32[$40>>2] = $39;
  $41 = ((($KeyMirror)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($KeyShuffled)) + 48|0);
  HEAP32[$43>>2] = $42;
  $44 = ((($KeyMirror)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($KeyShuffled)) + 20|0);
  HEAP32[$46>>2] = $45;
  $47 = ((($KeyMirror)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($KeyShuffled)) + 60|0);
  HEAP32[$49>>2] = $48;
  $50 = ((($KeyMirror)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($KeyShuffled)) + 40|0);
  HEAP32[$52>>2] = $51;
  $53 = ((($KeyMirror)) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($KeyShuffled)) + 28|0);
  HEAP32[$55>>2] = $54;
  $56 = ((($KeyMirror)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($KeyShuffled)) + 44|0);
  HEAP32[$58>>2] = $57;
  $59 = ((($KeyMirror)) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($KeyShuffled)) + 36|0);
  HEAP32[$61>>2] = $60;
  $62 = ((($KeyMirror)) + 32|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($KeyShuffled)) + 12|0);
  HEAP32[$64>>2] = $63;
  $65 = ((($KeyMirror)) + 36|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($KeyShuffled)) + 24|0);
  HEAP32[$67>>2] = $66;
  $68 = ((($KeyMirror)) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($KeyShuffled)) + 32|0);
  HEAP32[$70>>2] = $69;
  $71 = ((($KeyMirror)) + 44|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($KeyShuffled)) + 52|0);
  HEAP32[$73>>2] = $72;
  $74 = ((($KeyMirror)) + 48|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($KeyShuffled)) + 8|0);
  HEAP32[$76>>2] = $75;
  $77 = ((($KeyMirror)) + 52|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($KeyShuffled)) + 16|0);
  HEAP32[$79>>2] = $78;
  $80 = ((($KeyMirror)) + 56|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($KeyShuffled)) + 4|0);
  HEAP32[$82>>2] = $81;
  $83 = ((($KeyMirror)) + 60|0);
  $84 = HEAP32[$83>>2]|0;
  HEAP32[$KeyShuffled>>2] = $84;
  $i = 0;
  while(1) {
   $85 = $i;
   $86 = $RoundCount;
   $87 = ($85>>>0)<($86>>>0);
   if (!($87)) {
    break;
   }
   $88 = ((($KeyShuffled)) + 40|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($KeyShuffled)) + 56|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($KeyShuffled)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + ($93))|0;
   $95 = (__ZL5Rol32jj($94,7)|0);
   $96 = $89 ^ $95;
   $97 = ((($KeyShuffled)) + 40|0);
   HEAP32[$97>>2] = $96;
   $98 = ((($KeyShuffled)) + 12|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($KeyShuffled)) + 40|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($KeyShuffled)) + 56|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + ($103))|0;
   $105 = (__ZL5Rol32jj($104,9)|0);
   $106 = $99 ^ $105;
   $107 = ((($KeyShuffled)) + 12|0);
   HEAP32[$107>>2] = $106;
   $108 = ((($KeyShuffled)) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($KeyShuffled)) + 12|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ((($KeyShuffled)) + 40|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + ($113))|0;
   $115 = (__ZL5Rol32jj($114,13)|0);
   $116 = $109 ^ $115;
   $117 = ((($KeyShuffled)) + 8|0);
   HEAP32[$117>>2] = $116;
   $118 = ((($KeyShuffled)) + 56|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($KeyShuffled)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($KeyShuffled)) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + ($123))|0;
   $125 = (__ZL5Rol32jj($124,18)|0);
   $126 = $119 ^ $125;
   $127 = ((($KeyShuffled)) + 56|0);
   HEAP32[$127>>2] = $126;
   $128 = ((($KeyShuffled)) + 28|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ((($KeyShuffled)) + 48|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ((($KeyShuffled)) + 16|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($131) + ($133))|0;
   $135 = (__ZL5Rol32jj($134,7)|0);
   $136 = $129 ^ $135;
   $137 = ((($KeyShuffled)) + 28|0);
   HEAP32[$137>>2] = $136;
   $138 = ((($KeyShuffled)) + 24|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($KeyShuffled)) + 28|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($KeyShuffled)) + 48|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + ($143))|0;
   $145 = (__ZL5Rol32jj($144,9)|0);
   $146 = $139 ^ $145;
   $147 = ((($KeyShuffled)) + 24|0);
   HEAP32[$147>>2] = $146;
   $148 = ((($KeyShuffled)) + 16|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ((($KeyShuffled)) + 24|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((($KeyShuffled)) + 28|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + ($153))|0;
   $155 = (__ZL5Rol32jj($154,13)|0);
   $156 = $149 ^ $155;
   $157 = ((($KeyShuffled)) + 16|0);
   HEAP32[$157>>2] = $156;
   $158 = ((($KeyShuffled)) + 48|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ((($KeyShuffled)) + 16|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((($KeyShuffled)) + 24|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($161) + ($163))|0;
   $165 = (__ZL5Rol32jj($164,18)|0);
   $166 = $159 ^ $165;
   $167 = ((($KeyShuffled)) + 48|0);
   HEAP32[$167>>2] = $166;
   $168 = ((($KeyShuffled)) + 44|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($KeyShuffled)) + 20|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ((($KeyShuffled)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($171) + ($173))|0;
   $175 = (__ZL5Rol32jj($174,7)|0);
   $176 = $169 ^ $175;
   $177 = ((($KeyShuffled)) + 44|0);
   HEAP32[$177>>2] = $176;
   $178 = ((($KeyShuffled)) + 32|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ((($KeyShuffled)) + 44|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ((($KeyShuffled)) + 20|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($181) + ($183))|0;
   $185 = (__ZL5Rol32jj($184,9)|0);
   $186 = $179 ^ $185;
   $187 = ((($KeyShuffled)) + 32|0);
   HEAP32[$187>>2] = $186;
   $188 = ((($KeyShuffled)) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($KeyShuffled)) + 32|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ((($KeyShuffled)) + 44|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($191) + ($193))|0;
   $195 = (__ZL5Rol32jj($194,13)|0);
   $196 = $189 ^ $195;
   $197 = ((($KeyShuffled)) + 4|0);
   HEAP32[$197>>2] = $196;
   $198 = ((($KeyShuffled)) + 20|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ((($KeyShuffled)) + 4|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = ((($KeyShuffled)) + 32|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($201) + ($203))|0;
   $205 = (__ZL5Rol32jj($204,18)|0);
   $206 = $199 ^ $205;
   $207 = ((($KeyShuffled)) + 20|0);
   HEAP32[$207>>2] = $206;
   $208 = ((($KeyShuffled)) + 36|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ((($KeyShuffled)) + 60|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = HEAP32[$KeyShuffled>>2]|0;
   $213 = (($211) + ($212))|0;
   $214 = (__ZL5Rol32jj($213,7)|0);
   $215 = $209 ^ $214;
   $216 = ((($KeyShuffled)) + 36|0);
   HEAP32[$216>>2] = $215;
   $217 = ((($KeyShuffled)) + 52|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($KeyShuffled)) + 36|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((($KeyShuffled)) + 60|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($220) + ($222))|0;
   $224 = (__ZL5Rol32jj($223,9)|0);
   $225 = $218 ^ $224;
   $226 = ((($KeyShuffled)) + 52|0);
   HEAP32[$226>>2] = $225;
   $227 = HEAP32[$KeyShuffled>>2]|0;
   $228 = ((($KeyShuffled)) + 52|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = ((($KeyShuffled)) + 36|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($229) + ($231))|0;
   $233 = (__ZL5Rol32jj($232,13)|0);
   $234 = $227 ^ $233;
   HEAP32[$KeyShuffled>>2] = $234;
   $235 = ((($KeyShuffled)) + 60|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = HEAP32[$KeyShuffled>>2]|0;
   $238 = ((($KeyShuffled)) + 52|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($237) + ($239))|0;
   $241 = (__ZL5Rol32jj($240,18)|0);
   $242 = $236 ^ $241;
   $243 = ((($KeyShuffled)) + 60|0);
   HEAP32[$243>>2] = $242;
   $244 = ((($KeyShuffled)) + 16|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ((($KeyShuffled)) + 56|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ((($KeyShuffled)) + 36|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($247) + ($249))|0;
   $251 = (__ZL5Rol32jj($250,7)|0);
   $252 = $245 ^ $251;
   $253 = ((($KeyShuffled)) + 16|0);
   HEAP32[$253>>2] = $252;
   $254 = ((($KeyShuffled)) + 32|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($KeyShuffled)) + 16|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = ((($KeyShuffled)) + 56|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($257) + ($259))|0;
   $261 = (__ZL5Rol32jj($260,9)|0);
   $262 = $255 ^ $261;
   $263 = ((($KeyShuffled)) + 32|0);
   HEAP32[$263>>2] = $262;
   $264 = ((($KeyShuffled)) + 36|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ((($KeyShuffled)) + 32|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = ((($KeyShuffled)) + 16|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (($267) + ($269))|0;
   $271 = (__ZL5Rol32jj($270,13)|0);
   $272 = $265 ^ $271;
   $273 = ((($KeyShuffled)) + 36|0);
   HEAP32[$273>>2] = $272;
   $274 = ((($KeyShuffled)) + 56|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ((($KeyShuffled)) + 36|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = ((($KeyShuffled)) + 32|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($277) + ($279))|0;
   $281 = (__ZL5Rol32jj($280,18)|0);
   $282 = $275 ^ $281;
   $283 = ((($KeyShuffled)) + 56|0);
   HEAP32[$283>>2] = $282;
   $284 = ((($KeyShuffled)) + 4|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ((($KeyShuffled)) + 48|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ((($KeyShuffled)) + 40|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (($287) + ($289))|0;
   $291 = (__ZL5Rol32jj($290,7)|0);
   $292 = $285 ^ $291;
   $293 = ((($KeyShuffled)) + 4|0);
   HEAP32[$293>>2] = $292;
   $294 = ((($KeyShuffled)) + 52|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = ((($KeyShuffled)) + 4|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = ((($KeyShuffled)) + 48|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (($297) + ($299))|0;
   $301 = (__ZL5Rol32jj($300,9)|0);
   $302 = $295 ^ $301;
   $303 = ((($KeyShuffled)) + 52|0);
   HEAP32[$303>>2] = $302;
   $304 = ((($KeyShuffled)) + 40|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($KeyShuffled)) + 52|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = ((($KeyShuffled)) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (($307) + ($309))|0;
   $311 = (__ZL5Rol32jj($310,13)|0);
   $312 = $305 ^ $311;
   $313 = ((($KeyShuffled)) + 40|0);
   HEAP32[$313>>2] = $312;
   $314 = ((($KeyShuffled)) + 48|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = ((($KeyShuffled)) + 40|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = ((($KeyShuffled)) + 52|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($317) + ($319))|0;
   $321 = (__ZL5Rol32jj($320,18)|0);
   $322 = $315 ^ $321;
   $323 = ((($KeyShuffled)) + 48|0);
   HEAP32[$323>>2] = $322;
   $324 = HEAP32[$KeyShuffled>>2]|0;
   $325 = ((($KeyShuffled)) + 20|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ((($KeyShuffled)) + 28|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = (($326) + ($328))|0;
   $330 = (__ZL5Rol32jj($329,7)|0);
   $331 = $324 ^ $330;
   HEAP32[$KeyShuffled>>2] = $331;
   $332 = ((($KeyShuffled)) + 12|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = HEAP32[$KeyShuffled>>2]|0;
   $335 = ((($KeyShuffled)) + 20|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = (($334) + ($336))|0;
   $338 = (__ZL5Rol32jj($337,9)|0);
   $339 = $333 ^ $338;
   $340 = ((($KeyShuffled)) + 12|0);
   HEAP32[$340>>2] = $339;
   $341 = ((($KeyShuffled)) + 28|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = ((($KeyShuffled)) + 12|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = HEAP32[$KeyShuffled>>2]|0;
   $346 = (($344) + ($345))|0;
   $347 = (__ZL5Rol32jj($346,13)|0);
   $348 = $342 ^ $347;
   $349 = ((($KeyShuffled)) + 28|0);
   HEAP32[$349>>2] = $348;
   $350 = ((($KeyShuffled)) + 20|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ((($KeyShuffled)) + 28|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = ((($KeyShuffled)) + 12|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = (($353) + ($355))|0;
   $357 = (__ZL5Rol32jj($356,18)|0);
   $358 = $351 ^ $357;
   $359 = ((($KeyShuffled)) + 20|0);
   HEAP32[$359>>2] = $358;
   $360 = ((($KeyShuffled)) + 8|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = ((($KeyShuffled)) + 60|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = ((($KeyShuffled)) + 44|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = (($363) + ($365))|0;
   $367 = (__ZL5Rol32jj($366,7)|0);
   $368 = $361 ^ $367;
   $369 = ((($KeyShuffled)) + 8|0);
   HEAP32[$369>>2] = $368;
   $370 = ((($KeyShuffled)) + 24|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = ((($KeyShuffled)) + 8|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = ((($KeyShuffled)) + 60|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (($373) + ($375))|0;
   $377 = (__ZL5Rol32jj($376,9)|0);
   $378 = $371 ^ $377;
   $379 = ((($KeyShuffled)) + 24|0);
   HEAP32[$379>>2] = $378;
   $380 = ((($KeyShuffled)) + 44|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = ((($KeyShuffled)) + 24|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = ((($KeyShuffled)) + 8|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = (($383) + ($385))|0;
   $387 = (__ZL5Rol32jj($386,13)|0);
   $388 = $381 ^ $387;
   $389 = ((($KeyShuffled)) + 44|0);
   HEAP32[$389>>2] = $388;
   $390 = ((($KeyShuffled)) + 60|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ((($KeyShuffled)) + 44|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = ((($KeyShuffled)) + 24|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = (($393) + ($395))|0;
   $397 = (__ZL5Rol32jj($396,18)|0);
   $398 = $391 ^ $397;
   $399 = ((($KeyShuffled)) + 60|0);
   HEAP32[$399>>2] = $398;
   $400 = $i;
   $401 = (($400) + 2)|0;
   $i = $401;
  }
  $402 = $2;
  $403 = HEAP32[$402>>2]|0;
  $404 = ((($KeyShuffled)) + 56|0);
  $405 = HEAP32[$404>>2]|0;
  $406 = HEAP32[$KeyMirror>>2]|0;
  $407 = (($405) + ($406))|0;
  $408 = $403 ^ $407;
  $409 = $2;
  HEAP32[$409>>2] = $408;
  $410 = $2;
  $411 = ((($410)) + 4|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = ((($KeyShuffled)) + 16|0);
  $414 = HEAP32[$413>>2]|0;
  $415 = ((($KeyMirror)) + 52|0);
  $416 = HEAP32[$415>>2]|0;
  $417 = (($414) + ($416))|0;
  $418 = $412 ^ $417;
  $419 = $2;
  $420 = ((($419)) + 4|0);
  HEAP32[$420>>2] = $418;
  $421 = $2;
  $422 = ((($421)) + 8|0);
  $423 = HEAP32[$422>>2]|0;
  $424 = ((($KeyShuffled)) + 32|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = ((($KeyMirror)) + 40|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = (($425) + ($427))|0;
  $429 = $423 ^ $428;
  $430 = $2;
  $431 = ((($430)) + 8|0);
  HEAP32[$431>>2] = $429;
  $432 = $2;
  $433 = ((($432)) + 12|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = ((($KeyShuffled)) + 36|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = ((($KeyMirror)) + 28|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = (($436) + ($438))|0;
  $440 = $434 ^ $439;
  $441 = $2;
  $442 = ((($441)) + 12|0);
  HEAP32[$442>>2] = $440;
  $443 = $2;
  $444 = ((($443)) + 16|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = ((($KeyShuffled)) + 40|0);
  $447 = HEAP32[$446>>2]|0;
  $448 = ((($KeyMirror)) + 16|0);
  $449 = HEAP32[$448>>2]|0;
  $450 = (($447) + ($449))|0;
  $451 = $445 ^ $450;
  $452 = $2;
  $453 = ((($452)) + 16|0);
  HEAP32[$453>>2] = $451;
  $454 = $2;
  $455 = ((($454)) + 20|0);
  $456 = HEAP32[$455>>2]|0;
  $457 = ((($KeyShuffled)) + 48|0);
  $458 = HEAP32[$457>>2]|0;
  $459 = ((($KeyMirror)) + 4|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = (($458) + ($460))|0;
  $462 = $456 ^ $461;
  $463 = $2;
  $464 = ((($463)) + 20|0);
  HEAP32[$464>>2] = $462;
  $465 = $2;
  $466 = ((($465)) + 24|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = ((($KeyShuffled)) + 4|0);
  $469 = HEAP32[$468>>2]|0;
  $470 = ((($KeyMirror)) + 56|0);
  $471 = HEAP32[$470>>2]|0;
  $472 = (($469) + ($471))|0;
  $473 = $467 ^ $472;
  $474 = $2;
  $475 = ((($474)) + 24|0);
  HEAP32[$475>>2] = $473;
  $476 = $2;
  $477 = ((($476)) + 28|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = ((($KeyShuffled)) + 52|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = ((($KeyMirror)) + 44|0);
  $482 = HEAP32[$481>>2]|0;
  $483 = (($480) + ($482))|0;
  $484 = $478 ^ $483;
  $485 = $2;
  $486 = ((($485)) + 28|0);
  HEAP32[$486>>2] = $484;
  $487 = $2;
  $488 = ((($487)) + 32|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = ((($KeyShuffled)) + 12|0);
  $491 = HEAP32[$490>>2]|0;
  $492 = ((($KeyMirror)) + 32|0);
  $493 = HEAP32[$492>>2]|0;
  $494 = (($491) + ($493))|0;
  $495 = $489 ^ $494;
  $496 = $2;
  $497 = ((($496)) + 32|0);
  HEAP32[$497>>2] = $495;
  $498 = $2;
  $499 = ((($498)) + 36|0);
  $500 = HEAP32[$499>>2]|0;
  $501 = ((($KeyShuffled)) + 28|0);
  $502 = HEAP32[$501>>2]|0;
  $503 = ((($KeyMirror)) + 20|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = (($502) + ($504))|0;
  $506 = $500 ^ $505;
  $507 = $2;
  $508 = ((($507)) + 36|0);
  HEAP32[$508>>2] = $506;
  $509 = $2;
  $510 = ((($509)) + 40|0);
  $511 = HEAP32[$510>>2]|0;
  $512 = ((($KeyShuffled)) + 20|0);
  $513 = HEAP32[$512>>2]|0;
  $514 = ((($KeyMirror)) + 8|0);
  $515 = HEAP32[$514>>2]|0;
  $516 = (($513) + ($515))|0;
  $517 = $511 ^ $516;
  $518 = $2;
  $519 = ((($518)) + 40|0);
  HEAP32[$519>>2] = $517;
  $520 = $2;
  $521 = ((($520)) + 44|0);
  $522 = HEAP32[$521>>2]|0;
  $523 = HEAP32[$KeyShuffled>>2]|0;
  $524 = ((($KeyMirror)) + 60|0);
  $525 = HEAP32[$524>>2]|0;
  $526 = (($523) + ($525))|0;
  $527 = $522 ^ $526;
  $528 = $2;
  $529 = ((($528)) + 44|0);
  HEAP32[$529>>2] = $527;
  $530 = $2;
  $531 = ((($530)) + 48|0);
  $532 = HEAP32[$531>>2]|0;
  $533 = ((($KeyShuffled)) + 8|0);
  $534 = HEAP32[$533>>2]|0;
  $535 = ((($KeyMirror)) + 48|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = (($534) + ($536))|0;
  $538 = $532 ^ $537;
  $539 = $2;
  $540 = ((($539)) + 48|0);
  HEAP32[$540>>2] = $538;
  $541 = $2;
  $542 = ((($541)) + 52|0);
  $543 = HEAP32[$542>>2]|0;
  $544 = ((($KeyShuffled)) + 24|0);
  $545 = HEAP32[$544>>2]|0;
  $546 = ((($KeyMirror)) + 36|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = (($545) + ($547))|0;
  $549 = $543 ^ $548;
  $550 = $2;
  $551 = ((($550)) + 52|0);
  HEAP32[$551>>2] = $549;
  $552 = $2;
  $553 = ((($552)) + 56|0);
  $554 = HEAP32[$553>>2]|0;
  $555 = ((($KeyShuffled)) + 44|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = ((($KeyMirror)) + 24|0);
  $558 = HEAP32[$557>>2]|0;
  $559 = (($556) + ($558))|0;
  $560 = $554 ^ $559;
  $561 = $2;
  $562 = ((($561)) + 56|0);
  HEAP32[$562>>2] = $560;
  $563 = $2;
  $564 = ((($563)) + 60|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = ((($KeyShuffled)) + 60|0);
  $567 = HEAP32[$566>>2]|0;
  $568 = ((($KeyMirror)) + 12|0);
  $569 = HEAP32[$568>>2]|0;
  $570 = (($567) + ($569))|0;
  $571 = $565 ^ $570;
  $572 = $2;
  $573 = ((($572)) + 60|0);
  HEAP32[$573>>2] = $571;
  $574 = ((($KeyMirror)) + 32|0);
  $575 = HEAP32[$574>>2]|0;
  $576 = (($575) + 1)|0;
  HEAP32[$574>>2] = $576;
  $577 = ((($KeyMirror)) + 32|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = ($578|0)==(0);
  if ($579) {
   $580 = ((($KeyMirror)) + 20|0);
   $581 = HEAP32[$580>>2]|0;
   $582 = (($581) + 1)|0;
   HEAP32[$580>>2] = $582;
  }
  $583 = $2;
  $584 = ((($583)) + 64|0);
  $2 = $584;
  $585 = $5;
  $586 = (($585) - 64)|0;
  $5 = $586;
 }
 STACKTOP = sp;return;
}
function __ZL5Rol32jj($dwValue,$dwRolCount) {
 $dwValue = $dwValue|0;
 $dwRolCount = $dwRolCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwShiftRight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $dwValue;
 $1 = $dwRolCount;
 $2 = $1;
 $3 = (32 - ($2))|0;
 $dwShiftRight = $3;
 $4 = $0;
 $5 = $1;
 $6 = $4 << $5;
 $7 = $0;
 $8 = $dwShiftRight;
 $9 = $7 >>> $8;
 $10 = $6 | $9;
 STACKTOP = sp;return ($10|0);
}
function __ZL21CreateKeyFromAuthCodePhPKc($pbKeyBuffer,$szAuthCode) {
 $pbKeyBuffer = $pbKeyBuffer|0;
 $szAuthCode = $szAuthCode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AuthCode32 = 0, $KeyPosition = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pbKeyBuffer;
 $1 = $szAuthCode;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $KeyPosition = $3;
 $4 = $1;
 $AuthCode32 = $4;
 $5 = $0;
 $6 = HEAP32[442]|0;
 dest=$5; src=$6; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = $AuthCode32;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $KeyPosition;
 HEAP32[$10>>2] = $9;
 $11 = $AuthCode32;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $KeyPosition;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $AuthCode32;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $KeyPosition;
 $20 = ((($19)) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $AuthCode32;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $KeyPosition;
 $25 = ((($24)) + 20|0);
 HEAP32[$25>>2] = $23;
 $26 = $AuthCode32;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $KeyPosition;
 $30 = ((($29)) + 24|0);
 HEAP32[$30>>2] = $28;
 $31 = $AuthCode32;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $KeyPosition;
 $35 = ((($34)) + 32|0);
 HEAP32[$35>>2] = $33;
 $36 = $AuthCode32;
 $37 = HEAP32[$36>>2]|0;
 $38 = $KeyPosition;
 $39 = ((($38)) + 36|0);
 HEAP32[$39>>2] = $37;
 $40 = $AuthCode32;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $KeyPosition;
 $44 = ((($43)) + 44|0);
 HEAP32[$44>>2] = $42;
 STACKTOP = sp;return;
}
function __ZL23PartStream_CreateMirrorP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FileBitmap = 0, $MasterSize = 0, $MirrorSize = 0, $RemainingSize = 0, $bNeedCreateMirrorStream = 0, $bNeedResizeMirrorStream = 0, $dwBitmapSize = 0, $dwBlockCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 42|0;
 $RemainingSize = sp + 16|0;
 $MasterSize = sp + 8|0;
 $MirrorSize = sp;
 $1 = $pStream;
 $2 = $MasterSize;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = $MirrorSize;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $FileBitmap = 0;
 $bNeedCreateMirrorStream = 1;
 $bNeedResizeMirrorStream = 1;
 $10 = $1;
 $11 = ((($10)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = $1;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = $1;
   $19 = ((($18)) + 96|0);
   $20 = HEAP32[$19>>2]|0;
   (__Z18FileStream_GetSizeP11TFileStreamPy($20,$MasterSize)|0);
   $21 = $MasterSize;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($21) + 4)|0;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (_i64Add(($23|0),($26|0),16384,0)|0);
   $28 = tempRet0;
   $29 = (_i64Subtract(($27|0),($28|0),1,0)|0);
   $30 = tempRet0;
   $31 = (___udivdi3(($29|0),($30|0),16384,0)|0);
   $32 = tempRet0;
   $dwBlockCount = $31;
   $33 = $dwBlockCount;
   $34 = ($33*20)|0;
   $dwBitmapSize = $34;
   $35 = $1;
   $36 = ((($35)) + 120|0);
   HEAP32[$36>>2] = 10958;
   $37 = $MasterSize;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = ((($43)) + 104|0);
   $45 = $44;
   $46 = $45;
   HEAP32[$46>>2] = $39;
   $47 = (($45) + 4)|0;
   $48 = $47;
   HEAP32[$48>>2] = $42;
   $49 = $1;
   $50 = ((($49)) + 112|0);
   $51 = $50;
   $52 = $51;
   HEAP32[$52>>2] = 0;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = 0;
   $55 = $1;
   $56 = ((($55)) + 36|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $1;
   $59 = $1;
   $60 = ((($59)) + 100|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (FUNCTION_TABLE_iiii[$57 & 127]($58,$61,0)|0);
   if ($62) {
    $63 = $1;
    $64 = ((($63)) + 52|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $1;
    (FUNCTION_TABLE_iii[$65 & 127]($66,$MirrorSize)|0);
    $67 = $MirrorSize;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($67) + 4)|0;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = $dwBitmapSize;
    $74 = (52 + ($73))|0;
    $75 = ($72>>>0)>(0);
    $76 = ($69>>>0)>=($74>>>0);
    $77 = ($72|0)==(0);
    $78 = $77 & $76;
    $79 = $75 | $78;
    do {
     if ($79) {
      $80 = $MirrorSize;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($80) + 4)|0;
      $84 = $83;
      $85 = HEAP32[$84>>2]|0;
      $86 = (_i64Subtract(($82|0),($85|0),52,0)|0);
      $87 = tempRet0;
      $88 = $dwBitmapSize;
      $89 = (_i64Subtract(($86|0),($87|0),($88|0),0)|0);
      $90 = tempRet0;
      $91 = $RemainingSize;
      $92 = $91;
      HEAP32[$92>>2] = $89;
      $93 = (($91) + 4)|0;
      $94 = $93;
      HEAP32[$94>>2] = $90;
      $95 = $RemainingSize;
      $96 = $95;
      $97 = HEAP32[$96>>2]|0;
      $98 = (($95) + 4)|0;
      $99 = $98;
      $100 = HEAP32[$99>>2]|0;
      $101 = $97 & 16383;
      $102 = ($101|0)==(0);
      $103 = (0)==(0);
      $104 = $102 & $103;
      if (!($104)) {
       $105 = $RemainingSize;
       $106 = $105;
       $107 = HEAP32[$106>>2]|0;
       $108 = (($105) + 4)|0;
       $109 = $108;
       $110 = HEAP32[$109>>2]|0;
       $111 = $MasterSize;
       $112 = $111;
       $113 = HEAP32[$112>>2]|0;
       $114 = (($111) + 4)|0;
       $115 = $114;
       $116 = HEAP32[$115>>2]|0;
       $117 = ($107|0)==($113|0);
       $118 = ($110|0)==($116|0);
       $119 = $117 & $118;
       if (!($119)) {
        break;
       }
      }
      $120 = $1;
      $121 = (__ZL21PartStream_LoadBitmapP12TBlockStream($120)|0);
      if ($121) {
       $$expand_i1_val2 = 1;
       HEAP8[$0>>0] = $$expand_i1_val2;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $160 = $$pre_trunc&1;
       STACKTOP = sp;return ($160|0);
      }
     }
    } while(0);
    $bNeedCreateMirrorStream = 0;
   }
   $122 = $bNeedCreateMirrorStream;
   $123 = $122&1;
   if ($123) {
    $124 = $1;
    $125 = ((($124)) + 32|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $1;
    $128 = (FUNCTION_TABLE_ii[$126 & 127]($127)|0);
    if (!($128)) {
     $$expand_i1_val4 = 0;
     HEAP8[$0>>0] = $$expand_i1_val4;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $160 = $$pre_trunc&1;
     STACKTOP = sp;return ($160|0);
    }
   }
   $129 = $bNeedResizeMirrorStream;
   $130 = $129&1;
   if ($130) {
    $131 = $1;
    $132 = ((($131)) + 48|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $1;
    $135 = $dwBitmapSize;
    $136 = (52 + ($135))|0;
    $137 = (FUNCTION_TABLE_iiii[$133 & 127]($134,$136,0)|0);
    if (!($137)) {
     $$expand_i1_val6 = 0;
     HEAP8[$0>>0] = $$expand_i1_val6;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $160 = $$pre_trunc&1;
     STACKTOP = sp;return ($160|0);
    }
   }
   $138 = $dwBitmapSize;
   $139 = $138;
   $140 = (_malloc($139)|0);
   $FileBitmap = $140;
   $141 = $FileBitmap;
   $142 = ($141|0)==(0|0);
   if ($142) {
    $$expand_i1_val8 = 0;
    HEAP8[$0>>0] = $$expand_i1_val8;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $160 = $$pre_trunc&1;
    STACKTOP = sp;return ($160|0);
   } else {
    $143 = $FileBitmap;
    $144 = $dwBitmapSize;
    _memset(($143|0),0,($144|0))|0;
    $145 = $FileBitmap;
    $146 = $1;
    $147 = ((($146)) + 132|0);
    HEAP32[$147>>2] = $145;
    $148 = $dwBitmapSize;
    $149 = $1;
    $150 = ((($149)) + 140|0);
    HEAP32[$150>>2] = $148;
    $151 = $1;
    $152 = ((($151)) + 144|0);
    HEAP32[$152>>2] = 16384;
    $153 = $dwBlockCount;
    $154 = $1;
    $155 = ((($154)) + 148|0);
    HEAP32[$155>>2] = $153;
    $156 = $1;
    $157 = ((($156)) + 152|0);
    HEAP32[$157>>2] = 0;
    $158 = $1;
    $159 = ((($158)) + 156|0);
    HEAP32[$159>>2] = 1;
    $$expand_i1_val10 = 1;
    HEAP8[$0>>0] = $$expand_i1_val10;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $160 = $$pre_trunc&1;
    STACKTOP = sp;return ($160|0);
   }
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $160 = $$pre_trunc&1;
 STACKTOP = sp;return ($160|0);
}
function __ZL21PartStream_LoadBitmapP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BitmapSize = 0, $BlockCount = 0, $ByteOffset = 0, $FileBitmap = 0, $PartHdr = 0, $StreamSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $0 = sp + 84|0;
 $PartHdr = sp + 24|0;
 $ByteOffset = sp + 8|0;
 $StreamSize = sp;
 $1 = $pStream;
 $2 = $ByteOffset;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = $StreamSize;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 64|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(0);
 $19 = ($14>>>0)>(52);
 $20 = ($17|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  $23 = $1;
  $24 = ((($23)) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = (FUNCTION_TABLE_iiiii[$25 & 127]($26,$ByteOffset,$PartHdr,52)|0);
  if ($27) {
   $28 = (__ZL12IsPartHeaderP17_PART_FILE_HEADER($PartHdr)|0);
   if ($28) {
    $29 = ((($PartHdr)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($PartHdr)) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $StreamSize;
    $34 = $33;
    HEAP32[$34>>2] = $32;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = $30;
    $37 = $ByteOffset;
    $38 = $37;
    HEAP32[$38>>2] = 52;
    $39 = (($37) + 4)|0;
    $40 = $39;
    HEAP32[$40>>2] = 0;
    $41 = $StreamSize;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($PartHdr)) + 48|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (_i64Add(($43|0),($46|0),($48|0),0)|0);
    $50 = tempRet0;
    $51 = (_i64Subtract(($49|0),($50|0),1,0)|0);
    $52 = tempRet0;
    $53 = ((($PartHdr)) + 48|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (___udivdi3(($51|0),($52|0),($54|0),0)|0);
    $56 = tempRet0;
    $BlockCount = $55;
    $57 = $BlockCount;
    $58 = ($57*20)|0;
    $BitmapSize = $58;
    $59 = $ByteOffset;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + 4)|0;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = $BitmapSize;
    $66 = (_i64Add(($61|0),($64|0),($65|0),0)|0);
    $67 = tempRet0;
    $68 = $1;
    $69 = ((($68)) + 64|0);
    $70 = $69;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = ($67>>>0)<($75>>>0);
    $77 = ($66>>>0)<($72>>>0);
    $78 = ($67|0)==($75|0);
    $79 = $78 & $77;
    $80 = $76 | $79;
    if ($80) {
     $81 = $BlockCount;
     $82 = ($81*20)|0;
     $83 = (_malloc($82)|0);
     $FileBitmap = $83;
     $84 = $FileBitmap;
     $85 = ($84|0)!=(0|0);
     if ($85) {
      $86 = $1;
      $87 = ((($86)) + 40|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $1;
      $90 = $FileBitmap;
      $91 = $BitmapSize;
      $92 = (FUNCTION_TABLE_iiiii[$88 & 127]($89,$ByteOffset,$90,$91)|0);
      if ($92) {
       $94 = ((($PartHdr)) + 4|0);
       $95 = (__ZL11StringToIntPKc($94)|0);
       $96 = $1;
       $97 = ((($96)) + 120|0);
       HEAP32[$97>>2] = $95;
       $98 = $StreamSize;
       $99 = $98;
       $100 = HEAP32[$99>>2]|0;
       $101 = (($98) + 4)|0;
       $102 = $101;
       $103 = HEAP32[$102>>2]|0;
       $104 = $1;
       $105 = ((($104)) + 104|0);
       $106 = $105;
       $107 = $106;
       HEAP32[$107>>2] = $100;
       $108 = (($106) + 4)|0;
       $109 = $108;
       HEAP32[$109>>2] = $103;
       $110 = $FileBitmap;
       $111 = $1;
       $112 = ((($111)) + 132|0);
       HEAP32[$112>>2] = $110;
       $113 = $BitmapSize;
       $114 = $1;
       $115 = ((($114)) + 140|0);
       HEAP32[$115>>2] = $113;
       $116 = ((($PartHdr)) + 48|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = $1;
       $119 = ((($118)) + 144|0);
       HEAP32[$119>>2] = $117;
       $120 = $BlockCount;
       $121 = $1;
       $122 = ((($121)) + 148|0);
       HEAP32[$122>>2] = $120;
       $123 = $1;
       $124 = (__ZL20PartStream_CheckFileP12TBlockStream($123)|0);
       $125 = $1;
       $126 = ((($125)) + 152|0);
       HEAP32[$126>>2] = $124;
       $$expand_i1_val2 = 1;
       HEAP8[$0>>0] = $$expand_i1_val2;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $127 = $$pre_trunc&1;
       STACKTOP = sp;return ($127|0);
      } else {
       $93 = $FileBitmap;
       _free($93);
       $$expand_i1_val = 0;
       HEAP8[$0>>0] = $$expand_i1_val;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $127 = $$pre_trunc&1;
       STACKTOP = sp;return ($127|0);
      }
     }
    }
   }
  }
 }
 $$expand_i1_val4 = 0;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $127 = $$pre_trunc&1;
 STACKTOP = sp;return ($127|0);
}
function __ZL16PartStream_CloseP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ByteOffset = 0, $PartHeader = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp + 8|0;
 $PartHeader = sp + 12|0;
 $ByteOffset = sp;
 $0 = $pStream;
 $1 = $ByteOffset;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 132|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $53 = $0;
  __ZL17BlockStream_CloseP12TBlockStream($53);
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 156|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $53 = $0;
  __ZL17BlockStream_CloseP12TBlockStream($53);
  STACKTOP = sp;return;
 }
 dest=$PartHeader; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$PartHeader>>2] = 2;
 $13 = $0;
 $14 = ((($13)) + 104|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($PartHeader)) + 44|0);
 HEAP32[$21>>2] = $20;
 $22 = $0;
 $23 = ((($22)) + 104|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($PartHeader)) + 40|0);
 HEAP32[$30>>2] = $26;
 $31 = $0;
 $32 = ((($31)) + 144|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($PartHeader)) + 48|0);
 HEAP32[$34>>2] = $33;
 $35 = ((($PartHeader)) + 4|0);
 $36 = $0;
 $37 = ((($36)) + 120|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$vararg_buffer>>2] = $38;
 (_sprintf($35,16362,$vararg_buffer)|0);
 $39 = $0;
 $40 = ((($39)) + 44|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $0;
 (FUNCTION_TABLE_iiiii[$41 & 127]($42,$ByteOffset,$PartHeader,52)|0);
 $43 = $0;
 $44 = ((($43)) + 44|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $0;
 $47 = $0;
 $48 = ((($47)) + 132|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $0;
 $51 = ((($50)) + 140|0);
 $52 = HEAP32[$51>>2]|0;
 (FUNCTION_TABLE_iiiii[$45 & 127]($46,0,$49,$52)|0);
 $53 = $0;
 __ZL17BlockStream_CloseP12TBlockStream($53);
 STACKTOP = sp;return;
}
function __ZL21PartStream_BlockCheckP12TBlockStreamy($pStream,$0,$1) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FileBitmap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $pStream;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 144|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) - 1)|0;
 $18 = $10 & $17;
 $19 = ($18|0)==(0);
 $20 = (0)==(0);
 $21 = $19 & $20;
 if (!($21)) {
  ___assert_fail((16294|0),(14637|0),1561,(16340|0));
  // unreachable;
 }
 $22 = $2;
 $23 = ((($22)) + 132|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $2;
  $27 = ((($26)) + 132|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $2;
  $36 = ((($35)) + 144|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (___udivdi3(($31|0),($34|0),($37|0),0)|0);
  $39 = tempRet0;
  $40 = (($28) + (($38*20)|0)|0);
  $FileBitmap = $40;
  $41 = $FileBitmap;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 3;
  $44 = ($43|0)!=(0);
  $45 = $44 ? 1 : 0;
  STACKTOP = sp;return ($45|0);
 } else {
  ___assert_fail((14884|0),(14637|0),1562,(16340|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL20PartStream_BlockReadP12TBlockStreamyyPhjb($pStream,$0,$1,$2,$3,$BlockBuffer,$BytesNeeded,$bAvailable) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $BlockBuffer = $BlockBuffer|0;
 $BytesNeeded = $BytesNeeded|0;
 $bAvailable = $bAvailable|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BlockIndex = 0, $ByteOffset = 0;
 var $BytesToRead = 0, $FileBitmap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 49|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $ByteOffset = sp;
 $5 = $pStream;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $2;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $3;
 $8 = $BlockBuffer;
 $9 = $BytesNeeded;
 $19 = $bAvailable&1;
 $10 = $19;
 $20 = $6;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = ((($26)) + 144|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (___udivdi3(($22|0),($25|0),($28|0),0)|0);
 $30 = tempRet0;
 $BlockIndex = $29;
 $31 = $5;
 $32 = ((($31)) + 132|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  ___assert_fail((14884|0),(14637|0),1585,(16212|0));
  // unreachable;
 }
 $35 = $6;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $5;
 $42 = ((($41)) + 144|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) - 1)|0;
 $45 = $37 & $44;
 $46 = ($45|0)==(0);
 $47 = (0)==(0);
 $48 = $46 & $47;
 if (!($48)) {
  ___assert_fail((14935|0),(14637|0),1586,(16212|0));
  // unreachable;
 }
 $49 = $6;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $7;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($54>>>0)<($60>>>0);
 $62 = ($51>>>0)<($57>>>0);
 $63 = ($54|0)==($60|0);
 $64 = $63 & $62;
 $65 = $61 | $64;
 if (!($65)) {
  ___assert_fail((14981|0),(14637|0),1587,(16212|0));
  // unreachable;
 }
 $66 = $10;
 $67 = $66&1;
 $68 = $67&1;
 $69 = ($68|0)==(0);
 $70 = $5;
 L10: do {
  if ($69) {
   $71 = ((($70)) + 96|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(0|0);
   if ($73) {
    $$expand_i1_val = 0;
    HEAP8[$4>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$4>>0]|0;
    $216 = $$pre_trunc&1;
    STACKTOP = sp;return ($216|0);
   }
   $74 = $7;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($74) + 4)|0;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = $6;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($80) + 4)|0;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = (_i64Subtract(($76|0),($79|0),($82|0),($85|0))|0);
   $87 = tempRet0;
   $BytesToRead = $86;
   $88 = $5;
   $89 = ((($88)) + 96|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $8;
   $92 = $BytesToRead;
   $93 = (__Z15FileStream_ReadP11TFileStreamPyPvj($90,$6,$91,$92)|0);
   if (!($93)) {
    $$expand_i1_val2 = 0;
    HEAP8[$4>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$4>>0]|0;
    $216 = $$pre_trunc&1;
    STACKTOP = sp;return ($216|0);
   }
   $94 = $5;
   $95 = ((($94)) + 52|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $5;
   $98 = (FUNCTION_TABLE_iii[$96 & 127]($97,$ByteOffset)|0);
   if ($98) {
    $99 = $5;
    $100 = ((($99)) + 44|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $5;
    $103 = $8;
    $104 = $BytesToRead;
    $105 = (FUNCTION_TABLE_iiiii[$101 & 127]($102,$ByteOffset,$103,$104)|0);
    if ($105) {
     $106 = $5;
     $107 = $6;
     $108 = $107;
     $109 = HEAP32[$108>>2]|0;
     $110 = (($107) + 4)|0;
     $111 = $110;
     $112 = HEAP32[$111>>2]|0;
     $113 = $7;
     $114 = $113;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($113) + 4)|0;
     $117 = $116;
     $118 = HEAP32[$117>>2]|0;
     $119 = $ByteOffset;
     $120 = $119;
     $121 = HEAP32[$120>>2]|0;
     $122 = (($119) + 4)|0;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     __ZL23PartStream_UpdateBitmapP12TBlockStreamyyy($106,$109,$112,$115,$118,$121,$124);
    }
   }
  } else {
   $125 = ((($70)) + 132|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $BlockIndex;
   $128 = (($126) + (($127*20)|0)|0);
   $FileBitmap = $128;
   while(1) {
    $129 = $6;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($129) + 4)|0;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = $7;
    $136 = $135;
    $137 = HEAP32[$136>>2]|0;
    $138 = (($135) + 4)|0;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = ($134>>>0)<($140>>>0);
    $142 = ($131>>>0)<($137>>>0);
    $143 = ($134|0)==($140|0);
    $144 = $143 & $142;
    $145 = $141 | $144;
    if (!($145)) {
     break L10;
    }
    $146 = $7;
    $147 = $146;
    $148 = HEAP32[$147>>2]|0;
    $149 = (($146) + 4)|0;
    $150 = $149;
    $151 = HEAP32[$150>>2]|0;
    $152 = $6;
    $153 = $152;
    $154 = HEAP32[$153>>2]|0;
    $155 = (($152) + 4)|0;
    $156 = $155;
    $157 = HEAP32[$156>>2]|0;
    $158 = (_i64Subtract(($148|0),($151|0),($154|0),($157|0))|0);
    $159 = tempRet0;
    $BytesToRead = $158;
    $160 = $BytesToRead;
    $161 = $5;
    $162 = ((($161)) + 144|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($160>>>0)>($163>>>0);
    if ($164) {
     $165 = $5;
     $166 = ((($165)) + 144|0);
     $167 = HEAP32[$166>>2]|0;
     $BytesToRead = $167;
    }
    $168 = $BytesToRead;
    $169 = $9;
    $170 = ($168>>>0)>($169>>>0);
    if ($170) {
     $171 = $9;
     $BytesToRead = $171;
    }
    $172 = $FileBitmap;
    $173 = ((($172)) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $FileBitmap;
    $176 = ((($175)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $ByteOffset;
    $179 = $178;
    HEAP32[$179>>2] = $177;
    $180 = (($178) + 4)|0;
    $181 = $180;
    HEAP32[$181>>2] = $174;
    $182 = $5;
    $183 = ((($182)) + 40|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $5;
    $186 = $8;
    $187 = $BytesToRead;
    $188 = (FUNCTION_TABLE_iiiii[$184 & 127]($185,$ByteOffset,$186,$187)|0);
    if (!($188)) {
     break;
    }
    $189 = $5;
    $190 = ((($189)) + 144|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $6;
    $193 = $192;
    $194 = HEAP32[$193>>2]|0;
    $195 = (($192) + 4)|0;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (_i64Add(($194|0),($197|0),($191|0),0)|0);
    $199 = tempRet0;
    $200 = $6;
    $201 = $200;
    HEAP32[$201>>2] = $198;
    $202 = (($200) + 4)|0;
    $203 = $202;
    HEAP32[$203>>2] = $199;
    $204 = $5;
    $205 = ((($204)) + 144|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = $8;
    $208 = (($207) + ($206)|0);
    $8 = $208;
    $209 = $5;
    $210 = ((($209)) + 144|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $9;
    $213 = (($212) - ($211))|0;
    $9 = $213;
    $214 = $FileBitmap;
    $215 = ((($214)) + 20|0);
    $FileBitmap = $215;
   }
   $$expand_i1_val4 = 0;
   HEAP8[$4>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$4>>0]|0;
   $216 = $$pre_trunc&1;
   STACKTOP = sp;return ($216|0);
  }
 } while(0);
 $$expand_i1_val6 = 1;
 HEAP8[$4>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$4>>0]|0;
 $216 = $$pre_trunc&1;
 STACKTOP = sp;return ($216|0);
}
function __ZL23PartStream_UpdateBitmapP12TBlockStreamyyy($pStream,$0,$1,$2,$3,$4,$5) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BlockSize = 0, $FileBitmap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $6 = $pStream;
 $10 = $7;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = $8;
 $15 = $14;
 HEAP32[$15>>2] = $2;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $3;
 $18 = $9;
 $19 = $18;
 HEAP32[$19>>2] = $4;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $5;
 $22 = $6;
 $23 = ((($22)) + 144|0);
 $24 = HEAP32[$23>>2]|0;
 $BlockSize = $24;
 $25 = $7;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $BlockSize;
 $32 = (($31) - 1)|0;
 $33 = $27 & $32;
 $34 = ($33|0)==(0);
 $35 = (0)==(0);
 $36 = $34 & $35;
 if (!($36)) {
  ___assert_fail((16233|0),(14637|0),1530,(16270|0));
  // unreachable;
 }
 $37 = $6;
 $38 = ((($37)) + 132|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  ___assert_fail((14884|0),(14637|0),1531,(16270|0));
  // unreachable;
 }
 $41 = $6;
 $42 = ((($41)) + 132|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $7;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $BlockSize;
 $51 = (___udivdi3(($46|0),($49|0),($50|0),0)|0);
 $52 = tempRet0;
 $53 = (($43) + (($51*20)|0)|0);
 $FileBitmap = $53;
 while(1) {
  $54 = $7;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $8;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + 4)|0;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($59>>>0)<($65>>>0);
  $67 = ($56>>>0)<($62>>>0);
  $68 = ($59|0)==($65|0);
  $69 = $68 & $67;
  $70 = $66 | $69;
  if (!($70)) {
   break;
  }
  $71 = $9;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = $FileBitmap;
  $78 = ((($77)) + 8|0);
  HEAP32[$78>>2] = $76;
  $79 = $9;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = $FileBitmap;
  $86 = ((($85)) + 4|0);
  HEAP32[$86>>2] = $81;
  $87 = $FileBitmap;
  HEAP32[$87>>2] = 3;
  $88 = $BlockSize;
  $89 = $7;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 4)|0;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = (_i64Add(($91|0),($94|0),($88|0),0)|0);
  $96 = tempRet0;
  $97 = $7;
  $98 = $97;
  HEAP32[$98>>2] = $95;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP32[$100>>2] = $96;
  $101 = $BlockSize;
  $102 = $9;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($102) + 4)|0;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = (_i64Add(($104|0),($107|0),($101|0),0)|0);
  $109 = tempRet0;
  $110 = $9;
  $111 = $110;
  HEAP32[$111>>2] = $108;
  $112 = (($110) + 4)|0;
  $113 = $112;
  HEAP32[$113>>2] = $109;
  $114 = $FileBitmap;
  $115 = ((($114)) + 20|0);
  $FileBitmap = $115;
 }
 $116 = $6;
 $117 = ((($116)) + 156|0);
 HEAP32[$117>>2] = 1;
 STACKTOP = sp;return;
}
function __ZL17BlockStream_CloseP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 132|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
 }
 $8 = $0;
 $9 = ((($8)) + 132|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = ((($10)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 FUNCTION_TABLE_vi[$12 & 255]($13);
 STACKTOP = sp;return;
}
function __ZL12IsPartHeaderP17_PART_FILE_HEADER($pPartHdr) {
 $pPartHdr = $pPartHdr|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 4|0;
 $1 = $pPartHdr;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = $1;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (_isdigit($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $1;
   $12 = ((($11)) + 4|0);
   $13 = ((($12)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = (_isdigit($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $1;
    $19 = ((($18)) + 4|0);
    $20 = ((($19)) + 2|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21 << 24 >> 24;
    $23 = (_isdigit($22)|0);
    $24 = ($23|0)!=(0);
    if ($24) {
     $25 = $1;
     $26 = ((($25)) + 48|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $1;
     $29 = ((($28)) + 48|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) - 1)|0;
     $32 = $27 & $31;
     $33 = ($32|0)==(0);
     if ($33) {
      $$expand_i1_val = 1;
      HEAP8[$0>>0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $34 = $$pre_trunc&1;
      STACKTOP = sp;return ($34|0);
     }
    }
   }
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $34 = $$pre_trunc&1;
 STACKTOP = sp;return ($34|0);
}
function __ZL11StringToIntPKc($szString) {
 $szString = $szString|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwValue = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szString;
 $dwValue = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (48)<=($3|0);
  if ($4) {
   $5 = $0;
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)<=(57);
   $18 = $8;
  } else {
   $18 = 0;
  }
  $9 = $dwValue;
  if (!($18)) {
   break;
  }
  $10 = ($9*10)|0;
  $11 = $0;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (($13) - 57)|0;
  $15 = (($10) + ($14))|0;
  $dwValue = $15;
  $16 = $0;
  $17 = ((($16)) + 1|0);
  $0 = $17;
 }
 STACKTOP = sp;return ($9|0);
}
function __ZL20PartStream_CheckFileP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FileBitmap = 0, $dwBlockCount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pStream;
 $2 = $1;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $FileBitmap = $4;
 $5 = $1;
 $6 = ((($5)) + 104|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_i64Add(($9|0),($12|0),($15|0),0)|0);
 $17 = tempRet0;
 $18 = (_i64Subtract(($16|0),($17|0),1,0)|0);
 $19 = tempRet0;
 $20 = $1;
 $21 = ((($20)) + 144|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (___udivdi3(($18|0),($19|0),($22|0),0)|0);
 $24 = tempRet0;
 $dwBlockCount = $23;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $dwBlockCount;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   label = 13;
   break;
  }
  $28 = $FileBitmap;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   label = 4;
   break;
  }
  $32 = $FileBitmap;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if (!($35)) {
   label = 6;
   break;
  }
  $36 = $FileBitmap;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $39 = $FileBitmap;
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(3);
   if (!($41)) {
    label = 9;
    break;
   }
  }
  $42 = $FileBitmap;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(3);
  if ($44) {
   label = 11;
   break;
  }
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
  $47 = $FileBitmap;
  $48 = ((($47)) + 20|0);
  $FileBitmap = $48;
 }
 if ((label|0) == 4) {
  ___assert_fail((16365|0),(14637|0),1443,(16395|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  ___assert_fail((16416|0),(14637|0),1444,(16395|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  ___assert_fail((16446|0),(14637|0),1445,(16395|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 13) {
  $0 = 1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function __ZL23FlatStream_CreateMirrorP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FileBitmap = 0, $MasterSize = 0, $MirrorSize = 0, $bNeedCreateMirrorStream = 0, $bNeedResizeMirrorStream = 0, $dwBitmapSize = 0, $dwBlockCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 34|0;
 $MasterSize = sp + 8|0;
 $MirrorSize = sp;
 $1 = $pStream;
 $2 = $MasterSize;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = $MirrorSize;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $FileBitmap = 0;
 $bNeedCreateMirrorStream = 1;
 $bNeedResizeMirrorStream = 1;
 $10 = $1;
 $11 = ((($10)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = $1;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = $1;
   $19 = ((($18)) + 96|0);
   $20 = HEAP32[$19>>2]|0;
   (__Z18FileStream_GetSizeP11TFileStreamPy($20,$MasterSize)|0);
   $21 = $MasterSize;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($21) + 4)|0;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (_i64Add(($23|0),($26|0),16384,0)|0);
   $28 = tempRet0;
   $29 = (_i64Subtract(($27|0),($28|0),1,0)|0);
   $30 = tempRet0;
   $31 = (___udivdi3(($29|0),($30|0),16384,0)|0);
   $32 = tempRet0;
   $dwBlockCount = $31;
   $33 = $dwBlockCount;
   $34 = (($33) + 7)|0;
   $35 = (($34>>>0) / 8)&-1;
   $dwBitmapSize = $35;
   $36 = $1;
   $37 = ((($36)) + 120|0);
   HEAP32[$37>>2] = 10958;
   $38 = $MasterSize;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   $45 = ((($44)) + 104|0);
   $46 = $45;
   $47 = $46;
   HEAP32[$47>>2] = $40;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $43;
   $50 = $1;
   $51 = ((($50)) + 112|0);
   $52 = $51;
   $53 = $52;
   HEAP32[$53>>2] = 0;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = 0;
   $56 = $1;
   $57 = ((($56)) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = $1;
   $61 = ((($60)) + 100|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iiii[$58 & 127]($59,$62,0)|0);
   if ($63) {
    $64 = $1;
    $65 = ((($64)) + 52|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $1;
    (FUNCTION_TABLE_iii[$66 & 127]($67,$MirrorSize)|0);
    $68 = $MirrorSize;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 4)|0;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = $MasterSize;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 4)|0;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = $dwBitmapSize;
    $81 = (_i64Add(($76|0),($79|0),($80|0),0)|0);
    $82 = tempRet0;
    $83 = (_i64Add(($81|0),($82|0),24,0)|0);
    $84 = tempRet0;
    $85 = ($70|0)==($83|0);
    $86 = ($73|0)==($84|0);
    $87 = $85 & $86;
    do {
     if ($87) {
      $88 = $1;
      $89 = (__ZL21FlatStream_LoadBitmapP12TBlockStream($88)|0);
      if (!($89)) {
       $bNeedResizeMirrorStream = 0;
       break;
      }
      $$expand_i1_val2 = 1;
      HEAP8[$0>>0] = $$expand_i1_val2;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $137 = $$pre_trunc&1;
      STACKTOP = sp;return ($137|0);
     }
    } while(0);
    $bNeedCreateMirrorStream = 0;
   }
   $90 = $bNeedCreateMirrorStream;
   $91 = $90&1;
   if ($91) {
    $92 = $1;
    $93 = ((($92)) + 32|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $1;
    $96 = (FUNCTION_TABLE_ii[$94 & 127]($95)|0);
    if (!($96)) {
     $$expand_i1_val4 = 0;
     HEAP8[$0>>0] = $$expand_i1_val4;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $137 = $$pre_trunc&1;
     STACKTOP = sp;return ($137|0);
    }
   }
   $97 = $bNeedResizeMirrorStream;
   $98 = $97&1;
   if ($98) {
    $99 = $1;
    $100 = ((($99)) + 48|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $1;
    $103 = $MasterSize;
    $104 = $103;
    $105 = HEAP32[$104>>2]|0;
    $106 = (($103) + 4)|0;
    $107 = $106;
    $108 = HEAP32[$107>>2]|0;
    $109 = $dwBitmapSize;
    $110 = (_i64Add(($105|0),($108|0),($109|0),0)|0);
    $111 = tempRet0;
    $112 = (_i64Add(($110|0),($111|0),24,0)|0);
    $113 = tempRet0;
    $114 = (FUNCTION_TABLE_iiii[$101 & 127]($102,$112,$113)|0);
    if (!($114)) {
     $$expand_i1_val6 = 0;
     HEAP8[$0>>0] = $$expand_i1_val6;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $137 = $$pre_trunc&1;
     STACKTOP = sp;return ($137|0);
    }
   }
   $115 = $dwBitmapSize;
   $116 = $115;
   $117 = (_malloc($116)|0);
   $FileBitmap = $117;
   $118 = $FileBitmap;
   $119 = ($118|0)==(0|0);
   if ($119) {
    $$expand_i1_val8 = 0;
    HEAP8[$0>>0] = $$expand_i1_val8;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $137 = $$pre_trunc&1;
    STACKTOP = sp;return ($137|0);
   } else {
    $120 = $FileBitmap;
    $121 = $dwBitmapSize;
    _memset(($120|0),0,($121|0))|0;
    $122 = $FileBitmap;
    $123 = $1;
    $124 = ((($123)) + 132|0);
    HEAP32[$124>>2] = $122;
    $125 = $dwBitmapSize;
    $126 = $1;
    $127 = ((($126)) + 140|0);
    HEAP32[$127>>2] = $125;
    $128 = $1;
    $129 = ((($128)) + 144|0);
    HEAP32[$129>>2] = 16384;
    $130 = $dwBlockCount;
    $131 = $1;
    $132 = ((($131)) + 148|0);
    HEAP32[$132>>2] = $130;
    $133 = $1;
    $134 = ((($133)) + 152|0);
    HEAP32[$134>>2] = 0;
    $135 = $1;
    $136 = ((($135)) + 156|0);
    HEAP32[$136>>2] = 1;
    $$expand_i1_val10 = 1;
    HEAP8[$0>>0] = $$expand_i1_val10;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $137 = $$pre_trunc&1;
    STACKTOP = sp;return ($137|0);
   }
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $137 = $$pre_trunc&1;
 STACKTOP = sp;return ($137|0);
}
function __ZL21FlatStream_LoadBitmapP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $BitmapSize = 0, $BlockCount = 0, $ByteOffset = 0, $FileBitmap = 0, $Footer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp + 52|0;
 $Footer = sp + 24|0;
 $ByteOffset = sp;
 $1 = $pStream;
 $2 = $1;
 $3 = ((($2)) + 124|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1024;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $137 = $$pre_trunc&1;
  STACKTOP = sp;return ($137|0);
 }
 $7 = $1;
 $8 = ((($7)) + 64|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)>(0);
 $16 = ($11>>>0)>(24);
 $17 = ($14|0)==(0);
 $18 = $17 & $16;
 $19 = $15 | $18;
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 64|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (_i64Subtract(($24|0),($27|0),24,0)|0);
  $29 = tempRet0;
  $30 = $ByteOffset;
  $31 = $30;
  HEAP32[$31>>2] = $28;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = $29;
  $34 = $1;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = (FUNCTION_TABLE_iiiii[$36 & 127]($37,$ByteOffset,$Footer,24)|0);
  if ($38) {
   $39 = HEAP32[$Footer>>2]|0;
   $40 = ($39|0)==(863401072);
   if ($40) {
    $41 = ((($Footer)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(3);
    if ($43) {
     $44 = ((($Footer)) + 16|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ((($Footer)) + 12|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $ByteOffset;
     $49 = $48;
     HEAP32[$49>>2] = $47;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $45;
     $52 = $ByteOffset;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $55 = (($52) + 4)|0;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $58 = (_i64Subtract(($54|0),($57|0),1,0)|0);
     $59 = tempRet0;
     $60 = ((($Footer)) + 20|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (___udivdi3(($58|0),($59|0),($61|0),0)|0);
     $63 = tempRet0;
     $64 = (_i64Add(($62|0),($63|0),1,0)|0);
     $65 = tempRet0;
     $BlockCount = $64;
     $66 = $BlockCount;
     $67 = (($66) + 7)|0;
     $68 = (($67>>>0) / 8)&-1;
     $BitmapSize = $68;
     $69 = $ByteOffset;
     $70 = $69;
     $71 = HEAP32[$70>>2]|0;
     $72 = (($69) + 4)|0;
     $73 = $72;
     $74 = HEAP32[$73>>2]|0;
     $75 = $BitmapSize;
     $76 = (_i64Add(($71|0),($74|0),($75|0),0)|0);
     $77 = tempRet0;
     $78 = (_i64Add(($76|0),($77|0),24,0)|0);
     $79 = tempRet0;
     $80 = $1;
     $81 = ((($80)) + 64|0);
     $82 = $81;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($82) + 4)|0;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $88 = ($78|0)==($84|0);
     $89 = ($79|0)==($87|0);
     $90 = $88 & $89;
     if ($90) {
      $91 = $BitmapSize;
      $92 = $91;
      $93 = (_malloc($92)|0);
      $FileBitmap = $93;
      $94 = $FileBitmap;
      $95 = ($94|0)!=(0|0);
      if ($95) {
       $96 = $1;
       $97 = ((($96)) + 40|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = $1;
       $100 = $FileBitmap;
       $101 = $BitmapSize;
       $102 = (FUNCTION_TABLE_iiiii[$98 & 127]($99,$ByteOffset,$100,$101)|0);
       if ($102) {
        $104 = ((($Footer)) + 8|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = $1;
        $107 = ((($106)) + 120|0);
        HEAP32[$107>>2] = $105;
        $108 = $ByteOffset;
        $109 = $108;
        $110 = HEAP32[$109>>2]|0;
        $111 = (($108) + 4)|0;
        $112 = $111;
        $113 = HEAP32[$112>>2]|0;
        $114 = $1;
        $115 = ((($114)) + 104|0);
        $116 = $115;
        $117 = $116;
        HEAP32[$117>>2] = $110;
        $118 = (($116) + 4)|0;
        $119 = $118;
        HEAP32[$119>>2] = $113;
        $120 = $FileBitmap;
        $121 = $1;
        $122 = ((($121)) + 132|0);
        HEAP32[$122>>2] = $120;
        $123 = $BitmapSize;
        $124 = $1;
        $125 = ((($124)) + 140|0);
        HEAP32[$125>>2] = $123;
        $126 = ((($Footer)) + 20|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = $1;
        $129 = ((($128)) + 144|0);
        HEAP32[$129>>2] = $127;
        $130 = $BlockCount;
        $131 = $1;
        $132 = ((($131)) + 148|0);
        HEAP32[$132>>2] = $130;
        $133 = $1;
        $134 = (__ZL20FlatStream_CheckFileP12TBlockStream($133)|0);
        $135 = $1;
        $136 = ((($135)) + 152|0);
        HEAP32[$136>>2] = $134;
        $$expand_i1_val4 = 1;
        HEAP8[$0>>0] = $$expand_i1_val4;
        $$pre_trunc = HEAP8[$0>>0]|0;
        $137 = $$pre_trunc&1;
        STACKTOP = sp;return ($137|0);
       } else {
        $103 = $FileBitmap;
        _free($103);
        $$expand_i1_val2 = 0;
        HEAP8[$0>>0] = $$expand_i1_val2;
        $$pre_trunc = HEAP8[$0>>0]|0;
        $137 = $$pre_trunc&1;
        STACKTOP = sp;return ($137|0);
       }
      }
     }
    }
   }
  }
 }
 $$expand_i1_val6 = 0;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $137 = $$pre_trunc&1;
 STACKTOP = sp;return ($137|0);
}
function __ZL16FlatStream_CloseP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Footer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Footer = sp;
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $52 = $0;
  __ZL17BlockStream_CloseP12TBlockStream($52);
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $52 = $0;
  __ZL17BlockStream_CloseP12TBlockStream($52);
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = $0;
 $14 = ((($13)) + 104|0);
 $15 = $0;
 $16 = ((($15)) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = ((($18)) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 (FUNCTION_TABLE_iiiii[$11 & 127]($12,$14,$17,$20)|0);
 HEAP32[$Footer>>2] = 863401072;
 $21 = ((($Footer)) + 4|0);
 HEAP32[$21>>2] = 3;
 $22 = $0;
 $23 = ((($22)) + 120|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($Footer)) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = $0;
 $27 = ((($26)) + 104|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($Footer)) + 12|0);
 HEAP32[$34>>2] = $30;
 $35 = $0;
 $36 = ((($35)) + 104|0);
 $37 = $36;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($Footer)) + 16|0);
 HEAP32[$43>>2] = $42;
 $44 = $0;
 $45 = ((($44)) + 144|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($Footer)) + 20|0);
 HEAP32[$47>>2] = $46;
 $48 = $0;
 $49 = ((($48)) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $0;
 (FUNCTION_TABLE_iiiii[$50 & 127]($51,0,$Footer,24)|0);
 $52 = $0;
 __ZL17BlockStream_CloseP12TBlockStream($52);
 STACKTOP = sp;return;
}
function __ZL21FlatStream_BlockCheckP12TBlockStreamy($pStream,$0,$1) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BitMask = 0, $BlockIndex = 0, $FileBitmap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $2 = $pStream;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = ((($8)) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 $FileBitmap = $10;
 $11 = $3;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - 1)|0;
 $21 = $13 & $20;
 $22 = ($21|0)==(0);
 $23 = (0)==(0);
 $24 = $22 & $23;
 if (!($24)) {
  ___assert_fail((16294|0),(14637|0),1181,(16575|0));
  // unreachable;
 }
 $25 = $FileBitmap;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $3;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = ((($33)) + 144|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (___udivdi3(($29|0),($32|0),($35|0),0)|0);
  $37 = tempRet0;
  $BlockIndex = $36;
  $38 = $BlockIndex;
  $39 = $38 & 7;
  $40 = 1 << $39;
  $41 = $40&255;
  $BitMask = $41;
  $42 = $BlockIndex;
  $43 = (($42>>>0) / 8)&-1;
  $44 = $FileBitmap;
  $45 = (($44) + ($43)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $BitMask;
  $49 = $48&255;
  $50 = $47 & $49;
  $51 = ($50|0)!=(0);
  $52 = $51 ? 1 : 0;
  STACKTOP = sp;return ($52|0);
 } else {
  ___assert_fail((16556|0),(14637|0),1182,(16575|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL20FlatStream_BlockReadP12TBlockStreamyyPhjb($pStream,$0,$1,$2,$3,$BlockBuffer,$BytesNeeded,$bAvailable) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $BlockBuffer = $BlockBuffer|0;
 $BytesNeeded = $BytesNeeded|0;
 $bAvailable = $bAvailable|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BytesToRead = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 33|0;
 $6 = sp + 8|0;
 $7 = sp;
 $5 = $pStream;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $2;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $3;
 $8 = $BlockBuffer;
 $9 = $BytesNeeded;
 $19 = $bAvailable&1;
 $10 = $19;
 $20 = $7;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $6;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (_i64Subtract(($22|0),($25|0),($28|0),($31|0))|0);
 $33 = tempRet0;
 $BytesToRead = $32;
 $34 = $5;
 $35 = ((($34)) + 132|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  ___assert_fail((14884|0),(14637|0),1203,(16511|0));
  // unreachable;
 }
 $38 = $6;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $5;
 $45 = ((($44)) + 144|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) - 1)|0;
 $48 = $40 & $47;
 $49 = ($48|0)==(0);
 $50 = (0)==(0);
 $51 = $49 & $50;
 if (!($51)) {
  ___assert_fail((14935|0),(14637|0),1204,(16511|0));
  // unreachable;
 }
 $52 = $6;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $7;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($57>>>0)<($63>>>0);
 $65 = ($54>>>0)<($60>>>0);
 $66 = ($57|0)==($63|0);
 $67 = $66 & $65;
 $68 = $64 | $67;
 if (!($68)) {
  ___assert_fail((14981|0),(14637|0),1205,(16511|0));
  // unreachable;
 }
 $69 = $10;
 $70 = $69&1;
 $71 = $70&1;
 $72 = ($71|0)==(0);
 if (!($72)) {
  $103 = $BytesToRead;
  $104 = $9;
  $105 = ($103>>>0)>($104>>>0);
  if ($105) {
   $106 = $9;
   $BytesToRead = $106;
  }
  $107 = $5;
  $108 = ((($107)) + 40|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $5;
  $111 = $8;
  $112 = $BytesToRead;
  $113 = (FUNCTION_TABLE_iiiii[$109 & 127]($110,$6,$111,$112)|0);
  $$expand_i1_val6 = $113&1;
  HEAP8[$4>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
 }
 $73 = $5;
 $74 = ((($73)) + 96|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(0|0);
 if ($76) {
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
 }
 $77 = $5;
 $78 = ((($77)) + 96|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $8;
 $81 = $BytesToRead;
 $82 = (__Z15FileStream_ReadP11TFileStreamPyPvj($79,$6,$80,$81)|0);
 if (!($82)) {
  $$expand_i1_val2 = 0;
  HEAP8[$4>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
 }
 $83 = $5;
 $84 = ((($83)) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $5;
 $87 = $8;
 $88 = $BytesToRead;
 $89 = (FUNCTION_TABLE_iiiii[$85 & 127]($86,$6,$87,$88)|0);
 if ($89) {
  $90 = $5;
  $91 = $6;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = $7;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  __ZL23FlatStream_UpdateBitmapP12TBlockStreamyy($90,$93,$96,$99,$102);
 }
 $$expand_i1_val4 = 1;
 HEAP8[$4>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$4>>0]|0;
 $114 = $$pre_trunc&1;
 STACKTOP = sp;return ($114|0);
}
function __ZL23FlatStream_UpdateBitmapP12TBlockStreamyy($pStream,$0,$1,$2,$3) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $BitMask = 0, $BlockIndex = 0, $BlockSize = 0, $ByteIndex = 0, $FileBitmap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $6 = sp;
 $4 = $pStream;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $3;
 $15 = $4;
 $16 = ((($15)) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $FileBitmap = $17;
 $18 = $4;
 $19 = ((($18)) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 $BlockSize = $20;
 $21 = $5;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = $BlockSize;
 $28 = (($27) - 1)|0;
 $29 = $23 & $28;
 $30 = ($29|0)==(0);
 $31 = (0)==(0);
 $32 = $30 & $31;
 if (!($32)) {
  ___assert_fail((16233|0),(14637|0),1148,(16532|0));
  // unreachable;
 }
 $33 = $FileBitmap;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  ___assert_fail((16556|0),(14637|0),1149,(16532|0));
  // unreachable;
 }
 $35 = $5;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $BlockSize;
 $42 = (___udivdi3(($37|0),($40|0),($41|0),0)|0);
 $43 = tempRet0;
 $BlockIndex = $42;
 $44 = $BlockIndex;
 $45 = (($44>>>0) / 8)&-1;
 $ByteIndex = $45;
 $46 = $BlockIndex;
 $47 = $46 & 7;
 $48 = 1 << $47;
 $49 = $48&255;
 $BitMask = $49;
 while(1) {
  $50 = $5;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = $6;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = ($55>>>0)<($61>>>0);
  $63 = ($52>>>0)<($58>>>0);
  $64 = ($55|0)==($61|0);
  $65 = $64 & $63;
  $66 = $62 | $65;
  if (!($66)) {
   break;
  }
  $67 = $BitMask;
  $68 = $67&255;
  $69 = $ByteIndex;
  $70 = $FileBitmap;
  $71 = (($70) + ($69)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 | $68;
  $75 = $74&255;
  HEAP8[$71>>0] = $75;
  $76 = $BlockSize;
  $77 = $5;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (_i64Add(($79|0),($82|0),($76|0),0)|0);
  $84 = tempRet0;
  $85 = $5;
  $86 = $85;
  HEAP32[$86>>2] = $83;
  $87 = (($85) + 4)|0;
  $88 = $87;
  HEAP32[$88>>2] = $84;
  $89 = $BitMask;
  $90 = $89&255;
  $91 = $90 >> 7;
  $92 = $ByteIndex;
  $93 = (($92) + ($91))|0;
  $ByteIndex = $93;
  $94 = $BitMask;
  $95 = $94&255;
  $96 = $95 >> 7;
  $97 = $BitMask;
  $98 = $97&255;
  $99 = $98 << 1;
  $100 = $96 | $99;
  $101 = $100&255;
  $BitMask = $101;
 }
 $102 = $4;
 $103 = ((($102)) + 156|0);
 HEAP32[$103>>2] = 1;
 STACKTOP = sp;return;
}
function __ZL20FlatStream_CheckFileP12TBlockStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ExpectedValue = 0;
 var $ExtraBitsCount = 0, $FileBitmap = 0, $WholeByteCount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pStream;
 $2 = $1;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $FileBitmap = $4;
 $5 = $1;
 $6 = ((($5)) + 148|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7>>>0) / 8)&-1;
 $WholeByteCount = $8;
 $9 = $1;
 $10 = ((($9)) + 148|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 7;
 $ExtraBitsCount = $12;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $WholeByteCount;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $FileBitmap;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(255);
  if ($21) {
   label = 4;
   break;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $24 = $ExtraBitsCount;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $ExtraBitsCount;
  $27 = 1 << $26;
  $28 = (($27) - 1)|0;
  $29 = $28&255;
  $ExpectedValue = $29;
  $30 = $WholeByteCount;
  $31 = $FileBitmap;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $ExpectedValue;
  $36 = $35&255;
  $37 = ($34|0)!=($36|0);
  if ($37) {
   $0 = 0;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 }
 $0 = 1;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZL13BaseFile_InitP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 HEAP32[$2>>2] = 38;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = 39;
 $5 = $0;
 $6 = ((($5)) + 40|0);
 HEAP32[$6>>2] = 40;
 $7 = $0;
 $8 = ((($7)) + 44|0);
 HEAP32[$8>>2] = 41;
 $9 = $0;
 $10 = ((($9)) + 48|0);
 HEAP32[$10>>2] = 42;
 $11 = $0;
 $12 = ((($11)) + 52|0);
 HEAP32[$12>>2] = 43;
 $13 = $0;
 $14 = ((($13)) + 56|0);
 HEAP32[$14>>2] = 44;
 $15 = $0;
 $16 = ((($15)) + 60|0);
 HEAP32[$16>>2] = 45;
 STACKTOP = sp;return;
}
function __ZL12BaseMap_InitP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 46;
 $3 = $0;
 $4 = ((($3)) + 40|0);
 HEAP32[$4>>2] = 47;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 HEAP32[$6>>2] = 43;
 $7 = $0;
 $8 = ((($7)) + 56|0);
 HEAP32[$8>>2] = 44;
 $9 = $0;
 $10 = ((($9)) + 60|0);
 HEAP32[$10>>2] = 48;
 $11 = $0;
 $12 = ((($11)) + 124|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | 256;
 HEAP32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function __ZL13BaseHttp_InitP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 49;
 $3 = $0;
 $4 = ((($3)) + 40|0);
 HEAP32[$4>>2] = 50;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 HEAP32[$6>>2] = 43;
 $7 = $0;
 $8 = ((($7)) + 56|0);
 HEAP32[$8>>2] = 44;
 $9 = $0;
 $10 = ((($9)) + 60|0);
 HEAP32[$10>>2] = 51;
 $11 = $0;
 $12 = ((($11)) + 124|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | 256;
 HEAP32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function __ZL13BaseNone_InitP11TFileStream($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZL13BaseHttp_OpenP11TFileStreamPKcj($pStream,$szFileName,$dwStreamFlags) {
 $pStream = $pStream|0;
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $szFileName;
 $2 = $dwStreamFlags;
 _SetLastError(95);
 $3 = $0;
 $0 = $3;
 STACKTOP = sp;return 0;
}
function __ZL13BaseHttp_ReadP11TFileStreamPyPvj($pStream,$pByteOffset,$pvBuffer,$dwBytesToRead) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pByteOffset;
 $2 = $pvBuffer;
 $3 = $dwBytesToRead;
 $4 = $0;
 $0 = $4;
 $5 = $1;
 $1 = $5;
 $6 = $2;
 $2 = $6;
 $7 = $3;
 $3 = $7;
 _SetLastError(95);
 STACKTOP = sp;return 0;
}
function __ZL16BaseFile_GetSizeP11TFileStreamPy($pStream,$pFileSize) {
 $pStream = $pStream|0;
 $pFileSize = $pFileSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pFileSize;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 1;
}
function __ZL15BaseFile_GetPosP11TFileStreamPy($pStream,$pByteOffset) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $pByteOffset;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = ((($3)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $7;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 STACKTOP = sp;return 1;
}
function __ZL14BaseHttp_CloseP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $0 = $1;
 STACKTOP = sp;return;
}
function __ZL12BaseMap_OpenP11TFileStreamPKcj($pStream,$szFileName,$dwStreamFlags) {
 $pStream = $pStream|0;
 $szFileName = $szFileName|0;
 $dwStreamFlags = $dwStreamFlags|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $bResult = 0, $fileinfo = 0, $handle = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $0 = sp + 97|0;
 $fileinfo = sp + 8|0;
 $1 = $pStream;
 $2 = $szFileName;
 $3 = $dwStreamFlags;
 $bResult = 0;
 $4 = $2;
 $5 = (_open($4,0,$vararg_buffer)|0);
 $handle = $5;
 $6 = $handle;
 $7 = ($6|0)!=(-1);
 if ($7) {
  $8 = $handle;
  $9 = (_fstat($8,$fileinfo)|0);
  $10 = ($9|0)!=(-1);
  if ($10) {
   $11 = ((($fileinfo)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $handle;
   $14 = (___mmap(0,$12,1,2,$13,0)|0);
   $15 = $1;
   $16 = ((($15)) + 64|0);
   $17 = ((($16)) + 24|0);
   HEAP32[$17>>2] = $14;
   $18 = $1;
   $19 = ((($18)) + 64|0);
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = ((($fileinfo)) + 56|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = Math_imul(10000000, $24)|0;
    $26 = ($25|0)<(0);
    $27 = $26 << 31 >> 31;
    $28 = (_i64Add(-717324288,27111902,($25|0),($27|0))|0);
    $29 = tempRet0;
    $30 = $1;
    $31 = ((($30)) + 64|0);
    $32 = ((($31)) + 16|0);
    $33 = $32;
    $34 = $33;
    HEAP32[$34>>2] = $28;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = $29;
    $37 = ((($fileinfo)) + 36|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)<(0);
    $40 = $39 << 31 >> 31;
    $41 = $1;
    $42 = ((($41)) + 64|0);
    $43 = $42;
    $44 = $43;
    HEAP32[$44>>2] = $38;
    $45 = (($43) + 4)|0;
    $46 = $45;
    HEAP32[$46>>2] = $40;
    $47 = $1;
    $48 = ((($47)) + 64|0);
    $49 = ((($48)) + 8|0);
    $50 = $49;
    $51 = $50;
    HEAP32[$51>>2] = 0;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = 0;
    $bResult = 1;
   }
  }
  $54 = $handle;
  (_close($54)|0);
 }
 $55 = $bResult;
 $56 = $55&1;
 $57 = $56&1;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = (___errno_location()|0);
  $60 = HEAP32[$59>>2]|0;
  _SetLastError($60);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $61 = $$pre_trunc&1;
  STACKTOP = sp;return ($61|0);
 } else {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $61 = $$pre_trunc&1;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function __ZL12BaseMap_ReadP11TFileStreamPyPvj($pStream,$pByteOffset,$pvBuffer,$dwBytesToRead) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $ByteOffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 24|0;
 $ByteOffset = sp;
 $1 = $pStream;
 $2 = $pByteOffset;
 $3 = $pvBuffer;
 $4 = $dwBytesToRead;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $25 = $10;$28 = $13;
 } else {
  $14 = $1;
  $15 = ((($14)) + 64|0);
  $16 = ((($15)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $25 = $19;$28 = $22;
 }
 $23 = $ByteOffset;
 $24 = $23;
 HEAP32[$24>>2] = $25;
 $26 = (($23) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $28;
 $29 = $4;
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $ByteOffset;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = $4;
   $38 = (_i64Add(($33|0),($36|0),($37|0),0)|0);
   $39 = tempRet0;
   $40 = $1;
   $41 = ((($40)) + 64|0);
   $42 = $41;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = ($39>>>0)>($47>>>0);
   $49 = ($38>>>0)>($44>>>0);
   $50 = ($39|0)==($47|0);
   $51 = $50 & $49;
   $52 = $48 | $51;
   if (!($52)) {
    $53 = $3;
    $54 = $1;
    $55 = ((($54)) + 64|0);
    $56 = ((($55)) + 24|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $ByteOffset;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = (($58) + 4)|0;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    $64 = (($57) + ($60)|0);
    $65 = $4;
    _memcpy(($53|0),($64|0),($65|0))|0;
    break;
   }
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $82 = $$pre_trunc&1;
   STACKTOP = sp;return ($82|0);
  }
 } while(0);
 $66 = $4;
 $67 = $1;
 $68 = ((($67)) + 64|0);
 $69 = ((($68)) + 8|0);
 $70 = $69;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($70) + 4)|0;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (_i64Add(($72|0),($75|0),($66|0),0)|0);
 $77 = tempRet0;
 $78 = $69;
 $79 = $78;
 HEAP32[$79>>2] = $76;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = $77;
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $82 = $$pre_trunc&1;
 STACKTOP = sp;return ($82|0);
}
function __ZL13BaseMap_CloseP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 64|0);
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = ((($10)) + 64|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  (___munmap($9,$14)|0);
 }
 $18 = $0;
 $19 = ((($18)) + 64|0);
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL13BaseFile_ReadP11TFileStreamPyPvj($pStream,$pByteOffset,$pvBuffer,$dwBytesToRead) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ByteOffset = 0, $bytes_read = 0, $dwBytesRead = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 32|0;
 $ByteOffset = sp;
 $1 = $pStream;
 $2 = $pByteOffset;
 $3 = $pvBuffer;
 $4 = $dwBytesToRead;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $25 = $10;$28 = $13;
 } else {
  $14 = $1;
  $15 = ((($14)) + 64|0);
  $16 = ((($15)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $25 = $19;$28 = $22;
 }
 $23 = $ByteOffset;
 $24 = $23;
 HEAP32[$24>>2] = $25;
 $26 = (($23) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $28;
 $dwBytesRead = 0;
 $29 = $ByteOffset;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $1;
 $36 = ((($35)) + 64|0);
 $37 = ((($36)) + 8|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($31|0)!=($40|0);
 $45 = ($34|0)!=($43|0);
 $46 = $44 | $45;
 do {
  if ($46) {
   $47 = $1;
   $48 = ((($47)) + 64|0);
   $49 = ((($48)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50;
   $52 = $ByteOffset;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (_lseek($51,$54,0)|0);
   $59 = ($58|0)==(-1);
   if (!($59)) {
    $62 = $ByteOffset;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 4)|0;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = $1;
    $69 = ((($68)) + 64|0);
    $70 = ((($69)) + 8|0);
    $71 = $70;
    $72 = $71;
    HEAP32[$72>>2] = $64;
    $73 = (($71) + 4)|0;
    $74 = $73;
    HEAP32[$74>>2] = $67;
    break;
   }
   $60 = (___errno_location()|0);
   $61 = HEAP32[$60>>2]|0;
   _SetLastError($61);
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $112 = $$pre_trunc&1;
   STACKTOP = sp;return ($112|0);
  }
 } while(0);
 $75 = $4;
 $76 = ($75|0)!=(0);
 do {
  if ($76) {
   $77 = $1;
   $78 = ((($77)) + 64|0);
   $79 = ((($78)) + 24|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80;
   $82 = $3;
   $83 = $4;
   $84 = (_read($81,$82,$83)|0);
   $bytes_read = $84;
   $85 = $bytes_read;
   $86 = ($85|0)==(-1);
   if (!($86)) {
    $89 = $bytes_read;
    $dwBytesRead = $89;
    break;
   }
   $87 = (___errno_location()|0);
   $88 = HEAP32[$87>>2]|0;
   _SetLastError($88);
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $112 = $$pre_trunc&1;
   STACKTOP = sp;return ($112|0);
  }
 } while(0);
 $90 = $ByteOffset;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = $dwBytesRead;
 $97 = (_i64Add(($92|0),($95|0),($96|0),0)|0);
 $98 = tempRet0;
 $99 = $1;
 $100 = ((($99)) + 64|0);
 $101 = ((($100)) + 8|0);
 $102 = $101;
 $103 = $102;
 HEAP32[$103>>2] = $97;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $98;
 $106 = $dwBytesRead;
 $107 = $4;
 $108 = ($106|0)!=($107|0);
 if ($108) {
  _SetLastError(1002);
 }
 $109 = $dwBytesRead;
 $110 = $4;
 $111 = ($109|0)==($110|0);
 $$expand_i1_val4 = $111&1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $112 = $$pre_trunc&1;
 STACKTOP = sp;return ($112|0);
}
function __ZL14BaseFile_WriteP11TFileStreamPyPKvj($pStream,$pByteOffset,$pvBuffer,$dwBytesToWrite) {
 $pStream = $pStream|0;
 $pByteOffset = $pByteOffset|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToWrite = $dwBytesToWrite|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ByteOffset = 0, $bytes_written = 0, $dwBytesWritten = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 32|0;
 $ByteOffset = sp;
 $1 = $pStream;
 $2 = $pByteOffset;
 $3 = $pvBuffer;
 $4 = $dwBytesToWrite;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $25 = $10;$28 = $13;
 } else {
  $14 = $1;
  $15 = ((($14)) + 64|0);
  $16 = ((($15)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $25 = $19;$28 = $22;
 }
 $23 = $ByteOffset;
 $24 = $23;
 HEAP32[$24>>2] = $25;
 $26 = (($23) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $28;
 $dwBytesWritten = 0;
 $29 = $ByteOffset;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $1;
 $36 = ((($35)) + 64|0);
 $37 = ((($36)) + 8|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($31|0)!=($40|0);
 $45 = ($34|0)!=($43|0);
 $46 = $44 | $45;
 do {
  if ($46) {
   $47 = $1;
   $48 = ((($47)) + 64|0);
   $49 = ((($48)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50;
   $52 = $ByteOffset;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (_lseek($51,$54,0)|0);
   $59 = ($58|0)==(-1);
   if (!($59)) {
    $62 = $ByteOffset;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 4)|0;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = $1;
    $69 = ((($68)) + 64|0);
    $70 = ((($69)) + 8|0);
    $71 = $70;
    $72 = $71;
    HEAP32[$72>>2] = $64;
    $73 = (($71) + 4)|0;
    $74 = $73;
    HEAP32[$74>>2] = $67;
    break;
   }
   $60 = (___errno_location()|0);
   $61 = HEAP32[$60>>2]|0;
   _SetLastError($61);
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $147 = $$pre_trunc&1;
   STACKTOP = sp;return ($147|0);
  }
 } while(0);
 $75 = $1;
 $76 = ((($75)) + 64|0);
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78;
 $80 = $3;
 $81 = $4;
 $82 = (_write($79,$80,$81)|0);
 $bytes_written = $82;
 $83 = $bytes_written;
 $84 = ($83|0)==(-1);
 if ($84) {
  $85 = (___errno_location()|0);
  $86 = HEAP32[$85>>2]|0;
  _SetLastError($86);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $147 = $$pre_trunc&1;
  STACKTOP = sp;return ($147|0);
 }
 $87 = $bytes_written;
 $dwBytesWritten = $87;
 $88 = $ByteOffset;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = $dwBytesWritten;
 $95 = (_i64Add(($90|0),($93|0),($94|0),0)|0);
 $96 = tempRet0;
 $97 = $1;
 $98 = ((($97)) + 64|0);
 $99 = ((($98)) + 8|0);
 $100 = $99;
 $101 = $100;
 HEAP32[$101>>2] = $95;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = $96;
 $104 = $1;
 $105 = ((($104)) + 64|0);
 $106 = ((($105)) + 8|0);
 $107 = $106;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $1;
 $114 = ((($113)) + 64|0);
 $115 = $114;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = (($115) + 4)|0;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = ($112>>>0)>($120>>>0);
 $122 = ($109>>>0)>($117>>>0);
 $123 = ($112|0)==($120|0);
 $124 = $123 & $122;
 $125 = $121 | $124;
 if ($125) {
  $126 = $1;
  $127 = ((($126)) + 64|0);
  $128 = ((($127)) + 8|0);
  $129 = $128;
  $130 = $129;
  $131 = HEAP32[$130>>2]|0;
  $132 = (($129) + 4)|0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = $1;
  $136 = ((($135)) + 64|0);
  $137 = $136;
  $138 = $137;
  HEAP32[$138>>2] = $131;
  $139 = (($137) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = $134;
 }
 $141 = $dwBytesWritten;
 $142 = $4;
 $143 = ($141|0)!=($142|0);
 if ($143) {
  _SetLastError(28);
 }
 $144 = $dwBytesWritten;
 $145 = $4;
 $146 = ($144|0)==($145|0);
 $$expand_i1_val4 = $146&1;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $147 = $$pre_trunc&1;
 STACKTOP = sp;return ($147|0);
}
function __ZL15BaseFile_ResizeP11TFileStreamy($pStream,$0,$1) {
 $pStream = $pStream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $4 = sp;
 $3 = $pStream;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $10 = ((($9)) + 64|0);
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 $14 = $4;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_ftruncate($13,$16)|0);
 $21 = ($20|0)==(-1);
 if ($21) {
  $22 = (___errno_location()|0);
  $23 = HEAP32[$22>>2]|0;
  _SetLastError($23);
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $36 = $$pre_trunc&1;
  STACKTOP = sp;return ($36|0);
 } else {
  $24 = $4;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = ((($30)) + 64|0);
  $32 = $31;
  $33 = $32;
  HEAP32[$33>>2] = $26;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $29;
  $$expand_i1_val2 = 1;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $36 = $$pre_trunc&1;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZL14BaseFile_CloseP11TFileStream($pStream) {
 $pStream = $pStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pStream;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=((-1)|0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 64|0);
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
  (_close($10)|0);
 }
 $11 = $0;
 $12 = ((($11)) + 64|0);
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = (-1);
 STACKTOP = sp;return;
}
function __Z21ListFile_OpenExternalPKc($szListFile) {
 $szListFile = $szListFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FileSize = 0, $or$cond = 0, $pCache = 0, $pStream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $FileSize = sp;
 $0 = $szListFile;
 $pCache = 0;
 $1 = $FileSize;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = (__Z19FileStream_OpenFilePKcj($5,256)|0);
 $pStream = $6;
 $7 = $pStream;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $53 = $pCache;
  STACKTOP = sp;return ($53|0);
 }
 $9 = $pStream;
 (__Z18FileStream_GetSizeP11TFileStreamPy($9,$FileSize)|0);
 $10 = $FileSize;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (0)<($15>>>0);
 $17 = (0)<($12>>>0);
 $18 = (0)==($15|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = $FileSize;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)<(0);
 $28 = ($23>>>0)<=(805306368);
 $29 = ($26|0)==(0);
 $30 = $29 & $28;
 $31 = $27 | $30;
 $or$cond = $20 & $31;
 if ($or$cond) {
  $32 = $FileSize;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZL19CreateListFileCachej($34)|0);
  $pCache = $38;
  $39 = $pCache;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $pStream;
   $42 = $pCache;
   $43 = HEAP32[$42>>2]|0;
   $44 = $FileSize;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (__Z15FileStream_ReadP11TFileStreamPyPvj($41,0,$43,$46)|0);
   if (!($50)) {
    $51 = $pCache;
    __Z13ListFile_FreePv($51);
    $pCache = 0;
   }
  }
 }
 $52 = $pStream;
 __Z16FileStream_CloseP11TFileStream($52);
 $53 = $pCache;
 STACKTOP = sp;return ($53|0);
}
function __Z13ListFile_FreePv($pvListFile) {
 $pvListFile = $pvListFile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pvListFile;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _free($3);
 }
 STACKTOP = sp;return;
}
function __Z19ListFile_FromBufferPhj($pbBuffer,$cbBuffer) {
 $pbBuffer = $pbBuffer|0;
 $cbBuffer = $cbBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pbBuffer;
 $1 = $cbBuffer;
 $pCache = 0;
 $2 = $1;
 $3 = (__ZL19CreateListFileCachej($2)|0);
 $pCache = $3;
 $4 = $pCache;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $10 = $pCache;
  STACKTOP = sp;return ($10|0);
 }
 $6 = $pCache;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $1;
 _memcpy(($7|0),($8|0),($9|0))|0;
 $10 = $pCache;
 STACKTOP = sp;return ($10|0);
}
function __Z18ListFile_VerifyMD5PvPh($pvListFile,$pbHashMD5) {
 $pvListFile = $pvListFile|0;
 $pbHashMD5 = $pbHashMD5|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $pCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pvListFile;
 $1 = $pbHashMD5;
 $2 = $0;
 $pCache = $2;
 $3 = $pCache;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $pCache;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = $pCache;
  $10 = HEAP32[$9>>2]|0;
  $11 = $pCache;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $pCache;
  $15 = HEAP32[$14>>2]|0;
  $16 = $13;
  $17 = $15;
  $18 = (($16) - ($17))|0;
  $19 = $1;
  $20 = (__Z19VerifyDataBlockHashPvjPh($10,$18,$19)|0);
  STACKTOP = sp;return ($20|0);
 } else {
  ___assert_fail((16632|0),(16663|0),105,(16735|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z20ListFile_GetNextLinePvPPKcS2_($pvListFile,$pszLineBegin,$pszLineEnd) {
 $pvListFile = $pvListFile|0;
 $pszLineBegin = $pszLineBegin|0;
 $pszLineEnd = $pszLineEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $pCache = 0;
 var $szExtraString = 0, $szLineBegin = 0, $szLineEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pvListFile;
 $1 = $pszLineBegin;
 $2 = $pszLineEnd;
 $3 = $0;
 $pCache = $3;
 $szExtraString = 0;
 while(1) {
  $4 = $pCache;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $pCache;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  if ($10) {
   $11 = $pCache;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)<=(32);
   $78 = $16;
  } else {
   $78 = 0;
  }
  $17 = $pCache;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  if (!($78)) {
   break;
  }
  $20 = ((($19)) + 1|0);
  HEAP32[$18>>2] = $20;
 }
 $szLineBegin = $19;
 while(1) {
  $21 = $pCache;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $pCache;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $pCache;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(13);
  if ($33) {
   break;
  }
  $34 = $pCache;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)==(10);
  if ($39) {
   break;
  }
  $40 = $pCache;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)==(126);
  if ($45) {
   $46 = $pCache;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $szExtraString = $48;
  }
  $49 = $pCache;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 1|0);
  HEAP32[$50>>2] = $52;
 }
 $53 = $szExtraString;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $szExtraString;
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)==(126);
  if ($58) {
   $59 = $szExtraString;
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = ($62|0)==(80);
   if ($63) {
    $64 = $szExtraString;
    $68 = $64;
    $szLineEnd = $68;
    $69 = $szLineBegin;
    $70 = $1;
    HEAP32[$70>>2] = $69;
    $71 = $szLineEnd;
    $72 = $2;
    HEAP32[$72>>2] = $71;
    $73 = $szLineEnd;
    $74 = $szLineBegin;
    $75 = $73;
    $76 = $74;
    $77 = (($75) - ($76))|0;
    STACKTOP = sp;return ($77|0);
   }
  }
 }
 $65 = $pCache;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67;
 $szLineEnd = $68;
 $69 = $szLineBegin;
 $70 = $1;
 HEAP32[$70>>2] = $69;
 $71 = $szLineEnd;
 $72 = $2;
 HEAP32[$72>>2] = $71;
 $73 = $szLineEnd;
 $74 = $szLineBegin;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 STACKTOP = sp;return ($77|0);
}
function __Z20ListFile_GetNextLinePvPcj($pvListFile,$szBuffer,$nMaxChars) {
 $pvListFile = $pvListFile|0;
 $szBuffer = $szBuffer|0;
 $nMaxChars = $nMaxChars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLength = 0, $szLineBegin = 0, $szLineEnd = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $szLineBegin = sp + 8|0;
 $szLineEnd = sp + 4|0;
 $1 = $pvListFile;
 $2 = $szBuffer;
 $3 = $nMaxChars;
 HEAP32[$szLineBegin>>2] = 0;
 HEAP32[$szLineEnd>>2] = 0;
 $4 = $1;
 $5 = (__Z20ListFile_GetNextLinePvPPKcS2_($4,$szLineBegin,$szLineEnd)|0);
 $nLength = $5;
 $6 = $nLength;
 $7 = $3;
 $8 = ($6>>>0)>($7>>>0);
 if ($8) {
  _SetLastError(105);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = $2;
  $10 = HEAP32[$szLineBegin>>2]|0;
  $11 = $nLength;
  _memcpy(($9|0),($10|0),($11|0))|0;
  $12 = $nLength;
  $13 = $2;
  $14 = (($13) + ($12)|0);
  HEAP8[$14>>0] = 0;
  $15 = $nLength;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __Z16ListFile_GetNextPvPKcPcj($pvListFile,$szMask,$szBuffer,$nMaxChars) {
 $pvListFile = $pvListFile|0;
 $szMask = $szMask|0;
 $szBuffer = $szBuffer|0;
 $nMaxChars = $nMaxChars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $nLength = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pvListFile;
 $1 = $szMask;
 $2 = $szBuffer;
 $3 = $nMaxChars;
 $nLength = 0;
 $nError = 0;
 while(1) {
  $4 = $0;
  $5 = $2;
  $6 = $3;
  $7 = (__Z20ListFile_GetNextLinePvPcj($4,$5,$6)|0);
  $nLength = $7;
  $8 = $nLength;
  $9 = ($8|0)==(0);
  if ($9) {
   label = 3;
   break;
  }
  $10 = $2;
  $11 = $1;
  $12 = (__Z13CheckWildCardPKcS0_($10,$11)|0);
  if ($12) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  $nError = 1001;
 }
 else if ((label|0) == 5) {
  $nError = 0;
 }
 $13 = $nError;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $16 = $nLength;
  STACKTOP = sp;return ($16|0);
 }
 $15 = $nError;
 _SetLastError($15);
 $16 = $nLength;
 STACKTOP = sp;return ($16|0);
}
function __ZL19CreateListFileCachej($dwFileSize) {
 $dwFileSize = $dwFileSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pCache = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $dwFileSize;
 $1 = $0;
 $2 = (12 + ($1))|0;
 $3 = $2;
 $4 = (_malloc($3)|0);
 $pCache = $4;
 $5 = $pCache;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $18 = $pCache;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $pCache;
 $8 = ((($7)) + 12|0);
 $9 = $pCache;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $pCache;
 HEAP32[$11>>2] = $8;
 $12 = $pCache;
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = (($13) + ($14)|0);
 $16 = $pCache;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $pCache;
 STACKTOP = sp;return ($18|0);
}
function __Z10Map_Createjjj($dwMaxItems,$dwKeyLength,$dwKeyOffset) {
 $dwMaxItems = $dwMaxItems|0;
 $dwKeyLength = $dwKeyLength|0;
 $dwKeyOffset = $dwKeyOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cbToAllocate = 0, $dwTableSize = 0, $pMap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $dwMaxItems;
 $1 = $dwKeyLength;
 $2 = $dwKeyOffset;
 $3 = $0;
 $4 = ($3*3)|0;
 $5 = (($4>>>0) / 2)&-1;
 $6 = $5 | 1;
 $dwTableSize = $6;
 $7 = $dwTableSize;
 $8 = $7<<2;
 $9 = (20 + ($8))|0;
 $cbToAllocate = $9;
 $10 = $cbToAllocate;
 $11 = $10<<2;
 $12 = (_malloc($11)|0);
 $pMap = $12;
 $13 = $pMap;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $25 = $pMap;
  STACKTOP = sp;return ($25|0);
 }
 $15 = $pMap;
 $16 = $cbToAllocate;
 _memset(($15|0),0,($16|0))|0;
 $17 = $1;
 $18 = $pMap;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $dwTableSize;
 $21 = $pMap;
 HEAP32[$21>>2] = $20;
 $22 = $2;
 $23 = $pMap;
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $22;
 $25 = $pMap;
 STACKTOP = sp;return ($25|0);
}
function __Z14Map_FindObjectP9_CASC_MAPPvPj($pMap,$pvKey,$PtrIndex) {

debugger;
console.log("this.existingKeys = ", this.existingKeys, "getting keys ", Array.from(HEAP8.slice($pvKey,  $pvKey + 8)).map(a => {   if (a < 0)
    {
        a = 0xFFFFFFFF + a + 1;
    }

var hex = a.toString(16).toUpperCase();
    return hex.substr(hex.length-2, hex.length)}));
 $pMap = $pMap|0;
 $pvKey = $pvKey|0;
 $PtrIndex = $PtrIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwHashIndex = 0, $pvObject = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pMap;
 $2 = $pvKey;
 $3 = $PtrIndex;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 L1: do {
  if ($5) {
   $6 = $1;
   $7 = $2;
   $8 = (__ZL17CalcHashIndex_KeyP9_CASC_MAPPv($6,$7)|0);
   $dwHashIndex = $8;
   while(1) {
    $9 = $dwHashIndex;
    $10 = $1;
    $11 = ((($10)) + 16|0);
    $12 = (($11) + ($9<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)!=(0|0);
    if (!($14)) {
     break L1;
    }
    $15 = $dwHashIndex;
    $16 = $1;
    $17 = ((($16)) + 16|0);
    $18 = (($17) + ($15<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $pvObject = $19;
    $20 = $1;
    $21 = $pvObject;
    $22 = $2;
    $23 = (__ZL17CompareObject_KeyP9_CASC_MAPPvS1_($20,$21,$22)|0);
    if ($23) {
     break;
    }
    $29 = $dwHashIndex;
    $30 = (($29) + 1)|0;
    $31 = $1;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30>>>0) % ($32>>>0))&-1;
    $dwHashIndex = $33;
   }
   $24 = $3;
   $25 = ($24|0)!=(0|0);
   if ($25) {
    $26 = $dwHashIndex;
    $27 = $3;
    HEAP32[$27>>2] = $26;
   }
   $28 = $pvObject;
   $0 = $28;
   $34 = $0;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 $0 = 0;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __Z16Map_InsertObjectP9_CASC_MAPPvS1_($pMap,$pvNewObject,$pvKey) {
// console.log("inserting into hashtable "+ HEAP8.slice($pvKey,  $pvKey + 8));

if (!this.existingKeys) {
this.existingKeys = [];
}
this.existingKeys.push(Array.from(HEAP8.slice($pvKey,  $pvKey + 8)).map(a => {   if (a < 0)
    {
        a = 0xFFFFFFFF + a + 1;
    }

var hex = a.toString(16).toUpperCase();
    return hex.substr(hex.length-2, hex.length)}));
 $pMap = $pMap|0;
 $pvNewObject = $pvNewObject|0;
 $pvKey = $pvKey|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwHashIndex = 0, $pvExistingObject = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 20|0;
 $1 = $pMap;
 $2 = $pvNewObject;
 $3 = $pvKey;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $$expand_i1_val6 = 0;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $45 = $$pre_trunc&1;
  STACKTOP = sp;return ($45|0);
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>=($11>>>0);
 if ($12) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $45 = $$pre_trunc&1;
  STACKTOP = sp;return ($45|0);
 }
 $13 = $1;
 $14 = $3;
 $15 = (__ZL17CalcHashIndex_KeyP9_CASC_MAPPv($13,$14)|0);
 $dwHashIndex = $15;
 while(1) {
  $16 = $dwHashIndex;
  $17 = $1;
  $18 = ((($17)) + 16|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   label = 9;
   break;
  }
  $22 = $dwHashIndex;
  $23 = $1;
  $24 = ((($23)) + 16|0);
  $25 = (($24) + ($22<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $pvExistingObject = $26;
  $27 = $1;
  $28 = $pvExistingObject;
  $29 = $3;
  $30 = (__ZL17CompareObject_KeyP9_CASC_MAPPvS1_($27,$28,$29)|0);
  if ($30) {
   label = 7;
   break;
  }
  $31 = $dwHashIndex;
  $32 = (($31) + 1)|0;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32>>>0) % ($34>>>0))&-1;
  $dwHashIndex = $35;
 }
 if ((label|0) == 7) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $45 = $$pre_trunc&1;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 9) {
  $36 = $2;
  $37 = $dwHashIndex;
  $38 = $1;
  $39 = ((($38)) + 16|0);
  $40 = (($39) + ($37<<2)|0);
  HEAP32[$40>>2] = $36;
  $41 = $1;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$42>>2] = $44;
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $45 = $$pre_trunc&1;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __Z16Map_InsertStringP9_CASC_MAPPKcb($pMap,$szString,$bCutExtension) {
 $pMap = $pMap|0;
 $szString = $szString|0;
 $bCutExtension = $bCutExtension|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwHashIndex = 0, $szExistingString = 0, $szStringEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 21|0;
 $1 = $pMap;
 $2 = $szString;
 $4 = $bCutExtension&1;
 $3 = $4;
 $szStringEnd = 0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $$expand_i1_val6 = 0;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>=($12>>>0);
 if ($13) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 $14 = $3;
 $15 = $14&1;
 if ($15) {
  $16 = $2;
  $17 = (__ZL19String_GetExtensionPKc($16)|0);
  $szStringEnd = $17;
 }
 $18 = $szStringEnd;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $2;
  $21 = $2;
  $22 = (_strlen($21)|0);
  $23 = (($20) + ($22)|0);
  $szStringEnd = $23;
 }
 $24 = $1;
 $25 = $2;
 $26 = $szStringEnd;
 $27 = (__ZL20CalcHashIndex_StringP9_CASC_MAPPKcS2_($24,$25,$26)|0);
 $dwHashIndex = $27;
 while(1) {
  $28 = $dwHashIndex;
  $29 = $1;
  $30 = ((($29)) + 16|0);
  $31 = (($30) + ($28<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   label = 13;
   break;
  }
  $34 = $dwHashIndex;
  $35 = $1;
  $36 = ((($35)) + 16|0);
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $szExistingString = $38;
  $39 = $1;
  $40 = $szExistingString;
  $41 = $2;
  $42 = $szStringEnd;
  $43 = (__ZL20CompareObject_StringP9_CASC_MAPPKcS2_S2_($39,$40,$41,$42)|0);
  if ($43) {
   label = 11;
   break;
  }
  $44 = $dwHashIndex;
  $45 = (($44) + 1)|0;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45>>>0) % ($47>>>0))&-1;
  $dwHashIndex = $48;
 }
 if ((label|0) == 11) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 13) {
  $49 = $2;
  $50 = $dwHashIndex;
  $51 = $1;
  $52 = ((($51)) + 16|0);
  $53 = (($52) + ($50<<2)|0);
  HEAP32[$53>>2] = $49;
  $54 = $1;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[$55>>2] = $57;
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __Z14Map_FindStringP9_CASC_MAPPKcS2_($pMap,$szString,$szStringEnd) {
 $pMap = $pMap|0;
 $szString = $szString|0;
 $szStringEnd = $szStringEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwHashIndex = 0, $szExistingString = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pMap;
 $2 = $szString;
 $3 = $szStringEnd;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 L1: do {
  if ($5) {
   $6 = $1;
   $7 = $2;
   $8 = $3;
   $9 = (__ZL20CalcHashIndex_StringP9_CASC_MAPPKcS2_($6,$7,$8)|0);
   $dwHashIndex = $9;
   while(1) {
    $10 = $dwHashIndex;
    $11 = $1;
    $12 = ((($11)) + 16|0);
    $13 = (($12) + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)!=(0|0);
    if (!($15)) {
     break L1;
    }
    $16 = $dwHashIndex;
    $17 = $1;
    $18 = ((($17)) + 16|0);
    $19 = (($18) + ($16<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $szExistingString = $20;
    $21 = $1;
    $22 = $szExistingString;
    $23 = $2;
    $24 = $3;
    $25 = (__ZL20CompareObject_StringP9_CASC_MAPPKcS2_S2_($21,$22,$23,$24)|0);
    if ($25) {
     break;
    }
    $27 = $dwHashIndex;
    $28 = (($27) + 1)|0;
    $29 = $1;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28>>>0) % ($30>>>0))&-1;
    $dwHashIndex = $31;
   }
   $26 = $szExistingString;
   $0 = $26;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function __Z8Map_FreeP9_CASC_MAP($pMap) {
 $pMap = $pMap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pMap;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _free($3);
 }
 STACKTOP = sp;return;
}
function __ZL17CalcHashIndex_KeyP9_CASC_MAPPv($pMap,$pvKey) {
 $pMap = $pMap|0;
 $pvKey = $pvKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dwHash = 0, $pbKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pMap;
 $1 = $pvKey;
 $2 = $1;
 $pbKey = $2;
 $dwHash = 2129559278;
 $3 = $dwHash;
 $4 = $3 >>> 24;
 $5 = $dwHash;
 $6 = $5 << 5;
 $7 = $4 ^ $6;
 $8 = $dwHash;
 $9 = $7 ^ $8;
 $10 = $pbKey;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $9 ^ $12;
 $dwHash = $13;
 $14 = $dwHash;
 $15 = $14 >>> 24;
 $16 = $dwHash;
 $17 = $16 << 5;
 $18 = $15 ^ $17;
 $19 = $dwHash;
 $20 = $18 ^ $19;
 $21 = $pbKey;
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $20 ^ $24;
 $dwHash = $25;
 $26 = $dwHash;
 $27 = $26 >>> 24;
 $28 = $dwHash;
 $29 = $28 << 5;
 $30 = $27 ^ $29;
 $31 = $dwHash;
 $32 = $30 ^ $31;
 $33 = $pbKey;
 $34 = ((($33)) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $32 ^ $36;
 $dwHash = $37;
 $38 = $dwHash;
 $39 = $38 >>> 24;
 $40 = $dwHash;
 $41 = $40 << 5;
 $42 = $39 ^ $41;
 $43 = $dwHash;
 $44 = $42 ^ $43;
 $45 = $pbKey;
 $46 = ((($45)) + 3|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $44 ^ $48;
 $dwHash = $49;
 $50 = $dwHash;
 $51 = $50 >>> 24;
 $52 = $dwHash;
 $53 = $52 << 5;
 $54 = $51 ^ $53;
 $55 = $dwHash;
 $56 = $54 ^ $55;
 $57 = $pbKey;
 $58 = ((($57)) + 4|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $56 ^ $60;
 $dwHash = $61;
 $62 = $dwHash;
 $63 = $62 >>> 24;
 $64 = $dwHash;
 $65 = $64 << 5;
 $66 = $63 ^ $65;
 $67 = $dwHash;
 $68 = $66 ^ $67;
 $69 = $pbKey;
 $70 = ((($69)) + 5|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $68 ^ $72;
 $dwHash = $73;
 $74 = $dwHash;
 $75 = $74 >>> 24;
 $76 = $dwHash;
 $77 = $76 << 5;
 $78 = $75 ^ $77;
 $79 = $dwHash;
 $80 = $78 ^ $79;
 $81 = $pbKey;
 $82 = ((($81)) + 6|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = $80 ^ $84;
 $dwHash = $85;
 $86 = $dwHash;
 $87 = $86 >>> 24;
 $88 = $dwHash;
 $89 = $88 << 5;
 $90 = $87 ^ $89;
 $91 = $dwHash;
 $92 = $90 ^ $91;
 $93 = $pbKey;
 $94 = ((($93)) + 7|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = $92 ^ $96;
 $dwHash = $97;
 $98 = $dwHash;
 $99 = $0;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98>>>0) % ($100>>>0))&-1;
 STACKTOP = sp;return ($101|0);
}
function __ZL17CompareObject_KeyP9_CASC_MAPPvS1_($pMap,$pvObject,$pvKey) {
 $pMap = $pMap|0;
 $pvObject = $pvObject|0;
 $pvKey = $pvKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pbObjectKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pMap;
 $1 = $pvObject;
 $2 = $pvKey;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $pbObjectKey = $7;
 $8 = $pbObjectKey;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_memcmp($8,$9,$12)|0);
 $14 = ($13|0)==(0);
 STACKTOP = sp;return ($14|0);
}
function __ZL19String_GetExtensionPKc($szString) {
 $szString = $szString|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $szExtension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szString;
 $1 = $0;
 $2 = (_strrchr($1,46)|0);
 $szExtension = $2;
 $3 = $szExtension;
 $4 = ($3|0)!=(0|0);
 $5 = $szExtension;
 $6 = ((($5)) + 1|0);
 $7 = $4 ? $6 : 0;
 STACKTOP = sp;return ($7|0);
}
function __ZL20CalcHashIndex_StringP9_CASC_MAPPKcS2_($pMap,$szString,$szStringEnd) {
 $pMap = $pMap|0;
 $szString = $szString|0;
 $szStringEnd = $szStringEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwHash = 0, $pbKey = 0, $pbKeyEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pMap;
 $1 = $szString;
 $2 = $szStringEnd;
 $3 = $2;
 $pbKeyEnd = $3;
 $4 = $1;
 $pbKey = $4;
 $dwHash = 2129559278;
 while(1) {
  $5 = $pbKey;
  $6 = $pbKeyEnd;
  $7 = ($5>>>0)<($6>>>0);
  $8 = $dwHash;
  if (!($7)) {
   break;
  }
  $9 = $8 >>> 24;
  $10 = $dwHash;
  $11 = $10 << 5;
  $12 = $9 ^ $11;
  $13 = $dwHash;
  $14 = $12 ^ $13;
  $15 = $pbKey;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (13838 + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $14 ^ $20;
  $dwHash = $21;
  $22 = $pbKey;
  $23 = ((($22)) + 1|0);
  $pbKey = $23;
 }
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($8>>>0) % ($25>>>0))&-1;
 STACKTOP = sp;return ($26|0);
}
function __ZL20CompareObject_StringP9_CASC_MAPPKcS2_S2_($pMap,$szExistingString,$szString,$szStringEnd) {
 $pMap = $pMap|0;
 $szExistingString = $szExistingString|0;
 $szString = $szString|0;
 $szStringEnd = $szStringEnd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 16|0;
 $1 = $pMap;
 $2 = $szExistingString;
 $3 = $szString;
 $4 = $szStringEnd;
 while(1) {
  $5 = $3;
  $6 = $4;
  $7 = ($5>>>0)<($6>>>0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $2;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = (13838 + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $3;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (13838 + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($13|0)!=($19|0);
  if ($20) {
   label = 4;
   break;
  }
  $21 = $2;
  $22 = ((($21)) + 1|0);
  $2 = $22;
  $23 = $3;
  $24 = ((($23)) + 1|0);
  $3 = $24;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $25 = $$pre_trunc&1;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $25 = $$pre_trunc&1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __Z18RootHandler_InsertP12TRootHandlerPKcPh($pRootHandler,$szFileName,$pbEncodingKey) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 $pbEncodingKey = $pbEncodingKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $pbEncodingKey;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $1;
   $10 = HEAP32[$9>>2]|0;
   $11 = $1;
   $12 = $2;
   $13 = $3;
   $14 = (FUNCTION_TABLE_iiii[$10 & 127]($11,$12,$13)|0);
   $0 = $14;
   $15 = $0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $0 = 95;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __Z18RootHandler_SearchP12TRootHandlerP12_TCascSearchPjS3_S3_($pRootHandler,$pSearch,$PtrFileSize,$PtrLocaleFlags,$PtrFileDataId) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 $PtrFileSize = $PtrFileSize|0;
 $PtrLocaleFlags = $PtrLocaleFlags|0;
 $PtrFileDataId = $PtrFileDataId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pRootHandler;
 $2 = $pSearch;
 $3 = $PtrFileSize;
 $4 = $PtrLocaleFlags;
 $5 = $PtrFileDataId;
 $6 = $1;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = $4;
  $15 = $5;
  $16 = (FUNCTION_TABLE_iiiiii[$10 & 127]($11,$12,$13,$14,$15)|0);
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __Z21RootHandler_EndSearchP12TRootHandlerP12_TCascSearch($pRootHandler,$pSearch) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $pSearch;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $1;
 FUNCTION_TABLE_vii[$6 & 255]($7,$8);
 STACKTOP = sp;return;
}
function __Z18RootHandler_GetKeyP12TRootHandlerPKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $5 = $1;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = $2;
  $10 = (FUNCTION_TABLE_iii[$7 & 127]($8,$9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __Z17RootHandler_CloseP12TRootHandler($pRootHandler) {
 $pRootHandler = $pRootHandler|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 FUNCTION_TABLE_vi[$5 & 255]($6);
 STACKTOP = sp;return;
}
function __Z21RootHandler_GetFileIdP12TRootHandlerPKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $5 = $1;
  $6 = ((($5)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = $2;
  $10 = (FUNCTION_TABLE_iii[$7 & 127]($8,$9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _hashlittle($key,$length,$initval) {
 $key = $key|0;
 $length = $length|0;
 $initval = $initval|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $c = 0, $k = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $u = sp + 4|0;
 $1 = $key;
 $2 = $length;
 $3 = $initval;
 $4 = $2;
 $5 = (-559038737 + ($4))|0;
 $6 = $3;
 $7 = (($5) + ($6))|0;
 $c = $7;
 $b = $7;
 $a = $7;
 $8 = $1;
 HEAP32[$u>>2] = $8;
 $9 = $1;
 $k = $9;
 while(1) {
  $10 = $2;
  $11 = ($10>>>0)>(12);
  if (!($11)) {
   break;
  }
  $12 = $k;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $a;
  $16 = (($15) + ($14))|0;
  $a = $16;
  $17 = $k;
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 8;
  $22 = $a;
  $23 = (($22) + ($21))|0;
  $a = $23;
  $24 = $k;
  $25 = ((($24)) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 16;
  $29 = $a;
  $30 = (($29) + ($28))|0;
  $a = $30;
  $31 = $k;
  $32 = ((($31)) + 3|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 << 24;
  $36 = $a;
  $37 = (($36) + ($35))|0;
  $a = $37;
  $38 = $k;
  $39 = ((($38)) + 4|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $b;
  $43 = (($42) + ($41))|0;
  $b = $43;
  $44 = $k;
  $45 = ((($44)) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 << 8;
  $49 = $b;
  $50 = (($49) + ($48))|0;
  $b = $50;
  $51 = $k;
  $52 = ((($51)) + 6|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $54 << 16;
  $56 = $b;
  $57 = (($56) + ($55))|0;
  $b = $57;
  $58 = $k;
  $59 = ((($58)) + 7|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 << 24;
  $63 = $b;
  $64 = (($63) + ($62))|0;
  $b = $64;
  $65 = $k;
  $66 = ((($65)) + 8|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $c;
  $70 = (($69) + ($68))|0;
  $c = $70;
  $71 = $k;
  $72 = ((($71)) + 9|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 8;
  $76 = $c;
  $77 = (($76) + ($75))|0;
  $c = $77;
  $78 = $k;
  $79 = ((($78)) + 10|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 << 16;
  $83 = $c;
  $84 = (($83) + ($82))|0;
  $c = $84;
  $85 = $k;
  $86 = ((($85)) + 11|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $88 << 24;
  $90 = $c;
  $91 = (($90) + ($89))|0;
  $c = $91;
  $92 = $c;
  $93 = $a;
  $94 = (($93) - ($92))|0;
  $a = $94;
  $95 = $c;
  $96 = $95 << 4;
  $97 = $c;
  $98 = $97 >>> 28;
  $99 = $96 | $98;
  $100 = $a;
  $101 = $100 ^ $99;
  $a = $101;
  $102 = $b;
  $103 = $c;
  $104 = (($103) + ($102))|0;
  $c = $104;
  $105 = $a;
  $106 = $b;
  $107 = (($106) - ($105))|0;
  $b = $107;
  $108 = $a;
  $109 = $108 << 6;
  $110 = $a;
  $111 = $110 >>> 26;
  $112 = $109 | $111;
  $113 = $b;
  $114 = $113 ^ $112;
  $b = $114;
  $115 = $c;
  $116 = $a;
  $117 = (($116) + ($115))|0;
  $a = $117;
  $118 = $b;
  $119 = $c;
  $120 = (($119) - ($118))|0;
  $c = $120;
  $121 = $b;
  $122 = $121 << 8;
  $123 = $b;
  $124 = $123 >>> 24;
  $125 = $122 | $124;
  $126 = $c;
  $127 = $126 ^ $125;
  $c = $127;
  $128 = $a;
  $129 = $b;
  $130 = (($129) + ($128))|0;
  $b = $130;
  $131 = $c;
  $132 = $a;
  $133 = (($132) - ($131))|0;
  $a = $133;
  $134 = $c;
  $135 = $134 << 16;
  $136 = $c;
  $137 = $136 >>> 16;
  $138 = $135 | $137;
  $139 = $a;
  $140 = $139 ^ $138;
  $a = $140;
  $141 = $b;
  $142 = $c;
  $143 = (($142) + ($141))|0;
  $c = $143;
  $144 = $a;
  $145 = $b;
  $146 = (($145) - ($144))|0;
  $b = $146;
  $147 = $a;
  $148 = $147 << 19;
  $149 = $a;
  $150 = $149 >>> 13;
  $151 = $148 | $150;
  $152 = $b;
  $153 = $152 ^ $151;
  $b = $153;
  $154 = $c;
  $155 = $a;
  $156 = (($155) + ($154))|0;
  $a = $156;
  $157 = $b;
  $158 = $c;
  $159 = (($158) - ($157))|0;
  $c = $159;
  $160 = $b;
  $161 = $160 << 4;
  $162 = $b;
  $163 = $162 >>> 28;
  $164 = $161 | $163;
  $165 = $c;
  $166 = $165 ^ $164;
  $c = $166;
  $167 = $a;
  $168 = $b;
  $169 = (($168) + ($167))|0;
  $b = $169;
  $170 = $2;
  $171 = (($170) - 12)|0;
  $2 = $171;
  $172 = $k;
  $173 = ((($172)) + 12|0);
  $k = $173;
 }
 $174 = $2;
 switch ($174|0) {
 case 12:  {
  $175 = $k;
  $176 = ((($175)) + 11|0);
  $177 = HEAP8[$176>>0]|0;
  $178 = $177&255;
  $179 = $178 << 24;
  $180 = $c;
  $181 = (($180) + ($179))|0;
  $c = $181;
  label = 6;
  break;
 }
 case 11:  {
  label = 6;
  break;
 }
 case 10:  {
  label = 7;
  break;
 }
 case 9:  {
  label = 8;
  break;
 }
 case 8:  {
  label = 9;
  break;
 }
 case 7:  {
  label = 10;
  break;
 }
 case 6:  {
  label = 11;
  break;
 }
 case 5:  {
  label = 12;
  break;
 }
 case 4:  {
  label = 13;
  break;
 }
 case 3:  {
  label = 14;
  break;
 }
 case 2:  {
  label = 15;
  break;
 }
 case 1:  {
  label = 16;
  break;
 }
 case 0:  {
  $255 = $c;
  $0 = $255;
  $327 = $0;
  STACKTOP = sp;return ($327|0);
  break;
 }
 default: {
 }
 }
 if ((label|0) == 6) {
  $182 = $k;
  $183 = ((($182)) + 10|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $185 << 16;
  $187 = $c;
  $188 = (($187) + ($186))|0;
  $c = $188;
  label = 7;
 }
 if ((label|0) == 7) {
  $189 = $k;
  $190 = ((($189)) + 9|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = $191&255;
  $193 = $192 << 8;
  $194 = $c;
  $195 = (($194) + ($193))|0;
  $c = $195;
  label = 8;
 }
 if ((label|0) == 8) {
  $196 = $k;
  $197 = ((($196)) + 8|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $c;
  $201 = (($200) + ($199))|0;
  $c = $201;
  label = 9;
 }
 if ((label|0) == 9) {
  $202 = $k;
  $203 = ((($202)) + 7|0);
  $204 = HEAP8[$203>>0]|0;
  $205 = $204&255;
  $206 = $205 << 24;
  $207 = $b;
  $208 = (($207) + ($206))|0;
  $b = $208;
  label = 10;
 }
 if ((label|0) == 10) {
  $209 = $k;
  $210 = ((($209)) + 6|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&255;
  $213 = $212 << 16;
  $214 = $b;
  $215 = (($214) + ($213))|0;
  $b = $215;
  label = 11;
 }
 if ((label|0) == 11) {
  $216 = $k;
  $217 = ((($216)) + 5|0);
  $218 = HEAP8[$217>>0]|0;
  $219 = $218&255;
  $220 = $219 << 8;
  $221 = $b;
  $222 = (($221) + ($220))|0;
  $b = $222;
  label = 12;
 }
 if ((label|0) == 12) {
  $223 = $k;
  $224 = ((($223)) + 4|0);
  $225 = HEAP8[$224>>0]|0;
  $226 = $225&255;
  $227 = $b;
  $228 = (($227) + ($226))|0;
  $b = $228;
  label = 13;
 }
 if ((label|0) == 13) {
  $229 = $k;
  $230 = ((($229)) + 3|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = $232 << 24;
  $234 = $a;
  $235 = (($234) + ($233))|0;
  $a = $235;
  label = 14;
 }
 if ((label|0) == 14) {
  $236 = $k;
  $237 = ((($236)) + 2|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = $238&255;
  $240 = $239 << 16;
  $241 = $a;
  $242 = (($241) + ($240))|0;
  $a = $242;
  label = 15;
 }
 if ((label|0) == 15) {
  $243 = $k;
  $244 = ((($243)) + 1|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = $246 << 8;
  $248 = $a;
  $249 = (($248) + ($247))|0;
  $a = $249;
  label = 16;
 }
 if ((label|0) == 16) {
  $250 = $k;
  $251 = HEAP8[$250>>0]|0;
  $252 = $251&255;
  $253 = $a;
  $254 = (($253) + ($252))|0;
  $a = $254;
 }
 $256 = $b;
 $257 = $c;
 $258 = $257 ^ $256;
 $c = $258;
 $259 = $b;
 $260 = $259 << 14;
 $261 = $b;
 $262 = $261 >>> 18;
 $263 = $260 | $262;
 $264 = $c;
 $265 = (($264) - ($263))|0;
 $c = $265;
 $266 = $c;
 $267 = $a;
 $268 = $267 ^ $266;
 $a = $268;
 $269 = $c;
 $270 = $269 << 11;
 $271 = $c;
 $272 = $271 >>> 21;
 $273 = $270 | $272;
 $274 = $a;
 $275 = (($274) - ($273))|0;
 $a = $275;
 $276 = $a;
 $277 = $b;
 $278 = $277 ^ $276;
 $b = $278;
 $279 = $a;
 $280 = $279 << 25;
 $281 = $a;
 $282 = $281 >>> 7;
 $283 = $280 | $282;
 $284 = $b;
 $285 = (($284) - ($283))|0;
 $b = $285;
 $286 = $b;
 $287 = $c;
 $288 = $287 ^ $286;
 $c = $288;
 $289 = $b;
 $290 = $289 << 16;
 $291 = $b;
 $292 = $291 >>> 16;
 $293 = $290 | $292;
 $294 = $c;
 $295 = (($294) - ($293))|0;
 $c = $295;
 $296 = $c;
 $297 = $a;
 $298 = $297 ^ $296;
 $a = $298;
 $299 = $c;
 $300 = $299 << 4;
 $301 = $c;
 $302 = $301 >>> 28;
 $303 = $300 | $302;
 $304 = $a;
 $305 = (($304) - ($303))|0;
 $a = $305;
 $306 = $a;
 $307 = $b;
 $308 = $307 ^ $306;
 $b = $308;
 $309 = $a;
 $310 = $309 << 14;
 $311 = $a;
 $312 = $311 >>> 18;
 $313 = $310 | $312;
 $314 = $b;
 $315 = (($314) - ($313))|0;
 $b = $315;
 $316 = $b;
 $317 = $c;
 $318 = $317 ^ $316;
 $c = $318;
 $319 = $b;
 $320 = $319 << 24;
 $321 = $b;
 $322 = $321 >>> 8;
 $323 = $320 | $322;
 $324 = $c;
 $325 = (($324) - ($323))|0;
 $c = $325;
 $326 = $c;
 $0 = $326;
 $327 = $0;
 STACKTOP = sp;return ($327|0);
}
function _hashlittle2($key,$length,$pc,$pb) {
 $key = $key|0;
 $length = $length|0;
 $pc = $pc|0;
 $pb = $pb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0;
 var $c = 0, $k = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $u = sp + 4|0;
 $0 = $key;
 $1 = $length;
 $2 = $pc;
 $3 = $pb;
 $4 = $1;
 $5 = (-559038737 + ($4))|0;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7))|0;
 $c = $8;
 $b = $8;
 $a = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = $c;
 $12 = (($11) + ($10))|0;
 $c = $12;
 $13 = $0;
 HEAP32[$u>>2] = $13;
 $14 = $0;
 $k = $14;
 while(1) {
  $15 = $1;
  $16 = ($15>>>0)>(12);
  if (!($16)) {
   break;
  }
  $17 = $k;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $a;
  $21 = (($20) + ($19))|0;
  $a = $21;
  $22 = $k;
  $23 = ((($22)) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 << 8;
  $27 = $a;
  $28 = (($27) + ($26))|0;
  $a = $28;
  $29 = $k;
  $30 = ((($29)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 16;
  $34 = $a;
  $35 = (($34) + ($33))|0;
  $a = $35;
  $36 = $k;
  $37 = ((($36)) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 << 24;
  $41 = $a;
  $42 = (($41) + ($40))|0;
  $a = $42;
  $43 = $k;
  $44 = ((($43)) + 4|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $b;
  $48 = (($47) + ($46))|0;
  $b = $48;
  $49 = $k;
  $50 = ((($49)) + 5|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $52 << 8;
  $54 = $b;
  $55 = (($54) + ($53))|0;
  $b = $55;
  $56 = $k;
  $57 = ((($56)) + 6|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $59 << 16;
  $61 = $b;
  $62 = (($61) + ($60))|0;
  $b = $62;
  $63 = $k;
  $64 = ((($63)) + 7|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $66 << 24;
  $68 = $b;
  $69 = (($68) + ($67))|0;
  $b = $69;
  $70 = $k;
  $71 = ((($70)) + 8|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $c;
  $75 = (($74) + ($73))|0;
  $c = $75;
  $76 = $k;
  $77 = ((($76)) + 9|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79 << 8;
  $81 = $c;
  $82 = (($81) + ($80))|0;
  $c = $82;
  $83 = $k;
  $84 = ((($83)) + 10|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $86 << 16;
  $88 = $c;
  $89 = (($88) + ($87))|0;
  $c = $89;
  $90 = $k;
  $91 = ((($90)) + 11|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 << 24;
  $95 = $c;
  $96 = (($95) + ($94))|0;
  $c = $96;
  $97 = $c;
  $98 = $a;
  $99 = (($98) - ($97))|0;
  $a = $99;
  $100 = $c;
  $101 = $100 << 4;
  $102 = $c;
  $103 = $102 >>> 28;
  $104 = $101 | $103;
  $105 = $a;
  $106 = $105 ^ $104;
  $a = $106;
  $107 = $b;
  $108 = $c;
  $109 = (($108) + ($107))|0;
  $c = $109;
  $110 = $a;
  $111 = $b;
  $112 = (($111) - ($110))|0;
  $b = $112;
  $113 = $a;
  $114 = $113 << 6;
  $115 = $a;
  $116 = $115 >>> 26;
  $117 = $114 | $116;
  $118 = $b;
  $119 = $118 ^ $117;
  $b = $119;
  $120 = $c;
  $121 = $a;
  $122 = (($121) + ($120))|0;
  $a = $122;
  $123 = $b;
  $124 = $c;
  $125 = (($124) - ($123))|0;
  $c = $125;
  $126 = $b;
  $127 = $126 << 8;
  $128 = $b;
  $129 = $128 >>> 24;
  $130 = $127 | $129;
  $131 = $c;
  $132 = $131 ^ $130;
  $c = $132;
  $133 = $a;
  $134 = $b;
  $135 = (($134) + ($133))|0;
  $b = $135;
  $136 = $c;
  $137 = $a;
  $138 = (($137) - ($136))|0;
  $a = $138;
  $139 = $c;
  $140 = $139 << 16;
  $141 = $c;
  $142 = $141 >>> 16;
  $143 = $140 | $142;
  $144 = $a;
  $145 = $144 ^ $143;
  $a = $145;
  $146 = $b;
  $147 = $c;
  $148 = (($147) + ($146))|0;
  $c = $148;
  $149 = $a;
  $150 = $b;
  $151 = (($150) - ($149))|0;
  $b = $151;
  $152 = $a;
  $153 = $152 << 19;
  $154 = $a;
  $155 = $154 >>> 13;
  $156 = $153 | $155;
  $157 = $b;
  $158 = $157 ^ $156;
  $b = $158;
  $159 = $c;
  $160 = $a;
  $161 = (($160) + ($159))|0;
  $a = $161;
  $162 = $b;
  $163 = $c;
  $164 = (($163) - ($162))|0;
  $c = $164;
  $165 = $b;
  $166 = $165 << 4;
  $167 = $b;
  $168 = $167 >>> 28;
  $169 = $166 | $168;
  $170 = $c;
  $171 = $170 ^ $169;
  $c = $171;
  $172 = $a;
  $173 = $b;
  $174 = (($173) + ($172))|0;
  $b = $174;
  $175 = $1;
  $176 = (($175) - 12)|0;
  $1 = $176;
  $177 = $k;
  $178 = ((($177)) + 12|0);
  $k = $178;
 }
 $179 = $1;
 switch ($179|0) {
 case 12:  {
  $180 = $k;
  $181 = ((($180)) + 11|0);
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $183 << 24;
  $185 = $c;
  $186 = (($185) + ($184))|0;
  $c = $186;
  label = 6;
  break;
 }
 case 11:  {
  label = 6;
  break;
 }
 case 10:  {
  label = 7;
  break;
 }
 case 9:  {
  label = 8;
  break;
 }
 case 8:  {
  label = 9;
  break;
 }
 case 7:  {
  label = 10;
  break;
 }
 case 6:  {
  label = 11;
  break;
 }
 case 5:  {
  label = 12;
  break;
 }
 case 4:  {
  label = 13;
  break;
 }
 case 3:  {
  label = 14;
  break;
 }
 case 2:  {
  label = 15;
  break;
 }
 case 1:  {
  label = 16;
  break;
 }
 case 0:  {
  $260 = $c;
  $261 = $2;
  HEAP32[$261>>2] = $260;
  $262 = $b;
  $263 = $3;
  HEAP32[$263>>2] = $262;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 6) {
  $187 = $k;
  $188 = ((($187)) + 10|0);
  $189 = HEAP8[$188>>0]|0;
  $190 = $189&255;
  $191 = $190 << 16;
  $192 = $c;
  $193 = (($192) + ($191))|0;
  $c = $193;
  label = 7;
 }
 if ((label|0) == 7) {
  $194 = $k;
  $195 = ((($194)) + 9|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = $196&255;
  $198 = $197 << 8;
  $199 = $c;
  $200 = (($199) + ($198))|0;
  $c = $200;
  label = 8;
 }
 if ((label|0) == 8) {
  $201 = $k;
  $202 = ((($201)) + 8|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $c;
  $206 = (($205) + ($204))|0;
  $c = $206;
  label = 9;
 }
 if ((label|0) == 9) {
  $207 = $k;
  $208 = ((($207)) + 7|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&255;
  $211 = $210 << 24;
  $212 = $b;
  $213 = (($212) + ($211))|0;
  $b = $213;
  label = 10;
 }
 if ((label|0) == 10) {
  $214 = $k;
  $215 = ((($214)) + 6|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216&255;
  $218 = $217 << 16;
  $219 = $b;
  $220 = (($219) + ($218))|0;
  $b = $220;
  label = 11;
 }
 if ((label|0) == 11) {
  $221 = $k;
  $222 = ((($221)) + 5|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 << 8;
  $226 = $b;
  $227 = (($226) + ($225))|0;
  $b = $227;
  label = 12;
 }
 if ((label|0) == 12) {
  $228 = $k;
  $229 = ((($228)) + 4|0);
  $230 = HEAP8[$229>>0]|0;
  $231 = $230&255;
  $232 = $b;
  $233 = (($232) + ($231))|0;
  $b = $233;
  label = 13;
 }
 if ((label|0) == 13) {
  $234 = $k;
  $235 = ((($234)) + 3|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = $237 << 24;
  $239 = $a;
  $240 = (($239) + ($238))|0;
  $a = $240;
  label = 14;
 }
 if ((label|0) == 14) {
  $241 = $k;
  $242 = ((($241)) + 2|0);
  $243 = HEAP8[$242>>0]|0;
  $244 = $243&255;
  $245 = $244 << 16;
  $246 = $a;
  $247 = (($246) + ($245))|0;
  $a = $247;
  label = 15;
 }
 if ((label|0) == 15) {
  $248 = $k;
  $249 = ((($248)) + 1|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $250&255;
  $252 = $251 << 8;
  $253 = $a;
  $254 = (($253) + ($252))|0;
  $a = $254;
  label = 16;
 }
 if ((label|0) == 16) {
  $255 = $k;
  $256 = HEAP8[$255>>0]|0;
  $257 = $256&255;
  $258 = $a;
  $259 = (($258) + ($257))|0;
  $a = $259;
 }
 $264 = $b;
 $265 = $c;
 $266 = $265 ^ $264;
 $c = $266;
 $267 = $b;
 $268 = $267 << 14;
 $269 = $b;
 $270 = $269 >>> 18;
 $271 = $268 | $270;
 $272 = $c;
 $273 = (($272) - ($271))|0;
 $c = $273;
 $274 = $c;
 $275 = $a;
 $276 = $275 ^ $274;
 $a = $276;
 $277 = $c;
 $278 = $277 << 11;
 $279 = $c;
 $280 = $279 >>> 21;
 $281 = $278 | $280;
 $282 = $a;
 $283 = (($282) - ($281))|0;
 $a = $283;
 $284 = $a;
 $285 = $b;
 $286 = $285 ^ $284;
 $b = $286;
 $287 = $a;
 $288 = $287 << 25;
 $289 = $a;
 $290 = $289 >>> 7;
 $291 = $288 | $290;
 $292 = $b;
 $293 = (($292) - ($291))|0;
 $b = $293;
 $294 = $b;
 $295 = $c;
 $296 = $295 ^ $294;
 $c = $296;
 $297 = $b;
 $298 = $297 << 16;
 $299 = $b;
 $300 = $299 >>> 16;
 $301 = $298 | $300;
 $302 = $c;
 $303 = (($302) - ($301))|0;
 $c = $303;
 $304 = $c;
 $305 = $a;
 $306 = $305 ^ $304;
 $a = $306;
 $307 = $c;
 $308 = $307 << 4;
 $309 = $c;
 $310 = $309 >>> 28;
 $311 = $308 | $310;
 $312 = $a;
 $313 = (($312) - ($311))|0;
 $a = $313;
 $314 = $a;
 $315 = $b;
 $316 = $315 ^ $314;
 $b = $316;
 $317 = $a;
 $318 = $317 << 14;
 $319 = $a;
 $320 = $319 >>> 18;
 $321 = $318 | $320;
 $322 = $b;
 $323 = (($322) - ($321))|0;
 $b = $323;
 $324 = $b;
 $325 = $c;
 $326 = $325 ^ $324;
 $c = $326;
 $327 = $b;
 $328 = $327 << 24;
 $329 = $b;
 $330 = $329 >>> 8;
 $331 = $328 | $330;
 $332 = $c;
 $333 = (($332) - ($331))|0;
 $c = $333;
 $334 = $c;
 $335 = $2;
 HEAP32[$335>>2] = $334;
 $336 = $b;
 $337 = $3;
 HEAP32[$337>>2] = $336;
 STACKTOP = sp;return;
}
function __Z23ConvertBytesToInteger_3Ph($ValueAsBytes) {
 $ValueAsBytes = $ValueAsBytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $Value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $ValueAsBytes;
 $Value = 0;
 $1 = $Value;
 $2 = $1 << 8;
 $3 = $0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2 | $5;
 $Value = $6;
 $7 = $Value;
 $8 = $7 << 8;
 $9 = $0;
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $8 | $12;
 $Value = $13;
 $14 = $Value;
 $15 = $14 << 8;
 $16 = $0;
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $15 | $19;
 $Value = $20;
 $21 = $Value;
 STACKTOP = sp;return ($21|0);
}
function __Z23ConvertBytesToInteger_4Ph($ValueAsBytes) {
 $ValueAsBytes = $ValueAsBytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $ValueAsBytes;
 $Value = 0;
 $1 = $Value;
 $2 = $1 << 8;
 $3 = $0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2 | $5;
 $Value = $6;
 $7 = $Value;
 $8 = $7 << 8;
 $9 = $0;
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $8 | $12;
 $Value = $13;
 $14 = $Value;
 $15 = $14 << 8;
 $16 = $0;
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $15 | $19;
 $Value = $20;
 $21 = $Value;
 $22 = $21 << 8;
 $23 = $0;
 $24 = ((($23)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $22 | $26;
 $Value = $27;
 $28 = $Value;
 STACKTOP = sp;return ($28|0);
}
function __Z26ConvertBytesToInteger_4_LEPh($ValueAsBytes) {
 $ValueAsBytes = $ValueAsBytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $ValueAsBytes;
 $Value = 0;
 $1 = $Value;
 $2 = $1 << 8;
 $3 = $0;
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $2 | $6;
 $Value = $7;
 $8 = $Value;
 $9 = $8 << 8;
 $10 = $0;
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $9 | $13;
 $Value = $14;
 $15 = $Value;
 $16 = $15 << 8;
 $17 = $0;
 $18 = ((($17)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $16 | $20;
 $Value = $21;
 $22 = $Value;
 $23 = $22 << 8;
 $24 = $0;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $23 | $26;
 $Value = $27;
 $28 = $Value;
 STACKTOP = sp;return ($28|0);
}
function __Z23ConvertBytesToInteger_5Ph($ValueAsBytes) {
 $ValueAsBytes = $ValueAsBytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $Value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Value = sp;
 $0 = $ValueAsBytes;
 $1 = $Value;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $Value;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_bitshift64Shl(($7|0),($10|0),8)|0);
 $12 = tempRet0;
 $13 = $0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $11 | $15;
 $17 = $Value;
 $18 = $17;
 HEAP32[$18>>2] = $16;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $12;
 $21 = $Value;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_bitshift64Shl(($23|0),($26|0),8)|0);
 $28 = tempRet0;
 $29 = $0;
 $30 = ((($29)) + 1|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $27 | $32;
 $34 = $Value;
 $35 = $34;
 HEAP32[$35>>2] = $33;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $28;
 $38 = $Value;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (_bitshift64Shl(($40|0),($43|0),8)|0);
 $45 = tempRet0;
 $46 = $0;
 $47 = ((($46)) + 2|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $44 | $49;
 $51 = $Value;
 $52 = $51;
 HEAP32[$52>>2] = $50;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = $45;
 $55 = $Value;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (_bitshift64Shl(($57|0),($60|0),8)|0);
 $62 = tempRet0;
 $63 = $0;
 $64 = ((($63)) + 3|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = $61 | $66;
 $68 = $Value;
 $69 = $68;
 HEAP32[$69>>2] = $67;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $62;
 $72 = $Value;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = (_bitshift64Shl(($74|0),($77|0),8)|0);
 $79 = tempRet0;
 $80 = $0;
 $81 = ((($80)) + 4|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $78 | $83;
 $85 = $Value;
 $86 = $85;
 HEAP32[$86>>2] = $84;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $79;
 $89 = $Value;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + 4)|0;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 tempRet0 = ($94);
 STACKTOP = sp;return ($91|0);
}
function __Z12FreeCascBlobP10_QUERY_KEY($pBlob) {
 $pBlob = $pBlob|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pBlob;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  _free($7);
 }
 $8 = $0;
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function __Z14CascDecompressPhPjS_j($pbOutBuffer,$pcbOutBuffer,$pbInBuffer,$cbInBuffer) {
 $pbOutBuffer = $pbOutBuffer|0;
 $pcbOutBuffer = $pcbOutBuffer|0;
 $pbInBuffer = $pbInBuffer|0;
 $cbInBuffer = $cbInBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nResult = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $z = sp + 8|0;
 $0 = $pbOutBuffer;
 $1 = $pcbOutBuffer;
 $2 = $pbInBuffer;
 $3 = $cbInBuffer;
 $4 = $2;
 HEAP32[$z>>2] = $4;
 $5 = $3;
 $6 = ((($z)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = $3;
 $8 = ((($z)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = $0;
 $10 = ((($z)) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($z)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($z)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($z)) + 32|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($z)) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = (_inflateInit_($z,16754,56)|0);
 $nResult = $17;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $23 = $nResult;
  $24 = ($23|0)==(0);
  $25 = $nResult;
  $26 = ($25|0)==(1);
  $27 = $24 ? 1 : $26;
  $28 = $27 ? 0 : 1004;
  STACKTOP = sp;return ($28|0);
 }
 $19 = (_inflate($z,0)|0);
 $nResult = $19;
 (_inflateEnd($z)|0);
 $20 = ((($z)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 HEAP32[$22>>2] = $21;
 $23 = $nResult;
 $24 = ($23|0)==(0);
 $25 = $nResult;
 $26 = ($25|0)==(1);
 $27 = $24 ? 1 : $26;
 $28 = $27 ? 0 : 1004;
 STACKTOP = sp;return ($28|0);
}
function __Z11CascDecryptPhPjS_jj($pbOutBuffer,$pcbOutBuffer,$pbInBuffer,$cbInBuffer,$dwFrameIndex) {
 $pbOutBuffer = $pbOutBuffer|0;
 $pcbOutBuffer = $pcbOutBuffer|0;
 $pbInBuffer = $pbInBuffer|0;
 $cbInBuffer = $cbInBuffer|0;
 $dwFrameIndex = $dwFrameIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $EncryptionType = 0, $IVSize = 0, $KeyName = 0, $KeyNameSize = 0, $Vector = 0;
 var $cond = 0, $dwShift = 0, $i = 0, $nError = 0, $pbBufferEnd = 0, $pbKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $KeyName = sp;
 $Vector = sp + 64|0;
 $1 = $pbOutBuffer;
 $2 = $pcbOutBuffer;
 $3 = $pbInBuffer;
 $4 = $cbInBuffer;
 $5 = $dwFrameIndex;
 $6 = $KeyName;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = $4;
 $12 = (($10) + ($11)|0);
 $pbBufferEnd = $12;
 $dwShift = 0;
 $13 = $3;
 $14 = $pbBufferEnd;
 $15 = ($13>>>0)>=($14>>>0);
 if ($15) {
  $0 = 1004;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $16 = $3;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)!=(8);
  if ($23) {
   $0 = 95;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 }
 $24 = $3;
 $25 = ((($24)) + 1|0);
 $3 = $25;
 $26 = HEAP8[$24>>0]|0;
 $27 = $26&255;
 $KeyNameSize = $27;
 $28 = $3;
 $29 = $KeyNameSize;
 $30 = (($28) + ($29)|0);
 $31 = $pbBufferEnd;
 $32 = ($30>>>0)>=($31>>>0);
 if ($32) {
  $0 = 1004;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $33 = $3;
 $34 = $KeyNameSize;
 _memcpy(($KeyName|0),($33|0),($34|0))|0;
 $35 = $KeyNameSize;
 $36 = $3;
 $37 = (($36) + ($35)|0);
 $3 = $37;
 $38 = $3;
 $39 = $pbBufferEnd;
 $40 = ($38>>>0)>=($39>>>0);
 if ($40) {
  $0 = 1004;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $41 = $3;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ($43|0)!=(4);
 if ($44) {
  $45 = $3;
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ($47|0)!=(8);
  if ($48) {
   $0 = 95;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 }
 $49 = $3;
 $50 = ((($49)) + 1|0);
 $3 = $50;
 $51 = HEAP8[$49>>0]|0;
 $52 = $51&255;
 $IVSize = $52;
 $53 = $3;
 $54 = $IVSize;
 $55 = (($53) + ($54)|0);
 $56 = $pbBufferEnd;
 $57 = ($55>>>0)>=($56>>>0);
 if ($57) {
  $0 = 1004;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 ;HEAP8[$Vector>>0]=0|0;HEAP8[$Vector+1>>0]=0|0;HEAP8[$Vector+2>>0]=0|0;HEAP8[$Vector+3>>0]=0|0;HEAP8[$Vector+4>>0]=0|0;HEAP8[$Vector+5>>0]=0|0;HEAP8[$Vector+6>>0]=0|0;HEAP8[$Vector+7>>0]=0|0;
 $58 = $3;
 $59 = $IVSize;
 _memcpy(($Vector|0),($58|0),($59|0))|0;
 $60 = $IVSize;
 $61 = $3;
 $62 = (($61) + ($60)|0);
 $3 = $62;
 $63 = $3;
 $64 = $pbBufferEnd;
 $65 = ($63>>>0)>=($64>>>0);
 if ($65) {
  $0 = 1004;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $66 = $3;
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = ($68|0)!=(83);
 if ($69) {
  $70 = $3;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = ($72|0)!=(65);
  if ($73) {
   $0 = 95;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 }
 $74 = $3;
 $75 = ((($74)) + 1|0);
 $3 = $75;
 $76 = HEAP8[$74>>0]|0;
 $EncryptionType = $76;
 $77 = $pbBufferEnd;
 $78 = $3;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($81>>>0)>($83>>>0);
 if ($84) {
  $0 = 105;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $85 = $KeyName;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (__ZL11FindCascKeyy($87,$90)|0);
 $pbKey = $91;
 $92 = $pbKey;
 $93 = ($92|0)==(0|0);
 if ($93) {
  $0 = 1005;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $i = 0;
 while(1) {
  $94 = $i;
  $95 = ($94>>>0)<(4);
  if (!($95)) {
   break;
  }
  $96 = $i;
  $97 = (($Vector) + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $5;
  $101 = $dwShift;
  $102 = $100 >>> $101;
  $103 = $102 & 255;
  $104 = $103&255;
  $105 = $104&255;
  $106 = $99 ^ $105;
  $107 = $106&255;
  $108 = $i;
  $109 = (($Vector) + ($108)|0);
  HEAP8[$109>>0] = $107;
  $110 = $dwShift;
  $111 = (($110) + 8)|0;
  $dwShift = $111;
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 $114 = $EncryptionType;
 $115 = $114&255;
 $cond = ($115|0)==(83);
 if (!($cond)) {
  ___assert_fail((19711|0),(16760|0),342,(16828|0));
  // unreachable;
 }
 $116 = $1;
 $117 = $3;
 $118 = $pbBufferEnd;
 $119 = $3;
 $120 = $118;
 $121 = $119;
 $122 = (($120) - ($121))|0;
 $123 = $pbKey;
 $124 = (__ZL15Decrypt_Salsa20PhS_jS_jS_($116,$117,$122,$123,16,$Vector)|0);
 $nError = $124;
 $125 = $nError;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $nError;
  $0 = $127;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 } else {
  $128 = $pbBufferEnd;
  $129 = $3;
  $130 = $128;
  $131 = $129;
  $132 = (($130) - ($131))|0;
  $133 = $2;
  HEAP32[$133>>2] = $132;
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function __Z14CascDirectCopyPhPjS_j($pbOutBuffer,$pcbOutBuffer,$pbInBuffer,$cbInBuffer) {
 $pbOutBuffer = $pbOutBuffer|0;
 $pcbOutBuffer = $pcbOutBuffer|0;
 $pbInBuffer = $pbInBuffer|0;
 $cbInBuffer = $cbInBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pbOutBuffer;
 $2 = $pcbOutBuffer;
 $3 = $pbInBuffer;
 $4 = $cbInBuffer;
 $5 = $4;
 $6 = (($5) - 1)|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $0 = 105;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $10 = $1;
  $11 = $3;
  $12 = $4;
  _memcpy(($10|0),($11|0),($12|0))|0;
  $13 = $4;
  $14 = $2;
  HEAP32[$14>>2] = $13;
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZL11FindCascKeyy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = (8 + (($8*24)|0)|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)!=(0);
  $17 = ($15|0)!=(0);
  $18 = $16 | $17;
  if (!($18)) {
   label = 6;
   break;
  }
  $19 = $i;
  $20 = (8 + (($19*24)|0)|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($23|0)==($29|0);
  $34 = ($26|0)==($32|0);
  $35 = $33 & $34;
  $36 = $i;
  if ($35) {
   label = 4;
   break;
  }
  $39 = (($36) + 1)|0;
  $i = $39;
 }
 if ((label|0) == 4) {
  $37 = (8 + (($36*24)|0)|0);
  $38 = ((($37)) + 8|0);
  $2 = $38;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZL15Decrypt_Salsa20PhS_jS_jS_($pbOutBuffer,$pbInBuffer,$cbInBuffer,$pbKey,$cbKeySize,$pbVector) {
 $pbOutBuffer = $pbOutBuffer|0;
 $pbInBuffer = $pbInBuffer|0;
 $cbInBuffer = $cbInBuffer|0;
 $pbKey = $pbKey|0;
 $cbKeySize = $cbKeySize|0;
 $pbVector = $pbVector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $SalsaState = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $SalsaState = sp;
 $0 = $pbOutBuffer;
 $1 = $pbInBuffer;
 $2 = $cbInBuffer;
 $3 = $pbKey;
 $4 = $cbKeySize;
 $5 = $pbVector;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 __ZL10InitializeP13_CASC_SALSA20PhjS1_($SalsaState,$6,$7,$8);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = (__ZL7DecryptP13_CASC_SALSA20PhS1_j($SalsaState,$9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZL10InitializeP13_CASC_SALSA20PhjS1_($pState,$pbKey,$cbKeyLength,$pbVector) {
 $pState = $pState|0;
 $pbKey = $pbKey|0;
 $cbKeyLength = $cbKeyLength|0;
 $pbVector = $pbVector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $KeyIndex = 0, $szConstants = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pState;
 $1 = $pbKey;
 $2 = $cbKeyLength;
 $3 = $pbVector;
 $4 = $2;
 $5 = ($4|0)==(32);
 $6 = HEAP32[447]|0;
 $7 = HEAP32[448]|0;
 $8 = $5 ? $6 : $7;
 $szConstants = $8;
 $9 = $2;
 $10 = (($9) - 16)|0;
 $KeyIndex = $10;
 $11 = $0;
 dest=$11; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = $szConstants;
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 HEAP32[$14>>2] = $13;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $26;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = $31;
 $34 = $szConstants;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = ((($37)) + 20|0);
 HEAP32[$38>>2] = $36;
 $39 = $3;
 $40 = HEAP32[$39>>2]|0;
 $41 = $0;
 $42 = ((($41)) + 24|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $0;
 $47 = ((($46)) + 28|0);
 HEAP32[$47>>2] = $45;
 $48 = $0;
 $49 = ((($48)) + 32|0);
 HEAP32[$49>>2] = 0;
 $50 = $0;
 $51 = ((($50)) + 36|0);
 HEAP32[$51>>2] = 0;
 $52 = $szConstants;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $0;
 $56 = ((($55)) + 40|0);
 HEAP32[$56>>2] = $54;
 $57 = $1;
 $58 = $KeyIndex;
 $59 = (($57) + ($58)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $0;
 $62 = ((($61)) + 44|0);
 HEAP32[$62>>2] = $60;
 $63 = $1;
 $64 = $KeyIndex;
 $65 = (($63) + ($64)|0);
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $0;
 $69 = ((($68)) + 48|0);
 HEAP32[$69>>2] = $67;
 $70 = $1;
 $71 = $KeyIndex;
 $72 = (($70) + ($71)|0);
 $73 = ((($72)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $0;
 $76 = ((($75)) + 52|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = $KeyIndex;
 $79 = (($77) + ($78)|0);
 $80 = ((($79)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $0;
 $83 = ((($82)) + 56|0);
 HEAP32[$83>>2] = $81;
 $84 = $szConstants;
 $85 = ((($84)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $0;
 $88 = ((($87)) + 60|0);
 HEAP32[$88>>2] = $86;
 $89 = $0;
 $90 = ((($89)) + 64|0);
 HEAP32[$90>>2] = 20;
 STACKTOP = sp;return;
}
function __ZL7DecryptP13_CASC_SALSA20PhS1_j($pState,$pbOutBuffer,$pbInBuffer,$cbInBuffer) {
 $pState = $pState|0;
 $pbOutBuffer = $pbOutBuffer|0;
 $pbInBuffer = $pbInBuffer|0;
 $cbInBuffer = $cbInBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $BlockSize = 0;
 var $KeyMirror = 0, $XorValue = 0, $i = 0, $pbXorValue = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $KeyMirror = sp + 72|0;
 $XorValue = sp + 8|0;
 $0 = $pState;
 $1 = $pbOutBuffer;
 $2 = $pbInBuffer;
 $3 = $cbInBuffer;
 while(1) {
  $4 = $3;
  $5 = ($4>>>0)>(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  dest=$KeyMirror; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $i = 0;
  while(1) {
   $7 = $i;
   $8 = $0;
   $9 = ((($8)) + 64|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7>>>0)<($10>>>0);
   if (!($11)) {
    break;
   }
   $12 = HEAP32[$KeyMirror>>2]|0;
   $13 = ((($KeyMirror)) + 48|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + ($14))|0;
   $16 = (__ZL5Rol32jj81($15,7)|0);
   $17 = ((($KeyMirror)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 ^ $16;
   HEAP32[$17>>2] = $19;
   $20 = ((($KeyMirror)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$KeyMirror>>2]|0;
   $23 = (($21) + ($22))|0;
   $24 = (__ZL5Rol32jj81($23,9)|0);
   $25 = ((($KeyMirror)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 ^ $24;
   HEAP32[$25>>2] = $27;
   $28 = ((($KeyMirror)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($KeyMirror)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + ($31))|0;
   $33 = (__ZL5Rol32jj81($32,13)|0);
   $34 = ((($KeyMirror)) + 48|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 ^ $33;
   HEAP32[$34>>2] = $36;
   $37 = ((($KeyMirror)) + 48|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($KeyMirror)) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + ($40))|0;
   $42 = (__ZL5Rol32jj81($41,18)|0);
   $43 = HEAP32[$KeyMirror>>2]|0;
   $44 = $43 ^ $42;
   HEAP32[$KeyMirror>>2] = $44;
   $45 = ((($KeyMirror)) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($KeyMirror)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + ($48))|0;
   $50 = (__ZL5Rol32jj81($49,7)|0);
   $51 = ((($KeyMirror)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 ^ $50;
   HEAP32[$51>>2] = $53;
   $54 = ((($KeyMirror)) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($KeyMirror)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + ($57))|0;
   $59 = (__ZL5Rol32jj81($58,9)|0);
   $60 = ((($KeyMirror)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 ^ $59;
   HEAP32[$60>>2] = $62;
   $63 = ((($KeyMirror)) + 52|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($KeyMirror)) + 36|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + ($66))|0;
   $68 = (__ZL5Rol32jj81($67,13)|0);
   $69 = ((($KeyMirror)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 ^ $68;
   HEAP32[$69>>2] = $71;
   $72 = ((($KeyMirror)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($KeyMirror)) + 52|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + ($75))|0;
   $77 = (__ZL5Rol32jj81($76,18)|0);
   $78 = ((($KeyMirror)) + 20|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 ^ $77;
   HEAP32[$78>>2] = $80;
   $81 = ((($KeyMirror)) + 40|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($KeyMirror)) + 24|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + ($84))|0;
   $86 = (__ZL5Rol32jj81($85,7)|0);
   $87 = ((($KeyMirror)) + 56|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 ^ $86;
   HEAP32[$87>>2] = $89;
   $90 = ((($KeyMirror)) + 56|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($KeyMirror)) + 40|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + ($93))|0;
   $95 = (__ZL5Rol32jj81($94,9)|0);
   $96 = ((($KeyMirror)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 ^ $95;
   HEAP32[$96>>2] = $98;
   $99 = ((($KeyMirror)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($KeyMirror)) + 56|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + ($102))|0;
   $104 = (__ZL5Rol32jj81($103,13)|0);
   $105 = ((($KeyMirror)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 ^ $104;
   HEAP32[$105>>2] = $107;
   $108 = ((($KeyMirror)) + 24|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($KeyMirror)) + 8|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) + ($111))|0;
   $113 = (__ZL5Rol32jj81($112,18)|0);
   $114 = ((($KeyMirror)) + 40|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $115 ^ $113;
   HEAP32[$114>>2] = $116;
   $117 = ((($KeyMirror)) + 60|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($KeyMirror)) + 44|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($118) + ($120))|0;
   $122 = (__ZL5Rol32jj81($121,7)|0);
   $123 = ((($KeyMirror)) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 ^ $122;
   HEAP32[$123>>2] = $125;
   $126 = ((($KeyMirror)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($KeyMirror)) + 60|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($127) + ($129))|0;
   $131 = (__ZL5Rol32jj81($130,9)|0);
   $132 = ((($KeyMirror)) + 28|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 ^ $131;
   HEAP32[$132>>2] = $134;
   $135 = ((($KeyMirror)) + 28|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ((($KeyMirror)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($136) + ($138))|0;
   $140 = (__ZL5Rol32jj81($139,13)|0);
   $141 = ((($KeyMirror)) + 44|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142 ^ $140;
   HEAP32[$141>>2] = $143;
   $144 = ((($KeyMirror)) + 44|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($KeyMirror)) + 28|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($145) + ($147))|0;
   $149 = (__ZL5Rol32jj81($148,18)|0);
   $150 = ((($KeyMirror)) + 60|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $151 ^ $149;
   HEAP32[$150>>2] = $152;
   $153 = HEAP32[$KeyMirror>>2]|0;
   $154 = ((($KeyMirror)) + 12|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($153) + ($155))|0;
   $157 = (__ZL5Rol32jj81($156,7)|0);
   $158 = ((($KeyMirror)) + 4|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $159 ^ $157;
   HEAP32[$158>>2] = $160;
   $161 = ((($KeyMirror)) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = HEAP32[$KeyMirror>>2]|0;
   $164 = (($162) + ($163))|0;
   $165 = (__ZL5Rol32jj81($164,9)|0);
   $166 = ((($KeyMirror)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $167 ^ $165;
   HEAP32[$166>>2] = $168;
   $169 = ((($KeyMirror)) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($KeyMirror)) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($170) + ($172))|0;
   $174 = (__ZL5Rol32jj81($173,13)|0);
   $175 = ((($KeyMirror)) + 12|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $176 ^ $174;
   HEAP32[$175>>2] = $177;
   $178 = ((($KeyMirror)) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ((($KeyMirror)) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($179) + ($181))|0;
   $183 = (__ZL5Rol32jj81($182,18)|0);
   $184 = HEAP32[$KeyMirror>>2]|0;
   $185 = $184 ^ $183;
   HEAP32[$KeyMirror>>2] = $185;
   $186 = ((($KeyMirror)) + 20|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ((($KeyMirror)) + 16|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (($187) + ($189))|0;
   $191 = (__ZL5Rol32jj81($190,7)|0);
   $192 = ((($KeyMirror)) + 24|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193 ^ $191;
   HEAP32[$192>>2] = $194;
   $195 = ((($KeyMirror)) + 24|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($KeyMirror)) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + ($198))|0;
   $200 = (__ZL5Rol32jj81($199,9)|0);
   $201 = ((($KeyMirror)) + 28|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $202 ^ $200;
   HEAP32[$201>>2] = $203;
   $204 = ((($KeyMirror)) + 28|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ((($KeyMirror)) + 24|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($205) + ($207))|0;
   $209 = (__ZL5Rol32jj81($208,13)|0);
   $210 = ((($KeyMirror)) + 16|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $211 ^ $209;
   HEAP32[$210>>2] = $212;
   $213 = ((($KeyMirror)) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($KeyMirror)) + 28|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + ($216))|0;
   $218 = (__ZL5Rol32jj81($217,18)|0);
   $219 = ((($KeyMirror)) + 20|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $220 ^ $218;
   HEAP32[$219>>2] = $221;
   $222 = ((($KeyMirror)) + 40|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ((($KeyMirror)) + 36|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = (($223) + ($225))|0;
   $227 = (__ZL5Rol32jj81($226,7)|0);
   $228 = ((($KeyMirror)) + 44|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $229 ^ $227;
   HEAP32[$228>>2] = $230;
   $231 = ((($KeyMirror)) + 44|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($KeyMirror)) + 40|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = (($232) + ($234))|0;
   $236 = (__ZL5Rol32jj81($235,9)|0);
   $237 = ((($KeyMirror)) + 32|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $238 ^ $236;
   HEAP32[$237>>2] = $239;
   $240 = ((($KeyMirror)) + 32|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ((($KeyMirror)) + 44|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($241) + ($243))|0;
   $245 = (__ZL5Rol32jj81($244,13)|0);
   $246 = ((($KeyMirror)) + 36|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $247 ^ $245;
   HEAP32[$246>>2] = $248;
   $249 = ((($KeyMirror)) + 36|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ((($KeyMirror)) + 32|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($250) + ($252))|0;
   $254 = (__ZL5Rol32jj81($253,18)|0);
   $255 = ((($KeyMirror)) + 40|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $256 ^ $254;
   HEAP32[$255>>2] = $257;
   $258 = ((($KeyMirror)) + 60|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = ((($KeyMirror)) + 56|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = (($259) + ($261))|0;
   $263 = (__ZL5Rol32jj81($262,7)|0);
   $264 = ((($KeyMirror)) + 48|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $265 ^ $263;
   HEAP32[$264>>2] = $266;
   $267 = ((($KeyMirror)) + 48|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = ((($KeyMirror)) + 60|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = (($268) + ($270))|0;
   $272 = (__ZL5Rol32jj81($271,9)|0);
   $273 = ((($KeyMirror)) + 52|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = $274 ^ $272;
   HEAP32[$273>>2] = $275;
   $276 = ((($KeyMirror)) + 52|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = ((($KeyMirror)) + 48|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($277) + ($279))|0;
   $281 = (__ZL5Rol32jj81($280,13)|0);
   $282 = ((($KeyMirror)) + 56|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $283 ^ $281;
   HEAP32[$282>>2] = $284;
   $285 = ((($KeyMirror)) + 56|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = ((($KeyMirror)) + 52|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($286) + ($288))|0;
   $290 = (__ZL5Rol32jj81($289,18)|0);
   $291 = ((($KeyMirror)) + 60|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 ^ $290;
   HEAP32[$291>>2] = $293;
   $294 = $i;
   $295 = (($294) + 2)|0;
   $i = $295;
  }
  $pbXorValue = $XorValue;
  $296 = $3;
  $297 = ($296>>>0)<(64);
  $298 = $3;
  $299 = $297 ? $298 : 64;
  $BlockSize = $299;
  $i = 0;
  while(1) {
   $300 = $i;
   $301 = ($300>>>0)<(16);
   if (!($301)) {
    break;
   }
   $302 = $i;
   $303 = (($KeyMirror) + ($302<<2)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $i;
   $306 = $0;
   $307 = (($306) + ($305<<2)|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = (($304) + ($308))|0;
   $310 = $i;
   $311 = (($XorValue) + ($310<<2)|0);
   HEAP32[$311>>2] = $309;
   $312 = $i;
   $313 = (($312) + 1)|0;
   $i = $313;
  }
  $i = 0;
  while(1) {
   $314 = $i;
   $315 = $BlockSize;
   $316 = ($314>>>0)<($315>>>0);
   if (!($316)) {
    break;
   }
   $317 = $i;
   $318 = $2;
   $319 = (($318) + ($317)|0);
   $320 = HEAP8[$319>>0]|0;
   $321 = $320&255;
   $322 = $i;
   $323 = $pbXorValue;
   $324 = (($323) + ($322)|0);
   $325 = HEAP8[$324>>0]|0;
   $326 = $325&255;
   $327 = $321 ^ $326;
   $328 = $327&255;
   $329 = $i;
   $330 = $1;
   $331 = (($330) + ($329)|0);
   HEAP8[$331>>0] = $328;
   $332 = $i;
   $333 = (($332) + 1)|0;
   $i = $333;
  }
  $334 = $0;
  $335 = ((($334)) + 32|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = (($336) + 1)|0;
  $338 = $0;
  $339 = ((($338)) + 32|0);
  HEAP32[$339>>2] = $337;
  $340 = $0;
  $341 = ((($340)) + 32|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = ($342|0)==(0);
  if ($343) {
   $344 = $0;
   $345 = ((($344)) + 36|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = (($346) + 1)|0;
   $348 = $0;
   $349 = ((($348)) + 36|0);
   HEAP32[$349>>2] = $347;
  }
  $350 = $BlockSize;
  $351 = $1;
  $352 = (($351) + ($350)|0);
  $1 = $352;
  $353 = $BlockSize;
  $354 = $2;
  $355 = (($354) + ($353)|0);
  $2 = $355;
  $356 = $BlockSize;
  $357 = $3;
  $358 = (($357) - ($356))|0;
  $3 = $358;
 }
 STACKTOP = sp;return 0;
}
function __ZL5Rol32jj81($dwValue,$dwRolCount) {
 $dwValue = $dwValue|0;
 $dwRolCount = $dwRolCount|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $dwValue;
 $1 = $dwRolCount;
 $2 = $0;
 $3 = $1;
 $4 = $2 << $3;
 $5 = $0;
 $6 = $1;
 $7 = (32 - ($6))|0;
 $8 = $5 >>> $7;
 $9 = $4 | $8;
 STACKTOP = sp;return ($9|0);
}
function __Z14AppendBlobTextPcPhjc($szBuffer,$pbData,$cbData,$chSeparator) {
 $szBuffer = $szBuffer|0;
 $pbData = $pbData|0;
 $cbData = $cbData|0;
 $chSeparator = $chSeparator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $szBuffer;
 $1 = $pbData;
 $2 = $cbData;
 $3 = $chSeparator;
 $4 = $3;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $3;
  $8 = $0;
  $9 = ((($8)) + 1|0);
  $0 = $9;
  HEAP8[$8>>0] = $7;
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $2;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $1;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 >> 4;
  $17 = (14094 + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $0;
  $20 = ((($19)) + 1|0);
  $0 = $20;
  HEAP8[$19>>0] = $18;
  $21 = $1;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 & 15;
  $25 = (14094 + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $0;
  $28 = ((($27)) + 1|0);
  $0 = $28;
  HEAP8[$27>>0] = $26;
  $29 = $1;
  $30 = ((($29)) + 1|0);
  $1 = $30;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $0;
 HEAP8[$33>>0] = 0;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __Z13LoadBuildInfoP13_TCascStorage($hs) {
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $PfnParseProc = 0, $nError = 0, $pvListFile = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hs;
 $PfnParseProc = 0;
 $nError = 0;
 $2 = $1;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 1:  {
  $PfnParseProc = 52;
  break;
 }
 case 2:  {
  $PfnParseProc = 53;
  break;
 }
 default: {
  $nError = 95;
 }
 }
 $5 = $nError;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ((($7)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (__Z21ListFile_OpenExternalPKc($9)|0);
   $pvListFile = $10;
   $11 = $pvListFile;
   $12 = ($11|0)!=(0|0);
   if ($12) {
    $13 = $PfnParseProc;
    $14 = $1;
    $15 = $pvListFile;
    $16 = (FUNCTION_TABLE_iii[$13 & 127]($14,$15)|0);
    $nError = $16;
    $17 = $pvListFile;
    __Z13ListFile_FreePv($17);
    break;
   } else {
    $nError = 2;
    break;
   }
  }
 } while(0);
 $18 = $nError;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $1;
  $21 = $1;
  $22 = ((($21)) + 52|0);
  $23 = (__ZL24FetchAndVerifyConfigFileP13_TCascStorageP10_QUERY_KEY($20,$22)|0);
  $pvListFile = $23;
  $24 = $pvListFile;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = $1;
   $27 = $pvListFile;
   $28 = (__ZL17LoadCdnConfigFileP13_TCascStoragePv($26,$27)|0);
   $nError = $28;
   $29 = $pvListFile;
   __Z13ListFile_FreePv($29);
  }
 }
 $30 = $nError;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $1;
   $33 = $1;
   $34 = ((($33)) + 60|0);
   $35 = (__ZL24FetchAndVerifyConfigFileP13_TCascStorageP10_QUERY_KEY($32,$34)|0);
   $pvListFile = $35;
   $36 = $pvListFile;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $1;
    $39 = $pvListFile;
    $40 = (__ZL16LoadCdnBuildFileP13_TCascStoragePv($38,$39)|0);
    $nError = $40;
    $41 = $pvListFile;
    __Z13ListFile_FreePv($41);
    break;
   } else {
    $nError = 2;
    break;
   }
  }
 } while(0);
 $42 = $nError;
 $43 = ($42|0)==(0);
 do {
  if ($43) {
   $44 = $1;
   $45 = (__ZL22CheckForIndexDirectoryP13_TCascStoragePKc($44,16874)|0);
   $46 = $1;
   $47 = ((($46)) + 20|0);
   HEAP32[$47>>2] = $45;
   $48 = ($45|0)!=(0|0);
   if ($48) {
    $0 = 0;
    $55 = $0;
    STACKTOP = sp;return ($55|0);
   }
   $49 = $1;
   $50 = (__ZL22CheckForIndexDirectoryP13_TCascStoragePKc($49,16879)|0);
   $51 = $1;
   $52 = ((($51)) + 20|0);
   HEAP32[$52>>2] = $50;
   $53 = ($50|0)!=(0|0);
   if (!($53)) {
    $nError = 2;
    break;
   }
   $0 = 0;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 } while(0);
 $54 = $nError;
 $0 = $54;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function __Z18CheckGameDirectoryP13_TCascStoragePc($hs,$szDirectory) {
 $hs = $hs|0;
 $szDirectory = $szDirectory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $nError = 0;
 var $pStream = 0, $szBuildFile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hs;
 $2 = $szDirectory;
 $nError = 2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = (1796 + ($3<<3)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $2;
  $8 = $i;
  $9 = (1796 + ($8<<3)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__Z11CombinePathPKcS0_($7,$10)|0);
  $szBuildFile = $11;
  $12 = $szBuildFile;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $szBuildFile;
   $15 = (__Z19FileStream_OpenFilePKcj($14,256)|0);
   $pStream = $15;
   $16 = $pStream;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    $18 = $pStream;
    __Z16FileStream_CloseP11TFileStream($18);
    $19 = $1;
    $20 = $2;
    $21 = (__ZL18CheckDataDirectoryP13_TCascStoragePc($19,$20)|0);
    $nError = $21;
    $22 = $nError;
    $23 = ($22|0)==(0);
    if ($23) {
     label = 6;
     break;
    }
   }
   $33 = $szBuildFile;
   _free($33);
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 6) {
  $24 = $szBuildFile;
  $25 = $1;
  $26 = ((($25)) + 16|0);
  HEAP32[$26>>2] = $24;
  $27 = $i;
  $28 = (1796 + ($27<<3)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = ((($31)) + 48|0);
  HEAP32[$32>>2] = $30;
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 9) {
  $36 = $nError;
  $0 = $36;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function __Z20GetRootVariableIndexPKcS0_S0_Pi($szLinePtr,$szLineEnd,$szVariableName,$PtrIndex) {
 $szLinePtr = $szLinePtr|0;
 $szLineEnd = $szLineEnd|0;
 $szVariableName = $szVariableName|0;
 $PtrIndex = $PtrIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nIndex = 0, $nLength = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $szLinePtr;
 $2 = $szLineEnd;
 $3 = $szVariableName;
 $4 = $PtrIndex;
 $5 = $3;
 $6 = (_strlen($5)|0);
 $nLength = $6;
 $nIndex = 0;
 while(1) {
  $7 = $1;
  $8 = $2;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 9;
   break;
  }
  $10 = $1;
  $11 = $3;
  $12 = $nLength;
  $13 = (_strncasecmp($10,$11,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $nLength;
   $16 = $1;
   $17 = (($16) + ($15)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)==(124);
   if ($20) {
    label = 6;
    break;
   }
   $21 = $nLength;
   $22 = $1;
   $23 = (($22) + ($21)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(48);
   if ($26) {
    label = 6;
    break;
   }
  }
  $29 = $1;
  $30 = $2;
  $31 = (__ZL16SkipInfoVariablePKcS0_($29,$30)|0);
  $1 = $31;
  $32 = $1;
  $33 = ($32|0)==(0|0);
  if ($33) {
   label = 9;
   break;
  }
  $34 = $nIndex;
  $35 = (($34) + 1)|0;
  $nIndex = $35;
 }
 if ((label|0) == 6) {
  $27 = $nIndex;
  $28 = $4;
  HEAP32[$28>>2] = $27;
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 9) {
  $0 = 1000;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __Z17ParseRootFileLinePKcS0_iP10_QUERY_KEYPcj($szLinePtr,$szLineEnd,$nFileNameIndex,$PtrEncodingKey,$szFileName,$nMaxChars) {
 $szLinePtr = $szLinePtr|0;
 $szLineEnd = $szLineEnd|0;
 $nFileNameIndex = $nFileNameIndex|0;
 $PtrEncodingKey = $PtrEncodingKey|0;
 $szFileName = $szFileName|0;
 $nMaxChars = $nMaxChars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $nIndex = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $szLinePtr;
 $2 = $szLineEnd;
 $3 = $nFileNameIndex;
 $4 = $PtrEncodingKey;
 $5 = $szFileName;
 $6 = $nMaxChars;
 $nIndex = 0;
 $7 = $1;
 $8 = ((($7)) + 32|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(124);
 if ($11) {
  $0 = 1000;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $12 = $4;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 16;
 $14 = $1;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 $17 = (__Z21ConvertStringToBinaryPKcjPh($14,32,$16)|0);
 $nError = $17;
 $18 = $nError;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $nError;
  $0 = $20;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $21 = $1;
 $22 = ((($21)) + 33|0);
 $1 = $22;
 $nIndex = 1;
 while(1) {
  $23 = $1;
  $24 = $2;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $nIndex;
  $27 = $3;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $1;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)==(124);
  if ($32) {
   $33 = $nIndex;
   $34 = (($33) + 1)|0;
   $nIndex = $34;
  }
  $35 = $1;
  $36 = ((($35)) + 1|0);
  $1 = $36;
 }
 while(1) {
  $37 = $1;
  $38 = $2;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $1;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)!=(124);
  $44 = $6;
  $45 = ($44>>>0)>(1);
  $or$cond = $43 & $45;
  if (!($or$cond)) {
   break;
  }
  $46 = $1;
  $47 = ((($46)) + 1|0);
  $1 = $47;
  $48 = HEAP8[$46>>0]|0;
  $49 = $5;
  $50 = ((($49)) + 1|0);
  $5 = $50;
  HEAP8[$49>>0] = $48;
  $51 = $6;
  $52 = (($51) + -1)|0;
  $6 = $52;
 }
 $53 = $5;
 HEAP8[$53>>0] = 0;
 $0 = 0;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function __ZL19ParseFile_BuildInfoP13_TCascStoragePv($hs,$pvListFile) {
 $hs = $hs|0;
 $pvListFile = $pvListFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Active = 0, $CdnHost = 0;
 var $CdnPath = 0, $TagString = 0, $nError = 0, $nLength1 = 0, $nLength2 = 0, $szLineEnd1 = 0, $szLineEnd2 = 0, $szLinePtr1 = 0, $szLinePtr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $Active = sp + 56|0;
 $TagString = sp + 48|0;
 $CdnHost = sp + 40|0;
 $CdnPath = sp + 32|0;
 $szLinePtr1 = sp + 24|0;
 $szLineEnd1 = sp + 20|0;
 $szLinePtr2 = sp + 16|0;
 $szLineEnd2 = sp + 12|0;
 $1 = $hs;
 $2 = $pvListFile;
 ;HEAP32[$Active>>2]=0|0;HEAP32[$Active+4>>2]=0|0;
 ;HEAP32[$TagString>>2]=0|0;HEAP32[$TagString+4>>2]=0|0;
 ;HEAP32[$CdnHost>>2]=0|0;HEAP32[$CdnHost+4>>2]=0|0;
 ;HEAP32[$CdnPath>>2]=0|0;HEAP32[$CdnPath+4>>2]=0|0;
 $nError = 1000;
 $3 = $2;
 $4 = (__Z20ListFile_GetNextLinePvPPKcS2_($3,$szLinePtr1,$szLineEnd1)|0);
 $nLength1 = $4;
 $5 = $nLength1;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 1000;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 while(1) {
  $7 = $2;
  $8 = (__Z20ListFile_GetNextLinePvPPKcS2_($7,$szLinePtr2,$szLineEnd2)|0);
  $nLength2 = $8;
  $9 = $nLength2;
  $10 = ($9|0)==(0);
  if ($10) {
   break;
  }
  while(1) {
   $11 = HEAP32[$szLinePtr1>>2]|0;
   $12 = HEAP32[$szLineEnd1>>2]|0;
   $13 = ($11>>>0)<($12>>>0);
   if (!($13)) {
    break;
   }
   $14 = HEAP32[$szLinePtr1>>2]|0;
   $15 = HEAP32[$szLineEnd1>>2]|0;
   $16 = (__ZL14IsInfoVariablePKcS0_S0_S0_($14,$15,17339,17346)|0);
   if ($16) {
    $17 = HEAP32[$szLinePtr2>>2]|0;
    $18 = HEAP32[$szLineEnd2>>2]|0;
    (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($Active,$17,$18,0)|0);
   }
   $19 = HEAP32[$szLinePtr1>>2]|0;
   $20 = HEAP32[$szLineEnd1>>2]|0;
   $21 = (__ZL14IsInfoVariablePKcS0_S0_S0_($19,$20,17350,17360)|0);
   if ($21) {
    $22 = $1;
    $23 = ((($22)) + 60|0);
    $24 = HEAP32[$szLinePtr2>>2]|0;
    $25 = HEAP32[$szLineEnd2>>2]|0;
    (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($23,$24,$25,1)|0);
   }
   $26 = HEAP32[$szLinePtr1>>2]|0;
   $27 = HEAP32[$szLineEnd1>>2]|0;
   $28 = (__ZL14IsInfoVariablePKcS0_S0_S0_($26,$27,17364,17360)|0);
   if ($28) {
    $29 = $1;
    $30 = ((($29)) + 52|0);
    $31 = HEAP32[$szLinePtr2>>2]|0;
    $32 = HEAP32[$szLineEnd2>>2]|0;
    (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($30,$31,$32,1)|0);
   }
   $33 = HEAP32[$szLinePtr1>>2]|0;
   $34 = HEAP32[$szLineEnd1>>2]|0;
   $35 = (__ZL14IsInfoVariablePKcS0_S0_S0_($33,$34,17372,17382)|0);
   if ($35) {
    $36 = HEAP32[$szLinePtr2>>2]|0;
    $37 = HEAP32[$szLineEnd2>>2]|0;
    (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($CdnHost,$36,$37,0)|0);
   }
   $38 = HEAP32[$szLinePtr1>>2]|0;
   $39 = HEAP32[$szLineEnd1>>2]|0;
   $40 = (__ZL14IsInfoVariablePKcS0_S0_S0_($38,$39,17389,17382)|0);
   if ($40) {
    $41 = HEAP32[$szLinePtr2>>2]|0;
    $42 = HEAP32[$szLineEnd2>>2]|0;
    (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($CdnPath,$41,$42,0)|0);
   }
   $43 = HEAP32[$szLinePtr1>>2]|0;
   $44 = HEAP32[$szLineEnd1>>2]|0;
   $45 = (__ZL14IsInfoVariablePKcS0_S0_S0_($43,$44,17398,17382)|0);
   if ($45) {
    $46 = HEAP32[$szLinePtr2>>2]|0;
    $47 = HEAP32[$szLineEnd2>>2]|0;
    (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($TagString,$46,$47,0)|0);
   }
   $48 = HEAP32[$szLinePtr1>>2]|0;
   $49 = HEAP32[$szLineEnd1>>2]|0;
   $50 = (__ZL16SkipInfoVariablePKcS0_($48,$49)|0);
   HEAP32[$szLinePtr1>>2] = $50;
   $51 = HEAP32[$szLinePtr1>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    break;
   }
   $53 = HEAP32[$szLinePtr2>>2]|0;
   $54 = HEAP32[$szLineEnd2>>2]|0;
   $55 = (__ZL16SkipInfoVariablePKcS0_($53,$54)|0);
   HEAP32[$szLinePtr2>>2] = $55;
   $56 = HEAP32[$szLinePtr2>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    break;
   }
  }
  $58 = HEAP32[$Active>>2]|0;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = HEAP32[$Active>>2]|0;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)==(49);
   if ($63) {
    break;
   }
  }
  __Z12FreeCascBlobP10_QUERY_KEY($Active);
  $64 = $1;
  $65 = ((($64)) + 60|0);
  __Z12FreeCascBlobP10_QUERY_KEY($65);
  $66 = $1;
  $67 = ((($66)) + 52|0);
  __Z12FreeCascBlobP10_QUERY_KEY($67);
  __Z12FreeCascBlobP10_QUERY_KEY($CdnHost);
  __Z12FreeCascBlobP10_QUERY_KEY($CdnPath);
  __Z12FreeCascBlobP10_QUERY_KEY($TagString);
  $68 = HEAP32[$szLineEnd1>>2]|0;
  $69 = $nLength1;
  $70 = (0 - ($69))|0;
  $71 = (($68) + ($70)|0);
  HEAP32[$szLinePtr1>>2] = $71;
 }
 $72 = $1;
 $73 = ((($72)) + 60|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = $1;
  $77 = ((($76)) + 52|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if ($79) {
   $80 = HEAP32[$CdnHost>>2]|0;
   $81 = ($80|0)!=(0|0);
   if ($81) {
    $82 = HEAP32[$CdnPath>>2]|0;
    $83 = ($82|0)!=(0|0);
    if ($83) {
     $84 = ((($CdnHost)) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($CdnPath)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($85) + ($87))|0;
     $89 = (($88) + 1)|0;
     $90 = $89;
     $91 = (_malloc($90)|0);
     $92 = $1;
     $93 = ((($92)) + 24|0);
     HEAP32[$93>>2] = $91;
     $94 = $1;
     $95 = ((($94)) + 24|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)!=(0|0);
     if ($97) {
      $98 = $1;
      $99 = ((($98)) + 24|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = HEAP32[$CdnHost>>2]|0;
      $102 = ((($CdnHost)) + 4|0);
      $103 = HEAP32[$102>>2]|0;
      __Z10CopyStringPcPKcj($100,$101,$103);
      $104 = $1;
      $105 = ((($104)) + 24|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ((($CdnHost)) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($106) + ($108)|0);
      $110 = HEAP32[$CdnPath>>2]|0;
      $111 = ((($CdnPath)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      __Z10CopyStringPcPKcj($109,$110,$112);
      $nError = 0;
     }
    }
   }
  }
 }
 $113 = HEAP32[$TagString>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = $1;
  (__ZL20GetDefaultLocaleMaskP13_TCascStorageP10_QUERY_KEY($115,$TagString)|0);
 }
 __Z12FreeCascBlobP10_QUERY_KEY($CdnHost);
 __Z12FreeCascBlobP10_QUERY_KEY($CdnPath);
 __Z12FreeCascBlobP10_QUERY_KEY($TagString);
 __Z12FreeCascBlobP10_QUERY_KEY($Active);
 $116 = $nError;
 $0 = $116;
 $117 = $0;
 STACKTOP = sp;return ($117|0);
}
function __ZL17ParseFile_BuildDbP13_TCascStoragePv($hs,$pvListFile) {
 $hs = $hs|0;
 $pvListFile = $pvListFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $nLength = 0, $szLineEnd = 0, $szLinePtr = 0, $szOneLine = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $szOneLine = sp + 32|0;
 $1 = $hs;
 $2 = $pvListFile;
 $3 = $2;
 $4 = (__Z20ListFile_GetNextLinePvPcj($3,$szOneLine,511)|0);
 $nLength = $4;
 $5 = $nLength;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 1000;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $szLinePtr = $szOneLine;
 $7 = $nLength;
 $8 = (($szOneLine) + ($7)|0);
 $szLineEnd = $8;
 $9 = $1;
 $10 = ((($9)) + 60|0);
 $11 = $szLinePtr;
 $12 = $szLineEnd;
 $13 = (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($10,$11,$12,1)|0);
 $nError = $13;
 $14 = $nError;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $szLinePtr;
  $17 = $szLineEnd;
  $18 = (__ZL16SkipInfoVariablePKcS0_($16,$17)|0);
  $szLinePtr = $18;
  $19 = $1;
  $20 = ((($19)) + 52|0);
  $21 = $szLinePtr;
  $22 = $szLineEnd;
  $23 = (__ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($20,$21,$22,1)|0);
  $nError = $23;
  $24 = $nError;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $szLinePtr;
   $27 = $szLineEnd;
   $28 = (__ZL16SkipInfoVariablePKcS0_($26,$27)|0);
   $szLinePtr = $28;
   $29 = $szLinePtr;
   $30 = $szLineEnd;
   $31 = (__ZL16SkipInfoVariablePKcS0_($29,$30)|0);
   $szLinePtr = $31;
   $32 = $szLinePtr;
   $33 = $szLineEnd;
   $34 = (__Z18CascNewStrFromAnsiPKcS0_($32,$33)|0);
   $35 = $1;
   $36 = ((($35)) + 24|0);
   HEAP32[$36>>2] = $34;
   $37 = $1;
   $38 = ((($37)) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $nError = 12;
   }
  }
 }
 $41 = $1;
 $42 = ((($41)) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  label = 10;
 } else {
  $45 = $1;
  $46 = ((($45)) + 52|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if ($48) {
   label = 10;
  } else {
   $49 = $1;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  $nError = 1000;
 }
 $53 = $nError;
 $0 = $53;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function __ZL24FetchAndVerifyConfigFileP13_TCascStorageP10_QUERY_KEY($hs,$pFileKey) {
 $hs = $hs|0;
 $pFileKey = $pFileKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $pvListFile = 0, $szFileName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $pFileKey;
 $pvListFile = 0;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__Z10CascNewStrPKcj($4,46)|0);
 $szFileName = $5;
 $6 = $szFileName;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $20 = $pvListFile;
  STACKTOP = sp;return ($20|0);
 }
 $8 = $szFileName;
 $9 = $1;
 __ZL20AppendConfigFilePathPcP10_QUERY_KEY($8,$9);
 $10 = $szFileName;
 $11 = (__Z21ListFile_OpenExternalPKc($10)|0);
 $pvListFile = $11;
 $12 = $pvListFile;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $pvListFile;
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (__Z18ListFile_VerifyMD5PvPh($14,$16)|0);
  if (!($17)) {
   $18 = $pvListFile;
   __Z13ListFile_FreePv($18);
   $pvListFile = 0;
  }
 }
 $19 = $szFileName;
 _free($19);
 $20 = $pvListFile;
 STACKTOP = sp;return ($20|0);
}
function __ZL17LoadCdnConfigFileP13_TCascStoragePv($hs,$pvListFile) {
 $hs = $hs|0;
 $pvListFile = $pvListFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $szLineBegin = 0, $szLineEnd = 0, $szVarBegin = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $szLineBegin = sp + 12|0;
 $szLineEnd = sp + 4|0;
 $1 = $hs;
 $2 = $pvListFile;
 $nError = 0;
 while(1) {
  $3 = $2;
  $4 = (__Z20ListFile_GetNextLinePvPPKcS2_($3,$szLineBegin,$szLineEnd)|0);
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$szLineBegin>>2]|0;
  $7 = HEAP32[$szLineEnd>>2]|0;
  $8 = (__ZL17CheckLineVariablePKcS0_S0_($6,$7,17210)|0);
  $szVarBegin = $8;
  $9 = $szVarBegin;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $1;
   $12 = ((($11)) + 68|0);
   $13 = $szVarBegin;
   $14 = HEAP32[$szLineEnd>>2]|0;
   $15 = (__ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($12,$13,$14)|0);
   $nError = $15;
   continue;
  }
  $16 = HEAP32[$szLineBegin>>2]|0;
  $17 = HEAP32[$szLineEnd>>2]|0;
  $18 = (__ZL17CheckLineVariablePKcS0_S0_($16,$17,17224)|0);
  $szVarBegin = $18;
  $19 = $szVarBegin;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $1;
   $22 = ((($21)) + 76|0);
   $23 = $szVarBegin;
   $24 = HEAP32[$szLineEnd>>2]|0;
   $25 = (__ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_($22,$23,$24)|0);
   $nError = $25;
   continue;
  }
  $26 = HEAP32[$szLineBegin>>2]|0;
  $27 = HEAP32[$szLineEnd>>2]|0;
  $28 = (__ZL17CheckLineVariablePKcS0_S0_($26,$27,17233)|0);
  $szVarBegin = $28;
  $29 = $szVarBegin;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = $1;
   $32 = ((($31)) + 92|0);
   $33 = $szVarBegin;
   $34 = HEAP32[$szLineEnd>>2]|0;
   (__ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($32,$33,$34)|0);
   continue;
  }
  $35 = HEAP32[$szLineBegin>>2]|0;
  $36 = HEAP32[$szLineEnd>>2]|0;
  $37 = (__ZL17CheckLineVariablePKcS0_S0_($35,$36,17253)|0);
  $szVarBegin = $37;
  $38 = $szVarBegin;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   continue;
  }
  $40 = $1;
  $41 = ((($40)) + 84|0);
  $42 = $szVarBegin;
  $43 = HEAP32[$szLineEnd>>2]|0;
  $44 = (__ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_($41,$42,$43)|0);
  $nError = $44;
 }
 $45 = $1;
 $46 = ((($45)) + 76|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 if (!($48)) {
  $49 = $1;
  $50 = ((($49)) + 76|0);
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = $nError;
   $0 = $54;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 }
 $0 = 1000;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function __ZL16LoadCdnBuildFileP13_TCascStoragePv($hs,$pvListFile) {
 $hs = $hs|0;
 $pvListFile = $pvListFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $nError = 0;
 var $szLineBegin = 0, $szLineEnd = 0, $szVarBegin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $szLineBegin = sp + 12|0;
 $szLineEnd = sp + 4|0;
 $1 = $hs;
 $2 = $pvListFile;
 HEAP32[$szLineEnd>>2] = 0;
 $nError = 0;
 while(1) {
  $3 = $2;
  $4 = (__Z20ListFile_GetNextLinePvPPKcS2_($3,$szLineBegin,$szLineEnd)|0);
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$szLineBegin>>2]|0;
  $7 = HEAP32[$szLineEnd>>2]|0;
  $8 = (__ZL17CheckLineVariablePKcS0_S0_($6,$7,16949)|0);
  $szVarBegin = $8;
  $9 = $szVarBegin;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $1;
   $12 = $szVarBegin;
   $13 = HEAP32[$szLineEnd>>2]|0;
   (__ZL11GetGameTypeP13_TCascStoragePKcS2_($11,$12,$13)|0);
   continue;
  }
  $14 = HEAP32[$szLineBegin>>2]|0;
  $15 = HEAP32[$szLineEnd>>2]|0;
  $16 = (__ZL17CheckLineVariablePKcS0_S0_($14,$15,16963)|0);
  $szVarBegin = $16;
  $17 = $szVarBegin;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = $szVarBegin;
   $21 = HEAP32[$szLineEnd>>2]|0;
   (__ZL14GetBuildNumberP13_TCascStoragePKcS2_($19,$20,$21)|0);
   continue;
  }
  $22 = HEAP32[$szLineBegin>>2]|0;
  $23 = HEAP32[$szLineEnd>>2]|0;
  $24 = (__ZL17CheckLineVariablePKcS0_S0_($22,$23,16974)|0);
  $szVarBegin = $24;
  $25 = $szVarBegin;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $1;
   $28 = ((($27)) + 100|0);
   $29 = $szVarBegin;
   $30 = HEAP32[$szLineEnd>>2]|0;
   (__ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($28,$29,$30)|0);
   continue;
  }
  $31 = HEAP32[$szLineBegin>>2]|0;
  $32 = HEAP32[$szLineEnd>>2]|0;
  $33 = (__ZL17CheckLineVariablePKcS0_S0_($31,$32,16979)|0);
  $szVarBegin = $33;
  $34 = $szVarBegin;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $1;
   $37 = ((($36)) + 108|0);
   $38 = $szVarBegin;
   $39 = HEAP32[$szLineEnd>>2]|0;
   (__ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($37,$38,$39)|0);
   continue;
  }
  $40 = HEAP32[$szLineBegin>>2]|0;
  $41 = HEAP32[$szLineEnd>>2]|0;
  $42 = (__ZL17CheckLineVariablePKcS0_S0_($40,$41,16985)|0);
  $szVarBegin = $42;
  $43 = $szVarBegin;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   $45 = $1;
   $46 = ((($45)) + 116|0);
   $47 = $szVarBegin;
   $48 = HEAP32[$szLineEnd>>2]|0;
   (__ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($46,$47,$48)|0);
   continue;
  }
  $49 = HEAP32[$szLineBegin>>2]|0;
  $50 = HEAP32[$szLineEnd>>2]|0;
  $51 = (__ZL17CheckLineVariablePKcS0_S0_($49,$50,16994)|0);
  $szVarBegin = $51;
  $52 = $szVarBegin;
  $53 = ($52|0)!=(0|0);
  if ($53) {
   $54 = $1;
   $55 = ((($54)) + 124|0);
   $56 = $szVarBegin;
   $57 = HEAP32[$szLineEnd>>2]|0;
   (__ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($55,$56,$57)|0);
   continue;
  }
  $58 = HEAP32[$szLineBegin>>2]|0;
  $59 = HEAP32[$szLineEnd>>2]|0;
  $60 = (__ZL17CheckLineVariablePKcS0_S0_($58,$59,17002)|0);
  $szVarBegin = $60;
  $61 = $szVarBegin;
  $62 = ($61|0)!=(0|0);
  if (!($62)) {
   continue;
  }
  $63 = $1;
  $64 = ((($63)) + 132|0);
  $65 = $szVarBegin;
  $66 = HEAP32[$szLineEnd>>2]|0;
  $67 = (__ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_j($64,$65,$66,2)|0);
  $nError = $67;
 }
 $68 = $1;
 $69 = ((($68)) + 132|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  $72 = $1;
  $73 = ((($72)) + 132|0);
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)!=(32);
  if (!($76)) {
   $77 = $nError;
   $0 = $77;
   $78 = $0;
   STACKTOP = sp;return ($78|0);
  }
 }
 $0 = 1000;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function __ZL22CheckForIndexDirectoryP13_TCascStoragePKc($hs,$szSubDir) {
 $hs = $hs|0;
 $szSubDir = $szSubDir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $szIndexPath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $hs;
 $2 = $szSubDir;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (__Z11CombinePathPKcS0_($5,$6)|0);
 $szIndexPath = $7;
 $8 = $szIndexPath;
 $9 = (__Z15DirectoryExistsPKc($8)|0);
 $10 = $szIndexPath;
 if ($9) {
  $11 = $1;
  $12 = ((($11)) + 20|0);
  HEAP32[$12>>2] = $10;
  $13 = $1;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  _free($10);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZL18CheckDataDirectoryP13_TCascStoragePc($hs,$szDirectory) {
 $hs = $hs|0;
 $szDirectory = $szDirectory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $nError = 0, $szDataPath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hs;
 $2 = $szDirectory;
 $nError = 2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = (1820 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 8;
   break;
  }
  $7 = $2;
  $8 = $i;
  $9 = (1820 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__Z11CombinePathPKcS0_($7,$10)|0);
  $szDataPath = $11;
  $12 = $szDataPath;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $szDataPath;
   $15 = (__Z15DirectoryExistsPKc($14)|0);
   $16 = $szDataPath;
   if ($15) {
    label = 5;
    break;
   }
   _free($16);
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 5) {
  $17 = $1;
  $18 = ((($17)) + 12|0);
  HEAP32[$18>>2] = $16;
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 8) {
  $21 = $nError;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __ZL16SkipInfoVariablePKcS0_($szLineBegin,$szLineEnd) {
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $szLineBegin;
 $2 = $szLineEnd;
 while(1) {
  $3 = $1;
  $4 = $2;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(124);
  $10 = $1;
  $11 = ((($10)) + 1|0);
  if ($9) {
   label = 4;
   break;
  }
  $1 = $11;
 }
 if ((label|0) == 4) {
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL17CheckLineVariablePKcS0_S0_($szLineBegin,$szLineEnd,$szVarName) {
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 $szVarName = $szVarName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLineLength = 0, $nNameLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $szLineBegin;
 $2 = $szLineEnd;
 $3 = $szVarName;
 $4 = $2;
 $5 = $1;
 $6 = $4;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $nLineLength = $8;
 $9 = $3;
 $10 = (_strlen($9)|0);
 $nNameLength = $10;
 $11 = $nLineLength;
 $12 = $nNameLength;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $1;
  $15 = $3;
  $16 = $nNameLength;
  $17 = (_strncasecmp($14,$15,$16)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = $nNameLength;
   $20 = $1;
   $21 = (($20) + ($19)|0);
   $1 = $21;
   while(1) {
    $22 = $1;
    $23 = $2;
    $24 = ($22>>>0)<($23>>>0);
    if ($24) {
     $25 = $1;
     $26 = (__ZL16IsValueSeparatorPKc($25)|0);
     $48 = $26;
    } else {
     $48 = 0;
    }
    $27 = $1;
    if (!($48)) {
     break;
    }
    $28 = ((($27)) + 1|0);
    $1 = $28;
   }
   $29 = $2;
   $30 = ($27>>>0)>=($29>>>0);
   if (!($30)) {
    $31 = $1;
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)!=(61);
    if (!($34)) {
     $35 = $1;
     $36 = ((($35)) + 1|0);
     $1 = $36;
     while(1) {
      $37 = $1;
      $38 = $2;
      $39 = ($37>>>0)<($38>>>0);
      if ($39) {
       $40 = $1;
       $41 = (__ZL16IsValueSeparatorPKc($40)|0);
       $49 = $41;
      } else {
       $49 = 0;
      }
      $42 = $1;
      if (!($49)) {
       break;
      }
      $43 = ((($42)) + 1|0);
      $1 = $43;
     }
     $44 = $2;
     $45 = ($42>>>0)>=($44>>>0);
     if ($45) {
      $0 = 0;
      $47 = $0;
      STACKTOP = sp;return ($47|0);
     } else {
      $46 = $1;
      $0 = $46;
      $47 = $0;
      STACKTOP = sp;return ($47|0);
     }
    }
   }
   $0 = 0;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __ZL11GetGameTypeP13_TCascStoragePKcS2_($hs,$szVarBegin,$szLineEnd) {
 $hs = $hs|0;
 $szVarBegin = $szVarBegin|0;
 $szLineEnd = $szLineEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $szVarBegin;
 $2 = $szLineEnd;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = (1844 + (($3*12)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $2;
  $8 = $1;
  $9 = $7;
  $10 = $8;
  $11 = (($9) - ($10))|0;
  $12 = $i;
  $13 = (1844 + (($12*12)|0)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($11|0)==($15|0);
  if ($16) {
   $17 = $1;
   $18 = $i;
   $19 = (1844 + (($18*12)|0)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $i;
   $22 = (1844 + (($21*12)|0)|0);
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_strncasecmp($17,$20,$24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    label = 5;
    break;
   }
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 if ((label|0) == 5) {
  $27 = $i;
  $28 = (1844 + (($27*12)|0)|0);
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  $32 = ((($31)) + 32|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return 0;
 }
 else if ((label|0) == 7) {
  ___assert_fail((19711|0),(17033|0),425,(17166|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL14GetBuildNumberP13_TCascStoragePKcS2_($hs,$szVarBegin,$szLineEnd) {
 $hs = $hs|0;
 $szVarBegin = $szVarBegin|0;
 $szLineEnd = $szLineEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dwBuildNumber = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $szVarBegin;
 $2 = $szLineEnd;
 $dwBuildNumber = 0;
 while(1) {
  $3 = $1;
  $4 = $2;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = (__ZL11IsCharDigith($7)|0);
  if ($8) {
   $9 = $1;
   $10 = ((($9)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = (__ZL11IsCharDigith($11)|0);
   if ($12) {
    $13 = $1;
    $14 = ((($13)) + 2|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = (__ZL11IsCharDigith($15)|0);
    if ($16) {
     label = 6;
     break;
    }
   }
  }
  $31 = $1;
  $32 = ((($31)) + 1|0);
  $1 = $32;
 }
 L8: do {
  if ((label|0) == 6) {
   while(1) {
    label = 0;
    $17 = $1;
    $18 = $2;
    $19 = ($17>>>0)<($18>>>0);
    if (!($19)) {
     break L8;
    }
    $20 = $1;
    $21 = HEAP8[$20>>0]|0;
    $22 = (__ZL11IsCharDigith($21)|0);
    if (!($22)) {
     break L8;
    }
    $23 = $dwBuildNumber;
    $24 = ($23*10)|0;
    $25 = $1;
    $26 = ((($25)) + 1|0);
    $1 = $26;
    $27 = HEAP8[$25>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = (($28) - 48)|0;
    $30 = (($24) + ($29))|0;
    $dwBuildNumber = $30;
    label = 6;
   }
  }
 } while(0);
 $33 = $dwBuildNumber;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $dwBuildNumber;
  $36 = $0;
  $37 = ((($36)) + 36|0);
  HEAP32[$37>>2] = $35;
  $38 = $dwBuildNumber;
  $39 = ($38|0)!=(0);
  $40 = $39 ? 0 : 1000;
  STACKTOP = sp;return ($40|0);
 } else {
  ___assert_fail((17132|0),(17033|0),453,(17151|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL14LoadSingleBlobP10_QUERY_KEYPKcS2_($pBlob,$szLineBegin,$szLineEnd) {
 $pBlob = $pBlob|0;
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pBlob;
 $1 = $szLineBegin;
 $2 = $szLineEnd;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_j($3,$4,$5,1)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_j($pBlob,$szLineBegin,$szLineEnd,$dwBlobCount) {
 $pBlob = $pBlob|0;
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 $dwBlobCount = $dwBlobCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pBlob;
 $2 = $szLineBegin;
 $3 = $szLineEnd;
 $4 = $dwBlobCount;
 $5 = $3;
 $6 = $2;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $nLength = $9;
 $10 = $nLength;
 $11 = $4;
 $12 = $11<<5;
 $13 = $4;
 $14 = (($13) - 1)|0;
 $15 = $14;
 $16 = (($12) + ($15))|0;
 $17 = ($10>>>0)>($16>>>0);
 if ($17) {
  $0 = 22;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $18 = $4;
 $19 = $18<<4;
 $20 = $19;
 $21 = (_malloc($20)|0);
 $22 = $1;
 HEAP32[$22>>2] = $21;
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $0 = 12;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $26 = $4;
  $27 = $26<<4;
  $28 = $1;
  $29 = ((($28)) + 4|0);
  HEAP32[$29>>2] = $27;
  $30 = $1;
  $31 = $2;
  $32 = $3;
  $33 = $4;
  $34 = (__ZL13LoadBlobArrayP10_QUERY_KEYPKcS2_j($30,$31,$32,$33)|0);
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZL13LoadBlobArrayP10_QUERY_KEYPKcS2_j($pBlob,$szLineBegin,$szLineEnd,$dwMaxBlobs) {
 $pBlob = $pBlob|0;
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 $dwMaxBlobs = $dwMaxBlobs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $pbBuffer = 0, $pbBufferEnd = 0, $szBlobEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $pBlob;
 $2 = $szLineBegin;
 $3 = $szLineEnd;
 $4 = $dwMaxBlobs;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + ($9)|0);
 $pbBufferEnd = $10;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $pbBuffer = $12;
 $nError = 0;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((17011|0),(17033|0),341,(17099|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  ___assert_fail((17113|0),(17033|0),342,(17099|0));
  // unreachable;
 }
 while(1) {
  $20 = $2;
  $21 = $3;
  $22 = ($20>>>0)<($21>>>0);
  $23 = $4;
  $24 = ($23>>>0)>(0);
  $25 = $22 ? $24 : 0;
  if (!($25)) {
   label = 23;
   break;
  }
  $26 = $2;
  $szBlobEnd = $26;
  while(1) {
   $27 = $szBlobEnd;
   $28 = $3;
   $29 = ($27>>>0)<($28>>>0);
   if ($29) {
    $30 = $szBlobEnd;
    $31 = (__ZL16IsValueSeparatorPKc($30)|0);
    $32 = $31&1;
    $33 = ($32|0)==(0);
    $66 = $33;
   } else {
    $66 = 0;
   }
   $34 = $szBlobEnd;
   if (!($66)) {
    break;
   }
   $35 = ((($34)) + 1|0);
   $szBlobEnd = $35;
  }
  $36 = $2;
  $37 = $34;
  $38 = $36;
  $39 = (($37) - ($38))|0;
  $40 = ($39|0)!=(32);
  if ($40) {
   label = 12;
   break;
  }
  $41 = $pbBufferEnd;
  $42 = $pbBuffer;
  $43 = $41;
  $44 = $42;
  $45 = (($43) - ($44))|0;
  $46 = ($45|0)<(16);
  if ($46) {
   label = 14;
   break;
  }
  $47 = $2;
  $48 = $pbBuffer;
  $49 = (__Z21ConvertStringToBinaryPKcjPh($47,32,$48)|0);
  $nError = $49;
  $50 = $nError;
  $51 = ($50|0)!=(0);
  if ($51) {
   label = 16;
   break;
  }
  $53 = $pbBuffer;
  $54 = ((($53)) + 16|0);
  $pbBuffer = $54;
  $55 = $4;
  $56 = (($55) + -1)|0;
  $4 = $56;
  while(1) {
   $57 = $szBlobEnd;
   $58 = $3;
   $59 = ($57>>>0)<($58>>>0);
   if ($59) {
    $60 = $szBlobEnd;
    $61 = (__ZL16IsValueSeparatorPKc($60)|0);
    $67 = $61;
   } else {
    $67 = 0;
   }
   $62 = $szBlobEnd;
   if (!($67)) {
    break;
   }
   $63 = ((($62)) + 1|0);
   $szBlobEnd = $63;
  }
  $2 = $62;
 }
 if ((label|0) == 12) {
  $0 = 1000;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 14) {
  $0 = 12;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 16) {
  $52 = $nError;
  $0 = $52;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 23) {
  $64 = $nError;
  $0 = $64;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function __ZL16IsValueSeparatorPKc($szVarValue) {
 $szVarValue = $szVarValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szVarValue;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (0)<=($3|0);
 if ($4) {
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)<=(32);
  if ($8) {
   $13 = 1;
   STACKTOP = sp;return ($13|0);
  }
 }
 $9 = $0;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)==(124);
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZL11IsCharDigith($OneByte) {
 $OneByte = $OneByte|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $OneByte;
 $1 = $0;
 $2 = $1&255;
 $3 = (48)<=($2|0);
 if ($3) {
  $4 = $0;
  $5 = $4&255;
  $6 = ($5|0)<=(57);
  $7 = $6;
 } else {
  $7 = 0;
 }
 STACKTOP = sp;return ($7|0);
}
function __ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_($pBlob,$szLineBegin,$szLineEnd) {
 $pBlob = $pBlob|0;
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pBlob;
 $1 = $szLineBegin;
 $2 = $szLineEnd;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $1;
 $7 = $2;
 $8 = (__ZL12GetBlobCountPKcS0_($6,$7)|0);
 $9 = (__ZL17LoadMultipleBlobsP10_QUERY_KEYPKcS2_j($3,$4,$5,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZL12GetBlobCountPKcS0_($szLineBegin,$szLineEnd) {
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwBlobCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szLineBegin;
 $1 = $szLineEnd;
 $dwBlobCount = 0;
 L1: while(1) {
  $2 = $0;
  $3 = $1;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  while(1) {
   $5 = $0;
   $6 = $1;
   $7 = ($5>>>0)<($6>>>0);
   if (!($7)) {
    break;
   }
   $8 = $0;
   $9 = (__ZL16IsValueSeparatorPKc($8)|0);
   $10 = $9&1;
   $11 = ($10|0)==(0);
   if (!($11)) {
    break;
   }
   $12 = $0;
   $13 = ((($12)) + 1|0);
   $0 = $13;
  }
  $14 = $dwBlobCount;
  $15 = (($14) + 1)|0;
  $dwBlobCount = $15;
  while(1) {
   $16 = $0;
   $17 = $1;
   $18 = ($16>>>0)<($17>>>0);
   if (!($18)) {
    continue L1;
   }
   $19 = $0;
   $20 = (__ZL16IsValueSeparatorPKc($19)|0);
   if (!($20)) {
    continue L1;
   }
   $21 = $0;
   $22 = ((($21)) + 1|0);
   $0 = $22;
  }
 }
 $23 = $dwBlobCount;
 STACKTOP = sp;return ($23|0);
}
function __ZL20AppendConfigFilePathPcP10_QUERY_KEY($szFileName,$pFileKey) {
 $szFileName = $szFileName|0;
 $pFileKey = $pFileKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szFileName;
 $1 = $pFileKey;
 $2 = $0;
 $3 = (_strlen($2)|0);
 $nLength = $3;
 $4 = $nLength;
 $5 = ($4>>>0)>(0);
 if ($5) {
  $6 = $nLength;
  $7 = (($6) - 1)|0;
  $8 = $0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(92);
  if ($12) {
   $13 = $nLength;
   $14 = (($13) - 1)|0;
   $15 = $0;
   $16 = (($15) + ($14)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)!=(47);
   if ($19) {
    $20 = $nLength;
    $21 = (($20) + 1)|0;
    $nLength = $21;
    $22 = $0;
    $23 = (($22) + ($20)|0);
    HEAP8[$23>>0] = 47;
   }
  }
 }
 $24 = $0;
 $25 = $nLength;
 $26 = (($24) + ($25)|0);
 $0 = $26;
 $27 = $0;
 (_strcpy($27,17268)|0);
 $28 = $0;
 $29 = ((($28)) + 6|0);
 $0 = $29;
 $30 = $0;
 $31 = $1;
 $32 = HEAP32[$31>>2]|0;
 $33 = (__Z14AppendBlobTextPcPhjc($30,$32,1,47)|0);
 $0 = $33;
 $34 = $0;
 $35 = $1;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 1|0);
 $38 = (__Z14AppendBlobTextPcPhjc($34,$37,1,47)|0);
 $0 = $38;
 $39 = $0;
 $40 = $1;
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (__Z14AppendBlobTextPcPhjc($39,$41,$44,47)|0);
 $0 = $45;
 STACKTOP = sp;return;
}
function __ZL16LoadInfoVariableP10_QUERY_KEYPKcS2_b($pVarBlob,$szLineBegin,$szLineEnd,$bHexaValue) {
 $pVarBlob = $pVarBlob|0;
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 $bHexaValue = $bHexaValue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $szLinePtr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pVarBlob;
 $2 = $szLineBegin;
 $3 = $szLineEnd;
 $5 = $bHexaValue&1;
 $4 = $5;
 $6 = $2;
 $szLinePtr = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  ___assert_fail((17275|0),(17033|0),257,(17300|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  ___assert_fail((17317|0),(17033|0),258,(17300|0));
  // unreachable;
 }
 while(1) {
  $14 = $szLinePtr;
  $15 = $3;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $szLinePtr;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(124);
  if (!($20)) {
   break;
  }
  $21 = $szLinePtr;
  $22 = ((($21)) + 1|0);
  $szLinePtr = $22;
 }
 $23 = $4;
 $24 = $23&1;
 $25 = $szLinePtr;
 $26 = $2;
 $27 = $25;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 if ($24) {
  $30 = (($29|0) / 2)&-1;
  $31 = $30;
  $32 = (_malloc($31)|0);
  $33 = $1;
  HEAP32[$33>>2] = $32;
  $34 = $szLinePtr;
  $35 = $2;
  $36 = $34;
  $37 = $35;
  $38 = (($36) - ($37))|0;
  $39 = (($38|0) / 2)&-1;
  $40 = $1;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
  $42 = $2;
  $43 = $szLinePtr;
  $44 = $2;
  $45 = $43;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = $1;
  $49 = HEAP32[$48>>2]|0;
  $50 = (__Z21ConvertStringToBinaryPKcjPh($42,$47,$49)|0);
  $0 = $50;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $51 = (($29) + 1)|0;
 $52 = $51;
 $53 = (_malloc($52)|0);
 $54 = $1;
 HEAP32[$54>>2] = $53;
 $55 = $szLinePtr;
 $56 = $2;
 $57 = $55;
 $58 = $56;
 $59 = (($57) - ($58))|0;
 $60 = $1;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = $59;
 $62 = $1;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $0 = 12;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 } else {
  $65 = $1;
  $66 = HEAP32[$65>>2]|0;
  $67 = $2;
  $68 = $1;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  _memcpy(($66|0),($67|0),($70|0))|0;
  $71 = $1;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $1;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP8[$76>>0] = 0;
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function __ZL14IsInfoVariablePKcS0_S0_S0_($szLineBegin,$szLineEnd,$szVarName,$szVarType) {
 $szLineBegin = $szLineBegin|0;
 $szLineEnd = $szLineEnd|0;
 $szVarName = $szVarName|0;
 $szVarType = $szVarType|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $nLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 20|0;
 $1 = $szLineBegin;
 $2 = $szLineEnd;
 $3 = $szVarName;
 $4 = $szVarType;
 $5 = $3;
 $6 = (_strlen($5)|0);
 $nLength = $6;
 $7 = $2;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = $nLength;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $1;
  $15 = $3;
  $16 = $nLength;
  $17 = (_strncasecmp($14,$15,$16)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = $nLength;
   $20 = $1;
   $21 = (($20) + ($19)|0);
   $1 = $21;
   $22 = $1;
   $23 = $2;
   $24 = ($22>>>0)<($23>>>0);
   if ($24) {
    $25 = $1;
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = ($27|0)==(33);
    if ($28) {
     $29 = $1;
     $30 = ((($29)) + 1|0);
     $1 = $30;
     $31 = $4;
     $32 = (_strlen($31)|0);
     $nLength = $32;
     $33 = $2;
     $34 = $1;
     $35 = $33;
     $36 = $34;
     $37 = (($35) - ($36))|0;
     $38 = $nLength;
     $39 = ($37>>>0)>($38>>>0);
     if ($39) {
      $40 = $1;
      $41 = $4;
      $42 = $nLength;
      $43 = (_strncasecmp($40,$41,$42)|0);
      $44 = ($43|0)!=(0);
      if (!($44)) {
       $45 = $nLength;
       $46 = $1;
       $47 = (($46) + ($45)|0);
       $1 = $47;
       $48 = $1;
       $49 = $2;
       $50 = ($48>>>0)<($49>>>0);
       if ($50) {
        $51 = $1;
        $52 = HEAP8[$51>>0]|0;
        $53 = $52 << 24 >> 24;
        $54 = ($53|0)==(58);
        $55 = $54;
       } else {
        $55 = 0;
       }
       $$expand_i1_val = $55&1;
       HEAP8[$0>>0] = $$expand_i1_val;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $56 = $$pre_trunc&1;
       STACKTOP = sp;return ($56|0);
      }
     }
    }
   }
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $56 = $$pre_trunc&1;
 STACKTOP = sp;return ($56|0);
}
function __ZL20GetDefaultLocaleMaskP13_TCascStorageP10_QUERY_KEY($hs,$pTagsString) {
 $hs = $hs|0;
 $pTagsString = $pTagsString|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwLocaleMask = 0, $szNext = 0;
 var $szTagEnd = 0, $szTagPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $hs;
 $1 = $pTagsString;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $szTagEnd = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $szTagPtr = $9;
 $dwLocaleMask = 0;
 while(1) {
  $10 = $szTagPtr;
  $11 = $szTagEnd;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   label = 11;
   break;
  }
  $13 = $szTagPtr;
  $14 = (_strchr($13,32)|0);
  $szNext = $14;
  $15 = $szNext;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $szNext;
   $18 = ((($17)) + 1|0);
   $szNext = $18;
   HEAP8[$17>>0] = 0;
  }
  $19 = $dwLocaleMask;
  $20 = $szTagPtr;
  $21 = (__ZL13GetLocaleMaskPKc($20)|0);
  $22 = $19 | $21;
  $dwLocaleMask = $22;
  $23 = $szNext;
  $24 = ($23|0)==(0|0);
  if ($24) {
   label = 11;
   break;
  }
  while(1) {
   $25 = $szNext;
   $26 = $szTagEnd;
   $27 = ($25>>>0)<($26>>>0);
   if ($27) {
    $28 = $szNext;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)==(32);
    $37 = $31;
   } else {
    $37 = 0;
   }
   $32 = $szNext;
   if (!($37)) {
    break;
   }
   $33 = ((($32)) + 1|0);
   $szNext = $33;
  }
  $szTagPtr = $32;
 }
 if ((label|0) == 11) {
  $34 = $dwLocaleMask;
  $35 = $0;
  $36 = ((($35)) + 44|0);
  HEAP32[$36>>2] = $34;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZL13GetLocaleMaskPKc($szTag) {
 $szTag = $szTag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $szTag;
 $2 = $1;
 $3 = (_strcmp($2,17403)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = $1;
   $6 = (_strcmp($5,17408)|0);
   $7 = ($6|0)!=(0);
   if (!($7)) {
    $0 = 4;
    break;
   }
   $8 = $1;
   $9 = (_strcmp($8,17413)|0);
   $10 = ($9|0)!=(0);
   if (!($10)) {
    $0 = 16;
    break;
   }
   $11 = $1;
   $12 = (_strcmp($11,17418)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    $0 = 32;
    break;
   }
   $14 = $1;
   $15 = (_strcmp($14,17423)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    $0 = 64;
    break;
   }
   $17 = $1;
   $18 = (_strcmp($17,17428)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    $0 = 128;
    break;
   }
   $20 = $1;
   $21 = (_strcmp($20,17433)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $0 = 256;
    break;
   }
   $23 = $1;
   $24 = (_strcmp($23,17438)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    $0 = 512;
    break;
   }
   $26 = $1;
   $27 = (_strcmp($26,17443)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    $0 = 1024;
    break;
   }
   $29 = $1;
   $30 = (_strcmp($29,17448)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $0 = 2048;
    break;
   }
   $32 = $1;
   $33 = (_strcmp($32,17453)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $0 = 4096;
    break;
   }
   $35 = $1;
   $36 = (_strcmp($35,17458)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $0 = 8192;
    break;
   }
   $38 = $1;
   $39 = (_strcmp($38,17463)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $0 = 16384;
    break;
   }
   $41 = $1;
   $42 = (_strcmp($41,17468)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    $0 = 32768;
    break;
   }
   $44 = $1;
   $45 = (_strcmp($44,17473)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $0 = 0;
    break;
   } else {
    $0 = 65536;
    break;
   }
  } else {
   $0 = 2;
  }
 } while(0);
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _CascFindFirstFile($hStorage,$szMask,$pFindData,$szListFile) {
 $hStorage = $hStorage|0;
 $szMask = $szMask|0;
 $pFindData = $pFindData|0;
 $szListFile = $szListFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0, $nError = 0, $or$cond = 0, $pSearch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $hStorage;
 $1 = $szMask;
 $2 = $pFindData;
 $3 = $szListFile;
 $pSearch = 0;
 $nError = 0;
 $4 = $0;
 $5 = (__Z20IsValidStorageHandlePv($4)|0);
 $hs = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $nError = 9;
 }
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $9 = $2;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $nError = 22;
 }
 $11 = $nError;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $2;
  _memset(($13|0),0,1056)|0;
  $14 = $hs;
  $15 = $3;
  $16 = $1;
  $17 = (__ZL20AllocateSearchHandleP13_TCascStoragePKcS2_($14,$15,$16)|0);
  $pSearch = $17;
  $18 = $pSearch;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $nError = 12;
  }
 }
 $20 = $nError;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = $pSearch;
  $23 = $2;
  $24 = (__ZL15DoStorageSearchP12_TCascSearchP15_CASC_FIND_DATA($22,$23)|0);
  if (!($24)) {
   $nError = 1001;
  }
 }
 $25 = $nError;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $30 = $pSearch;
  STACKTOP = sp;return ($30|0);
 }
 $27 = $pSearch;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $pSearch;
  __ZL16FreeSearchHandleP12_TCascSearch($29);
 }
 $pSearch = 0;
 $30 = $pSearch;
 STACKTOP = sp;return ($30|0);
}
function _CascFindNextFile($hFind,$pFindData) {
 $hFind = $hFind|0;
 $pFindData = $pFindData|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pSearch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 12|0;
 $1 = $hFind;
 $2 = $pFindData;
 $3 = $1;
 $4 = (__ZL19IsValidSearchHandlePv($3)|0);
 $pSearch = $4;
 $5 = $pSearch;
 $6 = ($5|0)==(0|0);
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  _SetLastError(22);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $12 = $$pre_trunc&1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $pSearch;
  $10 = $2;
  $11 = (__ZL15DoStorageSearchP12_TCascSearchP15_CASC_FIND_DATA($9,$10)|0);
  $$expand_i1_val3 = $11&1;
  HEAP8[$0>>0] = $$expand_i1_val3;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $12 = $$pre_trunc&1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _CascFindClose($hFind) {
 $hFind = $hFind|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pSearch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = $hFind;
 $2 = $1;
 $3 = (__ZL19IsValidSearchHandlePv($2)|0);
 $pSearch = $3;
 $4 = $pSearch;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _SetLastError(22);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $6 = $pSearch;
  __ZL16FreeSearchHandleP12_TCascSearch($6);
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __ZL20AllocateSearchHandleP13_TCascStoragePKcS2_($hs,$szListFile,$szMask) {
 $hs = $hs|0;
 $szListFile = $szListFile|0;
 $szMask = $szMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cbToAllocate = 0, $pSearch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hs;
 $2 = $szListFile;
 $3 = $szMask;
 $4 = $1;
 $5 = ((($4)) + 1820|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 7)|0;
 $9 = (($8>>>0) / 8)&-1;
 $10 = (1064 + ($9))|0;
 $cbToAllocate = $10;
 $11 = $cbToAllocate;
 $12 = $11;
 $13 = (_malloc($12)|0);
 $pSearch = $13;
 $14 = $pSearch;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $pSearch;
  $17 = $cbToAllocate;
  _memset(($16|0),0,($17|0))|0;
  $18 = $pSearch;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = 17478;
  $20 = $1;
  $21 = $pSearch;
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$23>>2] = $25;
  $26 = $3;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $3 = 17592;
  }
  $28 = $2;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $2;
   $31 = (__Z10CascNewStrPKcj($30,0)|0);
   $32 = $pSearch;
   $33 = ((($32)) + 8|0);
   HEAP32[$33>>2] = $31;
   $34 = $pSearch;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $38 = $pSearch;
    __ZL16FreeSearchHandleP12_TCascSearch($38);
    $0 = 0;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  }
  $39 = $3;
  $40 = (__Z10CascNewStrPKcj($39,0)|0);
  $41 = $pSearch;
  $42 = ((($41)) + 16|0);
  HEAP32[$42>>2] = $40;
  $43 = $pSearch;
  $44 = ((($43)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   $47 = $pSearch;
   __ZL16FreeSearchHandleP12_TCascSearch($47);
   $0 = 0;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  }
 }
 $48 = $pSearch;
 $0 = $48;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function __ZL15DoStorageSearchP12_TCascSearchP15_CASC_FIND_DATA($pSearch,$pFindData) {
 $pSearch = $pSearch|0;
 $pFindData = $pFindData|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = $pSearch;
 $2 = $pFindData;
 $3 = $1;
 $4 = ((($3)) + 1056|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $1;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (__Z21ListFile_OpenExternalPKc($13)|0);
   $15 = $1;
   $16 = ((($15)) + 12|0);
   HEAP32[$16>>2] = $14;
  }
  $17 = $1;
  $18 = ((($17)) + 1048|0);
  HEAP32[$18>>2] = 0;
  $19 = $1;
  $20 = ((($19)) + 1056|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$20>>2] = $22;
 }
 $23 = $1;
 $24 = ((($23)) + 1056|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 do {
  if ($26) {
   $27 = $1;
   $28 = $2;
   $29 = (__ZL24DoStorageSearch_RootFileP12_TCascSearchP15_CASC_FIND_DATA($27,$28)|0);
   if (!($29)) {
    $30 = $1;
    $31 = ((($30)) + 1048|0);
    HEAP32[$31>>2] = 0;
    $32 = $1;
    $33 = ((($32)) + 1056|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$33>>2] = $35;
    break;
   }
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $47 = $$pre_trunc&1;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $36 = $1;
 $37 = ((($36)) + 1056|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(2);
 do {
  if ($39) {
   $40 = $1;
   $41 = $2;
   $42 = (__ZL27DoStorageSearch_EncodingKeyP12_TCascSearchP15_CASC_FIND_DATA($40,$41)|0);
   if (!($42)) {
    $43 = $1;
    $44 = ((($43)) + 1056|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 1)|0;
    HEAP32[$44>>2] = $46;
    break;
   }
   $$expand_i1_val2 = 1;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $47 = $$pre_trunc&1;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $$expand_i1_val4 = 0;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $47 = $$pre_trunc&1;
 STACKTOP = sp;return ($47|0);
}
function __ZL16FreeSearchHandleP12_TCascSearch($pSearch) {
 $pSearch = $pSearch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pSearch;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((17490|0),(17506|0),28,(17575|0));
  // unreachable;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 1840|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  __Z21RootHandler_EndSearchP12TRootHandlerP12_TCascSearch($9,$10);
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  (_CascCloseStorage($12)|0);
  $13 = $0;
  HEAP32[$13>>2] = 0;
 }
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = $0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  _free($27);
 }
 $28 = $0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  $35 = $0;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = 0;
  $37 = $0;
  _free($37);
  STACKTOP = sp;return;
 }
 $32 = $0;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 __Z13ListFile_FreePv($34);
 $35 = $0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = $0;
 _free($37);
 STACKTOP = sp;return;
}
function __ZL19IsValidSearchHandlePv($hFind) {
 $hFind = $hFind|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pSearch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hFind;
 $1 = $0;
 $pSearch = $1;
 $2 = $pSearch;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return (0|0);
 }
 $4 = $pSearch;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return (0|0);
 }
 $8 = $pSearch;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_strcmp($10,17478)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return (0|0);
 } else {
  $13 = $pSearch;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = $pSearch;
  $$ = $16 ? $17 : 0;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __ZL24DoStorageSearch_RootFileP12_TCascSearchP15_CASC_FIND_DATA($pSearch,$pFindData) {
 $pSearch = $pSearch|0;
 $pFindData = $pFindData|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $BitMask = 0, $ByteIndex = 0, $EncodingIndex = 0, $EncodingKey = 0, $FileDataId = 0, $FileSize = 0, $IndexKey = 0, $LocaleFlags = 0, $pEncodingEntry = 0, $pIndexEntry = 0;
 var $pbEncodingKey = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $0 = sp + 64|0;
 $EncodingKey = sp + 40|0;
 $IndexKey = sp + 32|0;
 $EncodingIndex = sp + 20|0;
 $LocaleFlags = sp + 8|0;
 $FileDataId = sp + 4|0;
 $FileSize = sp;
 $1 = $pSearch;
 $2 = $pFindData;
 HEAP32[$EncodingIndex>>2] = 0;
 while(1) {
  HEAP32[$LocaleFlags>>2] = 0;
  HEAP32[$FileDataId>>2] = -1;
  HEAP32[$FileSize>>2] = -1;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 1840|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (__Z18RootHandler_SearchP12TRootHandlerP12_TCascSearchPjS3_S3_($6,$7,$FileSize,$LocaleFlags,$FileDataId)|0);
  $pbEncodingKey = $8;
  $9 = $pbEncodingKey;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 3;
   break;
  }
  $11 = $pbEncodingKey;
  HEAP32[$EncodingKey>>2] = $11;
  $12 = ((($EncodingKey)) + 4|0);
  HEAP32[$12>>2] = 16;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = (__Z17FindEncodingEntryP13_TCascStorageP10_QUERY_KEYPj($14,$EncodingKey,$EncodingIndex)|0);
  $pEncodingEntry = $15;
  $16 = $pEncodingEntry;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   continue;
  }
  $18 = HEAP32[$EncodingIndex>>2]|0;
  $19 = (($18>>>0) / 8)&-1;
  $ByteIndex = $19;
  $20 = HEAP32[$EncodingIndex>>2]|0;
  $21 = $20 & 7;
  $22 = 1 << $21;
  $BitMask = $22;
  $23 = $BitMask;
  $24 = $ByteIndex;
  $25 = $1;
  $26 = ((($25)) + 1060|0);
  $27 = (($26) + ($24)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 | $23;
  $31 = $30&255;
  HEAP8[$27>>0] = $31;
  $32 = $pEncodingEntry;
  $33 = ((($32)) + 6|0);
  $34 = ((($33)) + 16|0);
  HEAP32[$IndexKey>>2] = $34;
  $35 = ((($IndexKey)) + 4|0);
  HEAP32[$35>>2] = 16;
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = (__Z14FindIndexEntryP13_TCascStorageP10_QUERY_KEY($37,$IndexKey)|0);
  $pIndexEntry = $38;
  $39 = $pIndexEntry;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   break;
  }
 }
 if ((label|0) == 3) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $41 = HEAP32[$FileSize>>2]|0;
 $42 = ($41|0)==(-1);
 if ($42) {
  $43 = $pEncodingEntry;
  $44 = ((($43)) + 2|0);
  $45 = (__Z23ConvertBytesToInteger_4Ph($44)|0);
  HEAP32[$FileSize>>2] = $45;
 }
 $46 = $2;
 $47 = $1;
 $48 = ((($47)) + 20|0);
 (_strcpy($46,$48)|0);
 $49 = $2;
 $50 = ((($49)) + 1028|0);
 $51 = $pEncodingEntry;
 $52 = ((($51)) + 6|0);
 dest=$50; src=$52; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $53 = $2;
 $54 = (__Z16GetPlainFileNamePKc($53)|0);
 $55 = $2;
 $56 = ((($55)) + 1024|0);
 HEAP32[$56>>2] = $54;
 $57 = HEAP32[$LocaleFlags>>2]|0;
 $58 = $2;
 $59 = ((($58)) + 1044|0);
 HEAP32[$59>>2] = $57;
 $60 = HEAP32[$FileDataId>>2]|0;
 $61 = $2;
 $62 = ((($61)) + 1048|0);
 HEAP32[$62>>2] = $60;
 $63 = HEAP32[$FileSize>>2]|0;
 $64 = $2;
 $65 = ((($64)) + 1052|0);
 HEAP32[$65>>2] = $63;
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZL27DoStorageSearch_EncodingKeyP12_TCascSearchP15_CASC_FIND_DATA($pSearch,$pFindData) {
 $pSearch = $pSearch|0;
 $pFindData = $pFindData|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $8 = 0, $9 = 0, $BitMask = 0, $ByteIndex = 0, $IndexKey = 0, $hs = 0, $pEncodingEntry = 0, $pIndexEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 36|0;
 $IndexKey = sp + 8|0;
 $1 = $pSearch;
 $2 = $pFindData;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $hs = $4;
 while(1) {
  $5 = $1;
  $6 = ((($5)) + 1048|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $hs;
  $9 = ((($8)) + 1820|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($7>>>0)<($11>>>0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $1;
  $14 = ((($13)) + 1048|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15>>>0) / 8)&-1;
  $ByteIndex = $16;
  $17 = $1;
  $18 = ((($17)) + 1048|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 7;
  $21 = 1 << $20;
  $BitMask = $21;
  $22 = $ByteIndex;
  $23 = $1;
  $24 = ((($23)) + 1060|0);
  $25 = (($24) + ($22)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $BitMask;
  $29 = $27 & $28;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $1;
   $32 = ((($31)) + 1048|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $hs;
   $35 = ((($34)) + 1820|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 16|0);
   $38 = (($37) + ($33<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $pEncodingEntry = $39;
   $40 = $pEncodingEntry;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $pEncodingEntry;
    $43 = ((($42)) + 6|0);
    $44 = ((($43)) + 16|0);
    HEAP32[$IndexKey>>2] = $44;
    $45 = ((($IndexKey)) + 4|0);
    HEAP32[$45>>2] = 16;
    $46 = $1;
    $47 = HEAP32[$46>>2]|0;
    $48 = (__Z14FindIndexEntryP13_TCascStorageP10_QUERY_KEY($47,$IndexKey)|0);
    $pIndexEntry = $48;
    $49 = $pIndexEntry;
    $50 = ($49|0)!=(0|0);
    if ($50) {
     label = 6;
     break;
    }
   }
  }
  $74 = $1;
  $75 = ((($74)) + 1048|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
 }
 if ((label|0) == 6) {
  $51 = $2;
  $52 = ((($51)) + 1028|0);
  $53 = $pEncodingEntry;
  $54 = ((($53)) + 6|0);
  dest=$52; src=$54; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $55 = $2;
  HEAP8[$55>>0] = 0;
  $56 = $2;
  $57 = ((($56)) + 1024|0);
  HEAP32[$57>>2] = 0;
  $58 = $2;
  $59 = ((($58)) + 1044|0);
  HEAP32[$59>>2] = 0;
  $60 = $pEncodingEntry;
  $61 = ((($60)) + 2|0);
  $62 = (__Z23ConvertBytesToInteger_4Ph($61)|0);
  $63 = $2;
  $64 = ((($63)) + 1052|0);
  HEAP32[$64>>2] = $62;
  $65 = $BitMask;
  $66 = $ByteIndex;
  $67 = $1;
  $68 = ((($67)) + 1060|0);
  $69 = (($68) + ($66)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 | $65;
  $73 = $72&255;
  HEAP8[$69>>0] = $73;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $78 = $$pre_trunc&1;
  STACKTOP = sp;return ($78|0);
 }
 else if ((label|0) == 8) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $78 = $$pre_trunc&1;
  STACKTOP = sp;return ($78|0);
 }
 return (0)|0;
}
function __Z17IsValidFileHandlePv($hFile) {
 $hFile = $hFile|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hFile;
 $1 = $0;
 $hf = $1;
 $2 = $hf;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return (0|0);
 }
 $4 = $hf;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return (0|0);
 }
 $7 = $hf;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $hf;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_strcmp($13,17594)|0);
  $15 = ($14|0)!=(0);
  $16 = $hf;
  $$ = $15 ? 0 : $16;
  STACKTOP = sp;return ($$|0);
 } else {
  STACKTOP = sp;return (0|0);
 }
 return (0)|0;
}
function __Z14FindIndexEntryP13_TCascStorageP10_QUERY_KEY($hs,$pIndexKey) {
 $hs = $hs|0;
 $pIndexKey = $pIndexKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIndexEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $pIndexKey;
 $pIndexEntry = 0;
 $2 = $0;
 $3 = ((($2)) + 1808|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $12 = $pIndexEntry;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $0;
 $7 = ((($6)) + 1808|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($8,$10,0)|0);
 $pIndexEntry = $11;
 $12 = $pIndexEntry;
 STACKTOP = sp;return ($12|0);
}
function __Z17FindEncodingEntryP13_TCascStorageP10_QUERY_KEYPj($hs,$pEncodingKey,$PtrIndex) {
 $hs = $hs|0;
 $pEncodingKey = $pEncodingKey|0;
 $PtrIndex = $PtrIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pEncodingEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $pEncodingKey;
 $2 = $PtrIndex;
 $pEncodingEntry = 0;
 $3 = $0;
 $4 = ((($3)) + 1820|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $14 = $pEncodingEntry;
  STACKTOP = sp;return ($14|0);
 }
 $7 = $0;
 $8 = ((($7)) + 1820|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($9,$11,$12)|0);
 $pEncodingEntry = $13;
 $14 = $pEncodingEntry;
 STACKTOP = sp;return ($14|0);
}
function _CascOpenFileByIndexKey($hStorage,$pIndexKey,$dwFlags,$phFile) {
 $hStorage = $hStorage|0;
 $pIndexKey = $pIndexKey|0;
 $dwFlags = $dwFlags|0;
 $phFile = $phFile|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 20|0;
 $1 = $hStorage;
 $2 = $pIndexKey;
 $3 = $dwFlags;
 $4 = $phFile;
 $5 = $1;
 $6 = (__Z20IsValidStorageHandlePv($5)|0);
 $hs = $6;
 $7 = $hs;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   _SetLastError(9);
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $9 = $2;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = $2;
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     $14 = $2;
     $15 = ((($14)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0);
     $18 = $4;
     $19 = ($18|0)==(0|0);
     $or$cond = $17 | $19;
     if (!($or$cond)) {
      $20 = $hs;
      $21 = $2;
      $22 = $3;
      $23 = $4;
      $24 = (__ZL18OpenFileByIndexKeyP13_TCascStorageP10_QUERY_KEYjPP10_TCascFile($20,$21,$22,$23)|0);
      $$expand_i1_val5 = $24&1;
      HEAP8[$0>>0] = $$expand_i1_val5;
      break;
     }
    }
   }
   _SetLastError(22);
   $$expand_i1_val3 = 0;
   HEAP8[$0>>0] = $$expand_i1_val3;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $25 = $$pre_trunc&1;
 STACKTOP = sp;return ($25|0);
}
function _CascOpenFileByEncodingKey($hStorage,$pEncodingKey,$dwFlags,$phFile) {
 $hStorage = $hStorage|0;
 $pEncodingKey = $pEncodingKey|0;
 $dwFlags = $dwFlags|0;
 $phFile = $phFile|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 20|0;
 $1 = $hStorage;
 $2 = $pEncodingKey;
 $3 = $dwFlags;
 $4 = $phFile;
 $5 = $1;
 $6 = (__Z20IsValidStorageHandlePv($5)|0);
 $hs = $6;
 $7 = $hs;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _SetLastError(9);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $25 = $$pre_trunc&1;
  STACKTOP = sp;return ($25|0);
 }
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = $2;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   $18 = $4;
   $19 = ($18|0)==(0|0);
   $or$cond = $17 | $19;
   if (!($or$cond)) {
    $20 = $hs;
    $21 = $2;
    $22 = $3;
    $23 = $4;
    $24 = (__ZL21OpenFileByEncodingKeyP13_TCascStorageP10_QUERY_KEYjPP10_TCascFile($20,$21,$22,$23)|0);
    $$expand_i1_val5 = $24&1;
    HEAP8[$0>>0] = $$expand_i1_val5;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $25 = $$pre_trunc&1;
    STACKTOP = sp;return ($25|0);
   }
  }
 }
 _SetLastError(22);
 $$expand_i1_val3 = 0;
 HEAP8[$0>>0] = $$expand_i1_val3;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $25 = $$pre_trunc&1;
 STACKTOP = sp;return ($25|0);
}
function _CascOpenFile($hStorage,$szFileName,$dwLocale,$dwFlags,$phFile) {
 $hStorage = $hStorage|0;
 $szFileName = $szFileName|0;
 $dwLocale = $dwLocale|0;
 $dwFlags = $dwFlags|0;
 $phFile = $phFile|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $EncodingKey = 0, $KeyBuffer = 0, $hs = 0;
 var $nError = 0, $or$cond = 0, $pbEncodingKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp + 56|0;
 $EncodingKey = sp + 8|0;
 $KeyBuffer = sp + 40|0;
 $1 = $hStorage;
 $2 = $szFileName;
 $3 = $dwLocale;
 $4 = $dwFlags;
 $5 = $phFile;
 $nError = 0;
 $6 = $1;
 $7 = (__Z20IsValidStorageHandlePv($6)|0);
 $hs = $7;
 $8 = $hs;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _SetLastError(9);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $50 = $$pre_trunc&1;
  STACKTOP = sp;return ($50|0);
 }
 $10 = $2;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $2;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(0);
  $16 = $5;
  $17 = ($16|0)==(0|0);
  $or$cond = $15 | $17;
  if (!($or$cond)) {
   $18 = $4;
   $19 = $18 & 1;
   $20 = ($19|0)==(0);
   do {
    if ($20) {
     $21 = $hs;
     $22 = ((($21)) + 1840|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $2;
     $25 = (__Z18RootHandler_GetKeyP12TRootHandlerPKc($23,$24)|0);
     $pbEncodingKey = $25;
     $26 = $pbEncodingKey;
     $27 = ($26|0)==(0|0);
     if (!($27)) {
      $28 = $pbEncodingKey;
      HEAP32[$EncodingKey>>2] = $28;
      $29 = ((($EncodingKey)) + 4|0);
      HEAP32[$29>>2] = 16;
      break;
     }
     _SetLastError(2);
     $$expand_i1_val5 = 0;
     HEAP8[$0>>0] = $$expand_i1_val5;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $50 = $$pre_trunc&1;
     STACKTOP = sp;return ($50|0);
    } else {
     $30 = $2;
     $31 = (_strlen($30)|0);
     $32 = ($31>>>0)<(32);
     if (!($32)) {
      HEAP32[$EncodingKey>>2] = $KeyBuffer;
      $33 = ((($EncodingKey)) + 4|0);
      HEAP32[$33>>2] = 16;
      $34 = $2;
      $35 = (__Z21ConvertStringToBinaryPKcjPh($34,32,$KeyBuffer)|0);
      $nError = $35;
      break;
     }
     _SetLastError(22);
     $$expand_i1_val7 = 0;
     HEAP8[$0>>0] = $$expand_i1_val7;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $50 = $$pre_trunc&1;
     STACKTOP = sp;return ($50|0);
    }
   } while(0);
   $36 = $nError;
   $37 = ($36|0)==(0);
   do {
    if ($37) {
     $38 = $hs;
     $39 = $4;
     $40 = $5;
     $41 = (__ZL21OpenFileByEncodingKeyP13_TCascStorageP10_QUERY_KEYjPP10_TCascFile($38,$EncodingKey,$39,$40)|0);
     if (!($41)) {
      $42 = (_GetLastError()|0);
      $43 = ($42|0)!=(0);
      if ($43) {
       $44 = (_GetLastError()|0);
       $nError = $44;
       break;
      } else {
       ___assert_fail((17604|0),(17636|0),259,(17705|0));
       // unreachable;
      }
     }
    }
   } while(0);
   $45 = $nError;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $nError;
    _SetLastError($47);
   }
   $48 = $nError;
   $49 = ($48|0)==(0);
   $$expand_i1_val9 = $49&1;
   HEAP8[$0>>0] = $$expand_i1_val9;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $50 = $$pre_trunc&1;
   STACKTOP = sp;return ($50|0);
  }
 }
 _SetLastError(22);
 $$expand_i1_val3 = 0;
 HEAP8[$0>>0] = $$expand_i1_val3;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $50 = $$pre_trunc&1;
 STACKTOP = sp;return ($50|0);
}
function _CascGetFileId($hStorage,$szFileName) {
 $hStorage = $hStorage|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $hStorage;
 $2 = $szFileName;
 $3 = $1;
 $4 = (__Z20IsValidStorageHandlePv($3)|0);
 $hs = $4;
 $5 = $hs;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _SetLastError(9);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $2;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $2;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = $hs;
   $14 = ((($13)) + 1840|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $2;
   $17 = (__Z21RootHandler_GetFileIdP12TRootHandlerPKc($15,$16)|0);
   $0 = $17;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
 }
 _SetLastError(22);
 $0 = 0;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _CascCloseFile($hFile) {
 $hFile = $hFile|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = $hFile;
 $2 = $1;
 $3 = (__Z17IsValidFileHandlePv($2)|0);
 $hf = $3;
 $4 = $hf;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _SetLastError(9);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $29 = $$pre_trunc&1;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $hf;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $hf;
  $10 = HEAP32[$9>>2]|0;
  (_CascCloseStorage($10)|0);
 }
 $11 = $hf;
 HEAP32[$11>>2] = 0;
 $12 = $hf;
 $13 = ((($12)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $hf;
  $17 = ((($16)) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  _free($18);
 }
 $19 = $hf;
 $20 = ((($19)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $hf;
  $24 = ((($23)) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  _free($25);
 }
 $26 = $hf;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = $hf;
 _free($28);
 $$expand_i1_val = 1;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $29 = $$pre_trunc&1;
 STACKTOP = sp;return ($29|0);
}
function __ZL18OpenFileByIndexKeyP13_TCascStorageP10_QUERY_KEYjPP10_TCascFile($hs,$pIndexKey,$dwFlags,$ppCascFile) {
 $hs = $hs|0;
 $pIndexKey = $pIndexKey|0;
 $dwFlags = $dwFlags|0;
 $ppCascFile = $ppCascFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $nError = 0, $pIndexEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $hs;
 $1 = $pIndexKey;
 $2 = $dwFlags;
 $3 = $ppCascFile;
 $nError = 0;
 $4 = $0;
 $5 = $1;
 $6 = (__Z14FindIndexEntryP13_TCascStorageP10_QUERY_KEY($4,$5)|0);
 $pIndexEntry = $6;
 $7 = $pIndexEntry;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $nError = 2;
 }
 $9 = $nError;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $0;
  $12 = $pIndexEntry;
  $13 = (__ZL16CreateFileHandleP13_TCascStorageP17_CASC_INDEX_ENTRY($11,$12)|0);
  $14 = $3;
  HEAP32[$14>>2] = $13;
  $15 = $3;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $nError = 2;
  }
 }
 $18 = $nError;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $21 = $nError;
  $22 = ($21|0)==(0);
  STACKTOP = sp;return ($22|0);
 }
 $20 = $nError;
 _SetLastError($20);
 $21 = $nError;
 $22 = ($21|0)==(0);
 STACKTOP = sp;return ($22|0);
}
function __ZL21OpenFileByEncodingKeyP13_TCascStorageP10_QUERY_KEYjPP10_TCascFile($hs,$pEncodingKey,$dwFlags,$ppCascFile) {
 $hs = $hs|0;
 $pEncodingKey = $pEncodingKey|0;
 $dwFlags = $dwFlags|0;
 $ppCascFile = $ppCascFile|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $IndexKey = 0, $pEncodingEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 28|0;
 $IndexKey = sp;
 $1 = $hs;
 $2 = $pEncodingKey;
 $3 = $dwFlags;
 $4 = $ppCascFile;
 $5 = $1;
 $6 = $2;
 $7 = (__Z17FindEncodingEntryP13_TCascStorageP10_QUERY_KEYPj($5,$6,0)|0);
 $pEncodingEntry = $7;
 $8 = $pEncodingEntry;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _SetLastError(2);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $pEncodingEntry;
 $11 = ((($10)) + 6|0);
 $12 = ((($11)) + 16|0);
 HEAP32[$IndexKey>>2] = $12;
 $13 = ((($IndexKey)) + 4|0);
 HEAP32[$13>>2] = 16;
 $14 = $1;
 $15 = $3;
 $16 = $4;
 $17 = (__ZL18OpenFileByIndexKeyP13_TCascStorageP10_QUERY_KEYjPP10_TCascFile($14,$IndexKey,$15,$16)|0);
 if ($17) {
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $pEncodingEntry;
   $22 = ((($21)) + 2|0);
   $23 = (__Z23ConvertBytesToInteger_4Ph($22)|0);
   $24 = $4;
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 36|0);
   HEAP32[$26>>2] = $23;
   $$expand_i1_val2 = 1;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $27 = $$pre_trunc&1;
   STACKTOP = sp;return ($27|0);
  }
 }
 $$expand_i1_val4 = 0;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $27 = $$pre_trunc&1;
 STACKTOP = sp;return ($27|0);
}
function __ZL16CreateFileHandleP13_TCascStorageP17_CASC_INDEX_ENTRY($hs,$pIndexEntry) {
 $hs = $hs|0;
 $pIndexEntry = $pIndexEntry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $FileOffsMask = 0, $FileOffset = 0, $hf = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $FileOffsMask = sp + 8|0;
 $FileOffset = sp;
 $0 = $hs;
 $1 = $pIndexEntry;
 $2 = $0;
 $3 = ((($2)) + 1168|0);
 $4 = ((($3)) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (_bitshift64Shl(1,0,($6|0))|0);
 $8 = tempRet0;
 $9 = (_i64Subtract(($7|0),($8|0),1,0)|0);
 $10 = tempRet0;
 $11 = $FileOffsMask;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = $1;
 $16 = ((($15)) + 9|0);
 $17 = (__Z23ConvertBytesToInteger_5Ph($16)|0);
 $18 = tempRet0;
 $19 = $FileOffset;
 $20 = $19;
 HEAP32[$20>>2] = $17;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 $23 = (_malloc(80)|0);
 $hf = $23;
 $24 = $hf;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $75 = $hf;
  STACKTOP = sp;return ($75|0);
 }
 $26 = $hf;
 dest=$26; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $27 = $FileOffset;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $0;
 $34 = ((($33)) + 1168|0);
 $35 = ((($34)) + 16|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (_bitshift64Lshr(($29|0),($32|0),($37|0))|0);
 $39 = tempRet0;
 $40 = $hf;
 $41 = ((($40)) + 16|0);
 HEAP32[$41>>2] = $38;
 $42 = $FileOffset;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = $FileOffsMask;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = $44 & $50;
 $47 & $53;
 $55 = $hf;
 $56 = ((($55)) + 20|0);
 HEAP32[$56>>2] = $54;
 $57 = $hf;
 $58 = ((($57)) + 8|0);
 HEAP32[$58>>2] = 17594;
 $59 = $1;
 $60 = ((($59)) + 14|0);
 $61 = (__Z26ConvertBytesToInteger_4_LEPh($60)|0);
 $62 = $hf;
 $63 = ((($62)) + 32|0);
 HEAP32[$63>>2] = $61;
 $64 = $hf;
 $65 = ((($64)) + 32|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $hf;
 $68 = ((($67)) + 36|0);
 HEAP32[$68>>2] = $66;
 $69 = $0;
 $70 = ((($69)) + 28|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + 1)|0;
 HEAP32[$70>>2] = $72;
 $73 = $0;
 $74 = $hf;
 HEAP32[$74>>2] = $73;
 $75 = $hf;
 STACKTOP = sp;return ($75|0);
}
function __Z20IsValidStorageHandlePv($hStorage) {
 $hStorage = $hStorage|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hStorage;
 $1 = $0;
 $hs = $1;
 $2 = $hs;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return (0|0);
 }
 $4 = $hs;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $hs;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_strcmp($8,17718)|0);
  $10 = ($9|0)!=(0);
  $11 = $hs;
  $$ = $10 ? 0 : $11;
  STACKTOP = sp;return ($$|0);
 } else {
  STACKTOP = sp;return (0|0);
 }
 return (0)|0;
}
function _CascOpenStorage($szDataPath,$dwLocaleMask,$phStorage) {
 $szDataPath = $szDataPath|0;
 $dwLocaleMask = $dwLocaleMask|0;
 $phStorage = $phStorage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $szDataPath;
 $1 = $dwLocaleMask;
 $2 = $phStorage;
 $nError = 0;
 $3 = (_malloc(1848)|0);
 $hs = $3;
 $4 = $hs;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $nError = 12;
 }
 $6 = $nError;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $hs;
  _memset(($8|0),0,1848)|0;
  $9 = $hs;
  HEAP32[$9>>2] = 17718;
  $10 = $hs;
  $11 = ((($10)) + 40|0);
  HEAP32[$11>>2] = -1;
  $12 = $hs;
  $13 = ((($12)) + 44|0);
  HEAP32[$13>>2] = 514;
  $14 = $hs;
  $15 = ((($14)) + 28|0);
  HEAP32[$15>>2] = 1;
  $16 = $hs;
  $17 = $0;
  $18 = (__ZL25InitializeCascDirectoriesP13_TCascStoragePKc($16,$17)|0);
  $nError = $18;
 }
 $19 = $nError;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = $hs;
  $22 = (__Z13LoadBuildInfoP13_TCascStorage($21)|0);
  $nError = $22;
 }
 $23 = $nError;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $hs;
  $26 = (__ZL14LoadIndexFilesP13_TCascStorage($25)|0);
  $nError = $26;
 }
 $27 = $nError;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = $hs;
  $30 = (__ZL16LoadEncodingFileP13_TCascStorage($29)|0);
  $nError = $30;
 }
 $31 = $nError;
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = $hs;
  $34 = ((($33)) + 1824|0);
  $35 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($34,38,32)|0);
  $nError = $35;
 }
 $36 = $nError;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $hs;
  $39 = $1;
  $40 = (__ZL12LoadRootFileP13_TCascStoragej($38,$39)|0);
  $nError = $40;
 }
 $41 = $nError;
 $42 = ($41|0)!=(0);
 if (!($42)) {
  $46 = $hs;
  $47 = $2;
  HEAP32[$47>>2] = $46;
  $48 = $nError;
  $49 = ($48|0)==(0);
  STACKTOP = sp;return ($49|0);
 }
 $43 = $hs;
 $44 = (__ZL15FreeCascStorageP13_TCascStorage($43)|0);
 $hs = $44;
 $45 = $nError;
 _SetLastError($45);
 $46 = $hs;
 $47 = $2;
 HEAP32[$47>>2] = $46;
 $48 = $nError;
 $49 = ($48|0)==(0);
 STACKTOP = sp;return ($49|0);
}
function _CascGetStorageInfo($hStorage,$InfoClass,$pvStorageInfo,$cbStorageInfo,$pcbLengthNeeded) {
 $hStorage = $hStorage|0;
 $InfoClass = $InfoClass|0;
 $pvStorageInfo = $pvStorageInfo|0;
 $cbStorageInfo = $cbStorageInfo|0;
 $pcbLengthNeeded = $pcbLengthNeeded|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $dwInfoValue = 0, $hs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 28|0;
 $1 = $hStorage;
 $2 = $InfoClass;
 $3 = $pvStorageInfo;
 $4 = $cbStorageInfo;
 $5 = $pcbLengthNeeded;
 $dwInfoValue = 0;
 $6 = $1;
 $7 = (__Z20IsValidStorageHandlePv($6)|0);
 $hs = $7;
 $8 = $hs;
 $9 = ($8|0)==(0|0);
 L1: do {
  if ($9) {
   _SetLastError(9);
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $10 = $2;
   switch ($10|0) {
   case 0:  {
    $11 = $hs;
    $12 = ((($11)) + 1808|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $dwInfoValue = $15;
    break;
   }
   case 1:  {
    $16 = $hs;
    $17 = ((($16)) + 1840|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & 1;
    $22 = ($21|0)!=(0);
    $23 = $22 ? 1 : 0;
    $24 = $dwInfoValue;
    $25 = $24 | $23;
    $dwInfoValue = $25;
    break;
   }
   case 2:  {
    $26 = $hs;
    $27 = ((($26)) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    $dwInfoValue = $28;
    break;
   }
   case 3:  {
    $29 = $hs;
    $30 = ((($29)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $dwInfoValue = $31;
    break;
   }
   default: {
    _SetLastError(22);
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break L1;
   }
   }
   $32 = $4;
   $33 = ($32>>>0)<(4);
   if ($33) {
    $34 = $5;
    HEAP32[$34>>2] = 4;
    _SetLastError(105);
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   } else {
    $35 = $dwInfoValue;
    $36 = $3;
    HEAP32[$36>>2] = $35;
    $$expand_i1_val6 = 1;
    HEAP8[$0>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $37 = $$pre_trunc&1;
 STACKTOP = sp;return ($37|0);
}
function _CascCloseStorage($hStorage) {
 $hStorage = $hStorage|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = $hStorage;
 $2 = $1;
 $3 = (__Z20IsValidStorageHandlePv($2)|0);
 $hs = $3;
 $4 = $hs;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   _SetLastError(22);
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $6 = $hs;
   $7 = ((($6)) + 28|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   $10 = $hs;
   if ($9) {
    (__ZL15FreeCascStorageP13_TCascStorage($10)|0);
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    $11 = ((($10)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + -1)|0;
    HEAP32[$11>>2] = $13;
    $$expand_i1_val4 = 1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $14 = $$pre_trunc&1;
 STACKTOP = sp;return ($14|0);
}
function __ZL25InitializeCascDirectoriesP13_TCascStoragePKc($hs,$szDataPath) {
 $hs = $hs|0;
 $szDataPath = $szDataPath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $szWorkPath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $szDataPath;
 $nError = 12;
 $2 = $1;
 $3 = (__Z10CascNewStrPKcj($2,0)|0);
 $szWorkPath = $3;
 $4 = $szWorkPath;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $14 = $nError;
  STACKTOP = sp;return ($14|0);
 }
 while(1) {
  $6 = $0;
  $7 = $szWorkPath;
  $8 = (__Z18CheckGameDirectoryP13_TCascStoragePc($6,$7)|0);
  $nError = $8;
  $9 = $nError;
  $10 = ($9|0)==(0);
  if ($10) {
   label = 3;
   break;
  }
  $11 = $szWorkPath;
  $12 = (__ZL15CutLastPathPartPc($11)|0);
  if (!($12)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  $nError = 0;
 }
 else if ((label|0) == 5) {
  $nError = 2;
 }
 $13 = $szWorkPath;
 _free($13);
 $14 = $nError;
 STACKTOP = sp;return ($14|0);
}
function __ZL14LoadIndexFilesP13_TCascStorage($hs) {
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $IndexArray = 0, $OldIndexArray = 0, $i = 0, $nError = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $IndexArray = sp + 72|0;
 $OldIndexArray = sp + 8|0;
 $0 = $hs;
 dest=$IndexArray; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$OldIndexArray; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (__Z18ScanIndexDirectoryPKcPFbS0_PjS1_PvES1_S1_S2_($3,54,$IndexArray,$OldIndexArray,$4)|0);
 $nError = $5;
 $6 = $nError;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $i = 0;
   while(1) {
    $8 = $i;
    $9 = ($8|0)<(16);
    if (!($9)) {
     break L1;
    }
    $10 = $0;
    $11 = $i;
    $12 = $i;
    $13 = (($IndexArray) + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (__ZL19CreateIndexFileNameP13_TCascStoragejj($10,$11,$14)|0);
    $16 = $i;
    $17 = $0;
    $18 = ((($17)) + 1168|0);
    $19 = (($18) + (($16*40)|0)|0);
    HEAP32[$19>>2] = $15;
    $20 = $i;
    $21 = $0;
    $22 = ((($21)) + 1168|0);
    $23 = (($22) + (($20*40)|0)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = $i;
     $27 = $0;
     $28 = ((($27)) + 1168|0);
     $29 = (($28) + (($26*40)|0)|0);
     $30 = $i;
     $31 = (__ZL14LoadKeyMappingP19_CASC_MAPPING_TABLEj($29,$30)|0);
     $nError = $31;
     $32 = $nError;
     $33 = ($32|0)!=(0);
     if ($33) {
      break L1;
     }
    }
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
  }
 } while(0);
 $36 = $nError;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $40 = $nError;
  STACKTOP = sp;return ($40|0);
 }
 $38 = $0;
 $39 = (__ZL25CreateArrayOfIndexEntriesP13_TCascStorage($38)|0);
 $nError = $39;
 $40 = $nError;
 STACKTOP = sp;return ($40|0);
}
function __ZL16LoadEncodingFileP13_TCascStorage($hs) {
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $EncodingKey = 0, $cbEncodingFile = 0, $dwNumSegments = 0, $dwSegmentsPos = 0, $hFile = 0, $i = 0, $nError = 0;
 var $or$cond = 0, $pEncodingEntry = 0, $pEncodingHeader = 0, $pEncodingSegment = 0, $pbEncodingFile = 0, $pbStartOfSegment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $EncodingKey = sp + 40|0;
 $hFile = sp + 28|0;
 $cbEncodingFile = sp + 24|0;
 $0 = $hs;
 $pbEncodingFile = 0;
 HEAP32[$hFile>>2] = 0;
 HEAP32[$cbEncodingFile>>2] = 0;
 $dwNumSegments = 0;
 $dwSegmentsPos = 0;
 $nError = 0;
 $1 = $0;
 $2 = ((($1)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 HEAP32[$EncodingKey>>2] = $4;
 $5 = ((($EncodingKey)) + 4|0);
 HEAP32[$5>>2] = 16;
 $6 = $0;
 $7 = (_CascOpenFileByIndexKey($6,$EncodingKey,0,$hFile)|0);
 if (!($7)) {
  $8 = (_GetLastError()|0);
  $nError = $8;
 }
 $9 = $nError;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[$hFile>>2]|0;
  $12 = (__ZL24LoadEncodingFileToMemoryPvPj($11,$cbEncodingFile)|0);
  $pbEncodingFile = $12;
  $13 = $pbEncodingFile;
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$cbEncodingFile>>2]|0;
  $16 = ($15>>>0)<=(22);
  $or$cond = $14 | $16;
  if ($or$cond) {
   $nError = 1004;
  }
  $17 = HEAP32[$hFile>>2]|0;
  (_CascCloseFile($17)|0);
 }
 $18 = $nError;
 $19 = ($18|0)==(0);
 L10: do {
  if ($19) {
   $20 = $pbEncodingFile;
   $pEncodingHeader = $20;
   $21 = $pEncodingHeader;
   $22 = ((($21)) + 9|0);
   $23 = (__Z23ConvertBytesToInteger_4Ph($22)|0);
   $dwNumSegments = $23;
   $24 = $pEncodingHeader;
   $25 = ((($24)) + 18|0);
   $26 = (__Z23ConvertBytesToInteger_4Ph($25)|0);
   $dwSegmentsPos = $26;
   $27 = $pbEncodingFile;
   $28 = $0;
   $29 = ((($28)) + 1812|0);
   HEAP32[$29>>2] = $27;
   $30 = HEAP32[$cbEncodingFile>>2]|0;
   $31 = $0;
   $32 = ((($31)) + 1812|0);
   $33 = ((($32)) + 4|0);
   HEAP32[$33>>2] = $30;
   $34 = $pbEncodingFile;
   $35 = ((($34)) + 22|0);
   $36 = $dwSegmentsPos;
   $37 = (($35) + ($36)|0);
   $pEncodingSegment = $37;
   $38 = $pEncodingSegment;
   $39 = $dwNumSegments;
   $40 = (($38) + ($39<<5)|0);
   $pbStartOfSegment = $40;
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = $dwNumSegments;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break L10;
    }
    $44 = $pbStartOfSegment;
    $pEncodingEntry = $44;
    $45 = $pbStartOfSegment;
    $46 = ((($45)) + 4096|0);
    $47 = $pbEncodingFile;
    $48 = HEAP32[$cbEncodingFile>>2]|0;
    $49 = (($47) + ($48)|0);
    $50 = ($46>>>0)>($49>>>0);
    if ($50) {
     label = 11;
     break;
    }
    $51 = $pEncodingEntry;
    $52 = ((($51)) + 6|0);
    $53 = $pEncodingSegment;
    $54 = (_memcmp($52,$53,16)|0);
    $55 = ($54|0)!=(0);
    if ($55) {
     label = 13;
     break;
    }
    $56 = $pbStartOfSegment;
    $57 = ((($56)) + 4096|0);
    $pbStartOfSegment = $57;
    $58 = $pEncodingSegment;
    $59 = ((($58)) + 32|0);
    $pEncodingSegment = $59;
    $60 = $i;
    $61 = (($60) + 1)|0;
    $i = $61;
   }
   if ((label|0) == 11) {
    $nError = 1004;
    break;
   }
   else if ((label|0) == 13) {
    $nError = 1004;
    break;
   }
  }
 } while(0);
 $62 = $nError;
 $63 = ($62|0)==(0);
 if (!($63)) {
  $72 = $nError;
  STACKTOP = sp;return ($72|0);
 }
 $64 = $pbEncodingFile;
 $65 = ((($64)) + 22|0);
 $66 = $dwSegmentsPos;
 $67 = (($65) + ($66)|0);
 $pEncodingSegment = $67;
 $68 = $0;
 $69 = $pEncodingSegment;
 $70 = $dwNumSegments;
 $71 = (__ZL23CreateMapOfEncodingKeysP13_TCascStorageP22_FILE_ENCODING_SEGMENTj($68,$69,$70)|0);
 $nError = $71;
 $72 = $nError;
 STACKTOP = sp;return ($72|0);
}
function __ZL12LoadRootFileP13_TCascStoragej($hs,$dwLocaleMask) {
 $hs = $hs|0;
 $dwLocaleMask = $dwLocaleMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $FileSignature = 0, $cbRootFile = 0, $hFile = 0, $nError = 0, $or$cond = 0, $pbRootFile = 0, $switch$split2D = 0, $switch$split32D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $hFile = sp + 12|0;
 $cbRootFile = sp + 4|0;
 $0 = $hs;
 $1 = $dwLocaleMask;
 HEAP32[$hFile>>2] = 0;
 $pbRootFile = 0;
 HEAP32[$cbRootFile>>2] = 0;
 $nError = 0;
 $2 = $0;
 $3 = ((($2)) + 1820|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((17731|0),(17756|0),878,(17828|0));
  // unreachable;
 }
 $6 = $0;
 $7 = ((($6)) + 1840|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  ___assert_fail((17841|0),(17756|0),879,(17828|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
 }
 $15 = $0;
 $16 = $0;
 $17 = ((($16)) + 100|0);
 $18 = (_CascOpenFileByEncodingKey($15,$17,0,$hFile)|0);
 if (!($18)) {
  $19 = (_GetLastError()|0);
  $nError = $19;
 }
 $20 = $nError;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = HEAP32[$hFile>>2]|0;
  $23 = (__ZL20LoadRootFileToMemoryPvPj($22,$cbRootFile)|0);
  $pbRootFile = $23;
  $24 = HEAP32[$hFile>>2]|0;
  (_CascCloseFile($24)|0);
 }
 $25 = $nError;
 $26 = ($25|0)==(0);
 $27 = $pbRootFile;
 $28 = ($27|0)!=(0|0);
 $or$cond = $26 & $28;
 L16: do {
  if ($or$cond) {
   $29 = $pbRootFile;
   $FileSignature = $29;
   $30 = $FileSignature;
   $31 = HEAP32[$30>>2]|0;
   $switch$split2D = ($31|0)<(893668643);
   L18: do {
    if ($switch$split2D) {
     switch ($31|0) {
     case -2146971452:  {
      break;
     }
     default: {
      break L18;
     }
     }
     $36 = $0;
     $37 = $pbRootFile;
     $38 = HEAP32[$cbRootFile>>2]|0;
     $39 = (__Z25RootHandler_CreateDiablo3P13_TCascStoragePhj($36,$37,$38)|0);
     $nError = $39;
     break L16;
    } else {
     $switch$split32D = ($31|0)<(1480871501);
     if ($switch$split32D) {
      switch ($31|0) {
      case 893668643:  {
       break;
      }
      default: {
       break L18;
      }
      }
      $40 = $0;
      $41 = $pbRootFile;
      $42 = HEAP32[$cbRootFile>>2]|0;
      $43 = (__Z27RootHandler_CreateOverwatchP13_TCascStoragePhj($40,$41,$42)|0);
      $nError = $43;
      break L16;
     } else {
      switch ($31|0) {
      case 1480871501:  {
       break;
      }
      default: {
       break L18;
      }
      }
      $32 = $0;
      $33 = $pbRootFile;
      $34 = HEAP32[$cbRootFile>>2]|0;
      $35 = (__Z22RootHandler_CreateMNDXP13_TCascStoragePhj($32,$33,$34)|0);
      $nError = $35;
      break L16;
     }
    }
   } while(0);
   $44 = $0;
   $45 = $pbRootFile;
   $46 = HEAP32[$cbRootFile>>2]|0;
   $47 = $1;
   $48 = (__Z22RootHandler_CreateWoW6P13_TCascStoragePhjj($44,$45,$46,$47)|0);
   $nError = $48;
  }
 } while(0);
 $49 = $nError;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $63 = $pbRootFile;
  _free($63);
  $64 = $nError;
  STACKTOP = sp;return ($64|0);
 }
 $51 = $0;
 $52 = $0;
 $53 = ((($52)) + 132|0);
 (__ZL15InsertExtraFileP13_TCascStoragePKcP10_QUERY_KEY($51,17866,$53)|0);
 $54 = $0;
 $55 = $0;
 $56 = ((($55)) + 100|0);
 (__ZL15InsertExtraFileP13_TCascStoragePKcP10_QUERY_KEY($54,17875,$56)|0);
 $57 = $0;
 $58 = $0;
 $59 = ((($58)) + 116|0);
 (__ZL15InsertExtraFileP13_TCascStoragePKcP10_QUERY_KEY($57,17880,$59)|0);
 $60 = $0;
 $61 = $0;
 $62 = ((($61)) + 124|0);
 (__ZL15InsertExtraFileP13_TCascStoragePKcP10_QUERY_KEY($60,17889,$62)|0);
 $63 = $pbRootFile;
 _free($63);
 $64 = $nError;
 STACKTOP = sp;return ($64|0);
}
function __ZL15FreeCascStorageP13_TCascStorage($hs) {
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $hs;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return (0|0);
 }
 $3 = $0;
 $4 = ((($3)) + 1840|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 1840|0);
  $9 = HEAP32[$8>>2]|0;
  __Z17RootHandler_CloseP12TRootHandler($9);
 }
 $10 = $0;
 $11 = ((($10)) + 1840|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 1824|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($13);
 $14 = $0;
 $15 = ((($14)) + 1820|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 1820|0);
  $20 = HEAP32[$19>>2]|0;
  __Z8Map_FreeP9_CASC_MAP($20);
 }
 $21 = $0;
 $22 = ((($21)) + 1812|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $0;
  $26 = ((($25)) + 1812|0);
  $27 = HEAP32[$26>>2]|0;
  _free($27);
 }
 $28 = $0;
 $29 = ((($28)) + 1808|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $0;
  $33 = ((($32)) + 1808|0);
  $34 = HEAP32[$33>>2]|0;
  __Z8Map_FreeP9_CASC_MAP($34);
 }
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ($35>>>0)<(256);
  if (!($36)) {
   break;
  }
  $37 = $i;
  $38 = $0;
  $39 = ((($38)) + 140|0);
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = $i;
   $44 = $0;
   $45 = ((($44)) + 140|0);
   $46 = (($45) + ($43<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   __Z16FileStream_CloseP11TFileStream($47);
   $48 = $i;
   $49 = $0;
   $50 = ((($49)) + 140|0);
   $51 = (($50) + ($48<<2)|0);
   HEAP32[$51>>2] = 0;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = ($54>>>0)<(16);
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = $0;
  $58 = ((($57)) + 1168|0);
  $59 = (($58) + (($56*40)|0)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = $i;
   $63 = $0;
   $64 = ((($63)) + 1168|0);
   $65 = (($64) + (($62*40)|0)|0);
   $66 = HEAP32[$65>>2]|0;
   _free($66);
  }
  $67 = $i;
  $68 = $0;
  $69 = ((($68)) + 1168|0);
  $70 = (($69) + (($67*40)|0)|0);
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)!=(0|0);
  if ($73) {
   $74 = $i;
   $75 = $0;
   $76 = ((($75)) + 1168|0);
   $77 = (($76) + (($74*40)|0)|0);
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   _free($79);
  }
  $80 = $i;
  $81 = $0;
  $82 = ((($81)) + 1168|0);
  $83 = (($82) + (($80*40)|0)|0);
  $84 = ((($83)) + 32|0);
  HEAP32[$84>>2] = 0;
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 $87 = $0;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = $0;
  $92 = ((($91)) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  _free($93);
 }
 $94 = $0;
 $95 = ((($94)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = $0;
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = $0;
 $102 = ((($101)) + 16|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 if ($104) {
  $105 = $0;
  $106 = ((($105)) + 16|0);
  $107 = HEAP32[$106>>2]|0;
  _free($107);
 }
 $108 = $0;
 $109 = ((($108)) + 20|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  $112 = $0;
  $113 = ((($112)) + 20|0);
  $114 = HEAP32[$113>>2]|0;
  _free($114);
 }
 $115 = $0;
 $116 = ((($115)) + 24|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = $0;
  $120 = ((($119)) + 24|0);
  $121 = HEAP32[$120>>2]|0;
  _free($121);
 }
 $122 = $0;
 $123 = ((($122)) + 52|0);
 __Z12FreeCascBlobP10_QUERY_KEY($123);
 $124 = $0;
 $125 = ((($124)) + 60|0);
 __Z12FreeCascBlobP10_QUERY_KEY($125);
 $126 = $0;
 $127 = ((($126)) + 68|0);
 __Z12FreeCascBlobP10_QUERY_KEY($127);
 $128 = $0;
 $129 = ((($128)) + 76|0);
 __Z12FreeCascBlobP10_QUERY_KEY($129);
 $130 = $0;
 $131 = ((($130)) + 84|0);
 __Z12FreeCascBlobP10_QUERY_KEY($131);
 $132 = $0;
 $133 = ((($132)) + 92|0);
 __Z12FreeCascBlobP10_QUERY_KEY($133);
 $134 = $0;
 $135 = ((($134)) + 100|0);
 __Z12FreeCascBlobP10_QUERY_KEY($135);
 $136 = $0;
 $137 = ((($136)) + 108|0);
 __Z12FreeCascBlobP10_QUERY_KEY($137);
 $138 = $0;
 $139 = ((($138)) + 116|0);
 __Z12FreeCascBlobP10_QUERY_KEY($139);
 $140 = $0;
 $141 = ((($140)) + 124|0);
 __Z12FreeCascBlobP10_QUERY_KEY($141);
 $142 = $0;
 $143 = ((($142)) + 132|0);
 __Z12FreeCascBlobP10_QUERY_KEY($143);
 $144 = $0;
 HEAP32[$144>>2] = 0;
 $145 = $0;
 _free($145);
 STACKTOP = sp;return (0|0);
}
function __ZL20LoadRootFileToMemoryPvPj($hFile,$pcbRootFile) {
 $hFile = $hFile|0;
 $pcbRootFile = $pcbRootFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cbRootFile = 0, $dwBytesRead = 0, $nError = 0, $pbRootFile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $dwBytesRead = sp + 4|0;
 $0 = $hFile;
 $1 = $pcbRootFile;
 $pbRootFile = 0;
 $cbRootFile = 0;
 HEAP32[$dwBytesRead>>2] = 0;
 $nError = 0;
 $2 = $0;
 $3 = (_CascGetFileSize($2,0)|0);
 $cbRootFile = $3;
 $4 = $cbRootFile;
 $5 = ($4|0)==(0);
 if ($5) {
  $nError = 1000;
 }
 $6 = $nError;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $cbRootFile;
  $9 = $8;
  $10 = (_malloc($9)|0);
  $pbRootFile = $10;
  $11 = $pbRootFile;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $nError = 12;
  }
 }
 $13 = $nError;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $0;
  $16 = $pbRootFile;
  $17 = $cbRootFile;
  (_CascReadFile($15,$16,$17,$dwBytesRead)|0);
  $18 = HEAP32[$dwBytesRead>>2]|0;
  $19 = $cbRootFile;
  $20 = ($18|0)!=($19|0);
  if ($20) {
   $nError = 1004;
  }
 }
 $21 = $1;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $25 = $pbRootFile;
  STACKTOP = sp;return ($25|0);
 }
 $23 = $cbRootFile;
 $24 = $1;
 HEAP32[$24>>2] = $23;
 $25 = $pbRootFile;
 STACKTOP = sp;return ($25|0);
}
function __ZL15InsertExtraFileP13_TCascStoragePKcP10_QUERY_KEY($hs,$szFileName,$pQueryKey) {
 $hs = $hs|0;
 $szFileName = $szFileName|0;
 $pQueryKey = $pQueryKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $IndexKey = 0, $pIndexEntry = 0, $pNewEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $IndexKey = sp;
 $1 = $hs;
 $2 = $szFileName;
 $3 = $pQueryKey;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(32);
 do {
  if ($7) {
   $8 = $3;
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 16|0);
   HEAP32[$IndexKey>>2] = $10;
   $11 = ((($IndexKey)) + 4|0);
   HEAP32[$11>>2] = 16;
   $12 = $1;
   $13 = (__Z14FindIndexEntryP13_TCascStorageP10_QUERY_KEY($12,$IndexKey)|0);
   $pIndexEntry = $13;
   $14 = $pIndexEntry;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $0 = 2;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   }
   $16 = $1;
   $17 = ((($16)) + 1824|0);
   $18 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($17,0,1)|0);
   $pNewEntry = $18;
   $19 = $pNewEntry;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = $pNewEntry;
    HEAP16[$21>>1] = 1;
    $22 = $pIndexEntry;
    $23 = ((($22)) + 14|0);
    $24 = ((($23)) + 3|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $pNewEntry;
    $27 = ((($26)) + 2|0);
    HEAP8[$27>>0] = $25;
    $28 = $pIndexEntry;
    $29 = ((($28)) + 14|0);
    $30 = ((($29)) + 2|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $pNewEntry;
    $33 = ((($32)) + 2|0);
    $34 = ((($33)) + 1|0);
    HEAP8[$34>>0] = $31;
    $35 = $pIndexEntry;
    $36 = ((($35)) + 14|0);
    $37 = ((($36)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $pNewEntry;
    $40 = ((($39)) + 2|0);
    $41 = ((($40)) + 2|0);
    HEAP8[$41>>0] = $38;
    $42 = $pIndexEntry;
    $43 = ((($42)) + 14|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $pNewEntry;
    $46 = ((($45)) + 2|0);
    $47 = ((($46)) + 3|0);
    HEAP8[$47>>0] = $44;
    $48 = $pNewEntry;
    $49 = ((($48)) + 6|0);
    $50 = $3;
    $51 = HEAP32[$50>>2]|0;
    dest=$49; src=$51; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $52 = $pNewEntry;
    $53 = ((($52)) + 22|0);
    $54 = $3;
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 16|0);
    dest=$53; src=$56; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $57 = $1;
    $58 = ((($57)) + 1820|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $pNewEntry;
    $61 = $pNewEntry;
    $62 = ((($61)) + 6|0);
    (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($59,$60,$62)|0);
    break;
   }
   $0 = 12;
   $70 = $0;
   STACKTOP = sp;return ($70|0);
  }
 } while(0);
 $63 = $1;
 $64 = ((($63)) + 1840|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $2;
 $67 = $3;
 $68 = HEAP32[$67>>2]|0;
 $69 = (__Z18RootHandler_InsertP12TRootHandlerPKcPh($65,$66,$68)|0);
 $0 = $69;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function __ZL24LoadEncodingFileToMemoryPvPj($hFile,$pcbEncodingFile) {
 $hFile = $hFile|0;
 $pcbEncodingFile = $pcbEncodingFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $EncodingHeader = 0, $cbEncodingFile = 0, $dwBytesRead = 0, $dwNumSegments = 0, $dwSegmentPos = 0, $nError = 0, $or$cond = 0, $or$cond3 = 0, $pbEncodingFile = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $EncodingHeader = sp + 32|0;
 $dwBytesRead = sp + 4|0;
 $0 = $hFile;
 $1 = $pcbEncodingFile;
 $pbEncodingFile = 0;
 $cbEncodingFile = 0;
 $dwSegmentPos = 0;
 $dwNumSegments = 0;
 HEAP32[$dwBytesRead>>2] = 0;
 $nError = 1000;
 $2 = $0;
 (_CascReadFile($2,$EncodingHeader,22,$dwBytesRead)|0);
 $3 = HEAP32[$dwBytesRead>>2]|0;
 $4 = ($3|0)==(22);
 if ($4) {
  $5 = ((($EncodingHeader)) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)!=(1);
  if ($8) {
   ___assert_fail((19711|0),(17756|0),703,(17973|0));
   // unreachable;
  }
  $9 = ((($EncodingHeader)) + 3|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)!=(16);
  if ($12) {
   ___assert_fail((19711|0),(17756|0),703,(17973|0));
   // unreachable;
  }
  $13 = ((($EncodingHeader)) + 4|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(16);
  if ($16) {
   ___assert_fail((19711|0),(17756|0),703,(17973|0));
   // unreachable;
  }
  $17 = ((($EncodingHeader)) + 9|0);
  $18 = (__Z23ConvertBytesToInteger_4Ph($17)|0);
  $dwNumSegments = $18;
  $19 = ((($EncodingHeader)) + 18|0);
  $20 = (__Z23ConvertBytesToInteger_4Ph($19)|0);
  $dwSegmentPos = $20;
  $21 = HEAP8[$EncodingHeader>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(69);
  if ($23) {
   $24 = ((($EncodingHeader)) + 1|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)==(78);
   $28 = $dwSegmentPos;
   $29 = ($28|0)!=(0);
   $or$cond = $27 & $29;
   $30 = $dwNumSegments;
   $31 = ($30|0)!=(0);
   $or$cond3 = $or$cond & $31;
   if ($or$cond3) {
    $nError = 0;
   }
  }
 }
 $32 = $nError;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = $dwSegmentPos;
  $35 = (22 + ($34))|0;
  $36 = $dwNumSegments;
  $37 = ($36*4128)|0;
  $38 = (($35) + ($37))|0;
  $cbEncodingFile = $38;
  $39 = $cbEncodingFile;
  $40 = $39;
  $41 = (_malloc($40)|0);
  $pbEncodingFile = $41;
  $42 = $pbEncodingFile;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $nError = 12;
  }
 }
 $44 = $nError;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = $pbEncodingFile;
  dest=$46; src=$EncodingHeader; stop=dest+22|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $47 = $0;
  $48 = $pbEncodingFile;
  $49 = ((($48)) + 22|0);
  $50 = $cbEncodingFile;
  $51 = (($50) - 22)|0;
  (_CascReadFile($47,$49,$51,$dwBytesRead)|0);
  $52 = HEAP32[$dwBytesRead>>2]|0;
  $53 = $cbEncodingFile;
  $54 = (($53) - 22)|0;
  $55 = ($52|0)!=($54|0);
  if ($55) {
   $nError = 1004;
  }
 }
 $56 = $1;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  $60 = $pbEncodingFile;
  STACKTOP = sp;return ($60|0);
 }
 $58 = $cbEncodingFile;
 $59 = $1;
 HEAP32[$59>>2] = $58;
 $60 = $pbEncodingFile;
 STACKTOP = sp;return ($60|0);
}
function __ZL23CreateMapOfEncodingKeysP13_TCascStorageP22_FILE_ENCODING_SEGMENTj($hs,$pEncodingSegment,$dwNumSegments) {
 $hs = $hs|0;
 $pEncodingSegment = $pEncodingSegment|0;
 $dwNumSegments = $dwNumSegments|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dwMaxEntries = 0, $i = 0, $nError = 0, $pEncodingEntry = 0, $pbEncodingEntry = 0, $pbEndOfSegment = 0, $pbStartOfSegment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = $hs;
 $1 = $pEncodingSegment;
 $2 = $dwNumSegments;
 $nError = 0;
 $3 = $0;
 $4 = ((($3)) + 1808|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((17897|0),(17756|0),607,(17924|0));
  // unreachable;
 }
 $7 = $0;
 $8 = ((($7)) + 1820|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  ___assert_fail((17948|0),(17756|0),608,(17924|0));
  // unreachable;
 }
 $11 = $2;
 $12 = $11<<12;
 $13 = (($12>>>0) / 38)&-1;
 $dwMaxEntries = $13;
 $14 = $dwMaxEntries;
 $15 = (($14) + 32)|0;
 $16 = (__Z10Map_Createjjj($15,16,6)|0);
 $17 = $0;
 $18 = ((($17)) + 1820|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = ((($19)) + 1820|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $nError = 12;
  $59 = $nError;
  STACKTOP = sp;return ($59|0);
 }
 $23 = $1;
 $24 = $2;
 $25 = (($23) + ($24<<5)|0);
 $pbStartOfSegment = $25;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $2;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $pbStartOfSegment;
  $pbEncodingEntry = $29;
  $30 = $pbStartOfSegment;
  $31 = ((($30)) + 4096|0);
  $32 = ((($31)) + -22|0);
  $33 = ((($32)) + -16|0);
  $pbEndOfSegment = $33;
  while(1) {
   $34 = $pbEncodingEntry;
   $35 = $pbEndOfSegment;
   $36 = ($34>>>0)<=($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $pbEncodingEntry;
   $pEncodingEntry = $37;
   $38 = $pEncodingEntry;
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&65535;
   $41 = ($40|0)==(0);
   if ($41) {
    break;
   }
   $42 = $0;
   $43 = ((($42)) + 1820|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $pEncodingEntry;
   $46 = $pEncodingEntry;
   $47 = ((($46)) + 6|0);
   (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($44,$45,$47)|0);
   $48 = $pEncodingEntry;
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $51 = $50<<4;
   $52 = (22 + ($51))|0;
   $53 = $pbEncodingEntry;
   $54 = (($53) + ($52)|0);
   $pbEncodingEntry = $54;
  }
  $55 = $pbStartOfSegment;
  $56 = ((($55)) + 4096|0);
  $pbStartOfSegment = $56;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 $59 = $nError;
 STACKTOP = sp;return ($59|0);
}
function __ZL26IndexDirectory_OnFileFoundPKcPjS1_Pv($szFileName,$IndexArray,$OldIndexArray,$pvContext) {
 $szFileName = $szFileName|0;
 $IndexArray = $IndexArray|0;
 $OldIndexArray = $OldIndexArray|0;
 $pvContext = $pvContext|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $IndexValue = 0, $IndexVersion = 0, $hs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 28|0;
 $IndexValue = sp + 4|0;
 $IndexVersion = sp;
 $1 = $szFileName;
 $2 = $IndexArray;
 $3 = $OldIndexArray;
 $4 = $pvContext;
 $5 = $4;
 $hs = $5;
 HEAP32[$IndexValue>>2] = 0;
 HEAP32[$IndexVersion>>2] = 0;
 $6 = $hs;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $10 = $1;
   $11 = (__ZL18IsIndexFileName_V1PKc($10)|0);
   if ($11) {
    $12 = HEAP32[479]|0;
    $13 = $hs;
    $14 = ((($13)) + 4|0);
    HEAP32[$14>>2] = $12;
    label = 7;
    break;
   }
   $15 = $1;
   $16 = (__ZL18IsIndexFileName_V2PKc($15)|0);
   if ($16) {
    $17 = HEAP32[480]|0;
    $18 = $hs;
    $19 = ((($18)) + 4|0);
    HEAP32[$19>>2] = $17;
    label = 7;
    break;
   } else {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    break;
   }
  } else {
   label = 7;
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $20 = $hs;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[479]|0;
   $24 = ($22|0)==($23|0);
   if ($24) {
    $25 = $1;
    $26 = (__ZL18IsIndexFileName_V1PKc($25)|0);
    if (!($26)) {
     $$expand_i1_val2 = 0;
     HEAP8[$0>>0] = $$expand_i1_val2;
     break;
    }
    $27 = $1;
    $28 = ((($27)) + 6|0);
    $29 = (__Z19ConvertDigitToInt32PKcPj($28,$IndexValue)|0);
    $30 = ($29|0)!=(0);
    if ($30) {
     $$expand_i1_val4 = 0;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break;
    }
    $31 = $1;
    $32 = ((($31)) + 7|0);
    $33 = (__Z19ConvertDigitToInt32PKcPj($32,$IndexVersion)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     $$expand_i1_val6 = 0;
     HEAP8[$0>>0] = $$expand_i1_val6;
     break;
    }
   } else {
    $35 = $hs;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[480]|0;
    $39 = ($37|0)==($38|0);
    if (!($39)) {
     ___assert_fail((19711|0),(17756|0),322,(18255|0));
     // unreachable;
    }
    $40 = $1;
    $41 = (__ZL18IsIndexFileName_V2PKc($40)|0);
    if (!($41)) {
     $$expand_i1_val8 = 0;
     HEAP8[$0>>0] = $$expand_i1_val8;
     break;
    }
    $42 = $1;
    $43 = (__Z20ConvertStringToInt32PKcjPj($42,2,$IndexValue)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     $$expand_i1_val10 = 0;
     HEAP8[$0>>0] = $$expand_i1_val10;
     break;
    }
    $45 = $1;
    $46 = ((($45)) + 2|0);
    $47 = (__Z20ConvertStringToInt32PKcjPj($46,8,$IndexVersion)|0);
    $48 = ($47|0)!=(0);
    if ($48) {
     $$expand_i1_val12 = 0;
     HEAP8[$0>>0] = $$expand_i1_val12;
     break;
    }
   }
   $49 = HEAP32[$IndexValue>>2]|0;
   $50 = ($49>>>0)>=(16);
   if ($50) {
    $$expand_i1_val14 = 0;
    HEAP8[$0>>0] = $$expand_i1_val14;
    break;
   }
   $51 = HEAP32[$IndexVersion>>2]|0;
   $52 = HEAP32[$IndexValue>>2]|0;
   $53 = $2;
   $54 = (($53) + ($52<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($51>>>0)>($55>>>0);
   if ($56) {
    $57 = HEAP32[$IndexValue>>2]|0;
    $58 = $2;
    $59 = (($58) + ($57<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = HEAP32[$IndexValue>>2]|0;
    $62 = $3;
    $63 = (($62) + ($61<<2)|0);
    HEAP32[$63>>2] = $60;
    $64 = HEAP32[$IndexVersion>>2]|0;
    $65 = HEAP32[$IndexValue>>2]|0;
    $66 = $2;
    $67 = (($66) + ($65<<2)|0);
    HEAP32[$67>>2] = $64;
   } else {
    $68 = HEAP32[$IndexVersion>>2]|0;
    $69 = HEAP32[$IndexValue>>2]|0;
    $70 = $3;
    $71 = (($70) + ($69<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($68>>>0)>($72>>>0);
    if ($73) {
     $74 = HEAP32[$IndexVersion>>2]|0;
     $75 = HEAP32[$IndexValue>>2]|0;
     $76 = $3;
     $77 = (($76) + ($75<<2)|0);
     HEAP32[$77>>2] = $74;
    }
   }
   $$expand_i1_val16 = 1;
   HEAP8[$0>>0] = $$expand_i1_val16;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $78 = $$pre_trunc&1;
 STACKTOP = sp;return ($78|0);
}
function __ZL19CreateIndexFileNameP13_TCascStoragejj($hs,$IndexValue,$IndexVersion) {
 $hs = $hs|0;
 $IndexValue = $IndexValue|0;
 $IndexVersion = $IndexVersion|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $szPlainName = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $szPlainName = sp + 24|0;
 $0 = $hs;
 $1 = $IndexValue;
 $2 = $IndexVersion;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((18166|0),(17756|0),352,(18192|0));
  // unreachable;
 }
 $7 = $0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((18212|0),(17756|0),353,(18192|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ($11>>>0)<=(15);
 if ($12) {
  $13 = $0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = $2;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  (_sprintf($szPlainName,$15,$vararg_buffer)|0);
  $18 = $0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (__Z11CombinePathPKcS0_($20,$szPlainName)|0);
  STACKTOP = sp;return ($21|0);
 } else {
  ___assert_fail((18236|0),(17756|0),354,(18192|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL14LoadKeyMappingP19_CASC_MAPPING_TABLEj($pKeyMapping,$KeyIndex) {
 $pKeyMapping = $pKeyMapping|0;
 $KeyIndex = $KeyIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $FileSize = 0, $nError = 0, $or$cond = 0;
 var $pStream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $FileSize = sp;
 $0 = $pKeyMapping;
 $1 = $KeyIndex;
 $2 = $FileSize;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $nError = 0;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((17998|0),(17756|0),515,(18065|0));
  // unreachable;
 }
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  ___assert_fail((17998|0),(17756|0),515,(18065|0));
  // unreachable;
 }
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 $16 = (__Z19FileStream_OpenFilePKcj($15,256)|0);
 $pStream = $16;
 $17 = $pStream;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $76 = (_GetLastError()|0);
  $nError = $76;
  STACKTOP = sp;return 0;
 }
 $19 = $pStream;
 (__Z18FileStream_GetSizeP11TFileStreamPy($19,$FileSize)|0);
 $20 = $FileSize;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (0)<($25>>>0);
 $27 = (0)<($22>>>0);
 $28 = (0)==($25|0);
 $29 = $28 & $27;
 $30 = $26 | $29;
 $31 = $FileSize;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36>>>0)<(0);
 $38 = ($33>>>0)<=(2097152);
 $39 = ($36|0)==(0);
 $40 = $39 & $38;
 $41 = $37 | $40;
 $or$cond = $30 & $41;
 if (!($or$cond)) {
  ___assert_fail((19711|0),(17756|0),543,(18065|0));
  // unreachable;
 }
 $42 = $FileSize;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = $44;
 $49 = (_malloc($48)|0);
 $50 = $0;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 $52 = $FileSize;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $0;
 $59 = ((($58)) + 8|0);
 HEAP32[$59>>2] = $54;
 $60 = $0;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $pStream;
  $65 = $0;
  $66 = ((($65)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $0;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (__Z15FileStream_ReadP11TFileStreamPyPvj($64,0,$67,$70)|0);
  if ($71) {
   $72 = $0;
   $73 = $1;
   $74 = (__ZL24VerifyAndParseKeyMappingP19_CASC_MAPPING_TABLEj($72,$73)|0);
   $nError = $74;
  }
 } else {
  $nError = 12;
 }
 $75 = $pStream;
 __Z16FileStream_CloseP11TFileStream($75);
 STACKTOP = sp;return 0;
}
function __ZL25CreateArrayOfIndexEntriesP13_TCascStorage($hs) {
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TotalCount = 0, $i = 0, $i1 = 0, $j = 0, $nError = 0, $nIndexEntries = 0, $pIndexEntry = 0, $pMap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = $hs;
 $TotalCount = 0;
 $nError = 12;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(16);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = ((($4)) + 1168|0);
  $6 = (($5) + (($3*40)|0)|0);
  $7 = ((($6)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $TotalCount;
  $10 = (($9) + ($8))|0;
  $TotalCount = $10;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = $TotalCount;
 $14 = (__Z10Map_Createjjj($13,9,0)|0);
 $pMap = $14;
 $15 = $pMap;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $46 = $nError;
  STACKTOP = sp;return ($46|0);
 }
 $i1 = 0;
 while(1) {
  $17 = $i1;
  $18 = ($17>>>0)<(16);
  if (!($18)) {
   break;
  }
  $19 = $i1;
  $20 = $0;
  $21 = ((($20)) + 1168|0);
  $22 = (($21) + (($19*40)|0)|0);
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $pIndexEntry = $24;
  $25 = $i1;
  $26 = $0;
  $27 = ((($26)) + 1168|0);
  $28 = (($27) + (($25*40)|0)|0);
  $29 = ((($28)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $nIndexEntries = $30;
  $j = 0;
  while(1) {
   $31 = $j;
   $32 = $nIndexEntries;
   $33 = ($31>>>0)<($32>>>0);
   if (!($33)) {
    break;
   }
   $34 = $pMap;
   $35 = $pIndexEntry;
   $36 = $pIndexEntry;
   (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($34,$35,$36)|0);
   $37 = $pIndexEntry;
   $38 = ((($37)) + 18|0);
   $pIndexEntry = $38;
   $39 = $j;
   $40 = (($39) + 1)|0;
   $j = $40;
  }
  $41 = $i1;
  $42 = (($41) + 1)|0;
  $i1 = $42;
 }
 $43 = $pMap;
 $44 = $0;
 $45 = ((($44)) + 1808|0);
 HEAP32[$45>>2] = $43;
 $nError = 0;
 $46 = $nError;
 STACKTOP = sp;return ($46|0);
}
function __ZL24VerifyAndParseKeyMappingP19_CASC_MAPPING_TABLEj($pKeyMapping,$KeyIndex) {
 $pKeyMapping = $pKeyMapping|0;
 $KeyIndex = $KeyIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pKeyMapping;
 $2 = $KeyIndex;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((18080|0),(17756|0),492,(18112|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  ___assert_fail((18137|0),(17756|0),493,(18112|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZL20IsCascIndexHeader_V2Phj($13,$16)|0);
 $18 = $1;
 if ($17) {
  $19 = $2;
  $20 = (__ZL27VerifyAndParseKeyMapping_V2P19_CASC_MAPPING_TABLEj($18,$19)|0);
  $0 = $20;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $21 = ((($18)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__ZL20IsCascIndexHeader_V1Phj($22,$25)|0);
 if (!($26)) {
  ___assert_fail((19711|0),(17756|0),504,(18112|0));
  // unreachable;
 }
 $27 = $1;
 $28 = $2;
 $29 = (__ZL27VerifyAndParseKeyMapping_V1P19_CASC_MAPPING_TABLEj($27,$28)|0);
 $0 = $29;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function __ZL20IsCascIndexHeader_V2Phj($pbFileData,$cbFileData) {
 $pbFileData = $pbFileData|0;
 $cbFileData = $cbFileData|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $HashHigh = 0, $HashLow = 0, $pSizeAndHash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 20|0;
 $HashHigh = sp + 4|0;
 $HashLow = sp;
 $1 = $pbFileData;
 $2 = $cbFileData;
 $3 = $1;
 $pSizeAndHash = $3;
 HEAP32[$HashHigh>>2] = 0;
 HEAP32[$HashLow>>2] = 0;
 $4 = $2;
 $5 = ($4>>>0)<(8);
 if (!($5)) {
  $6 = $pSizeAndHash;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)<(16);
  if (!($8)) {
   $9 = $2;
   $10 = $pSizeAndHash;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 8)|0;
   $13 = ($9>>>0)<($12>>>0);
   if ($13) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $23 = $$pre_trunc&1;
    STACKTOP = sp;return ($23|0);
   } else {
    $14 = $pSizeAndHash;
    $15 = ((($14)) + 8|0);
    $16 = $pSizeAndHash;
    $17 = HEAP32[$16>>2]|0;
    _hashlittle2($15,$17,$HashHigh,$HashLow);
    $18 = HEAP32[$HashHigh>>2]|0;
    $19 = $pSizeAndHash;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)==($21|0);
    $$expand_i1_val4 = $22&1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $23 = $$pre_trunc&1;
    STACKTOP = sp;return ($23|0);
   }
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $23 = $$pre_trunc&1;
 STACKTOP = sp;return ($23|0);
}
function __ZL27VerifyAndParseKeyMapping_V2P19_CASC_MAPPING_TABLEj($pKeyMapping,$KeyIndex) {
 $pKeyMapping = $pKeyMapping|0;
 $KeyIndex = $KeyIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FilePosition = 0, $HashHigh = 0, $HashLow = 0, $LastPartLength = 0, $PtrLastPart = 0, $i = 0, $i1 = 0, $pIndexHeader = 0, $pSizeAndHash = 0, $pbLastPart = 0;
 var $pbLastPartEnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $HashHigh = sp + 16|0;
 $HashLow = sp + 12|0;
 $1 = $pKeyMapping;
 $2 = $KeyIndex;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $pIndexHeader = $5;
 HEAP32[$HashHigh>>2] = 0;
 HEAP32[$HashLow>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $pSizeAndHash = $8;
 $9 = $pSizeAndHash;
 $10 = ((($9)) + 8|0);
 $pIndexHeader = $10;
 $11 = $pIndexHeader;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13|0)!=(7);
 if (!($14)) {
  $15 = $pIndexHeader;
  $16 = ((($15)) + 2|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $2;
  $20 = ($18|0)!=($19|0);
  if (!($20)) {
   $21 = $pIndexHeader;
   $22 = ((($21)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)!=(0);
   if (!($25)) {
    $26 = $pIndexHeader;
    $27 = ((($26)) + 4|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = ($29|0)!=(4);
    if (!($30)) {
     $31 = $pIndexHeader;
     $32 = ((($31)) + 5|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = ($34|0)!=(5);
     if (!($35)) {
      $36 = $pIndexHeader;
      $37 = ((($36)) + 6|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38&255;
      $40 = ($39|0)!=(9);
      if (!($40)) {
       $41 = $pIndexHeader;
       $42 = ((($41)) + 3|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $1;
       $45 = ((($44)) + 12|0);
       HEAP8[$45>>0] = $43;
       $46 = $pIndexHeader;
       $47 = ((($46)) + 4|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = $1;
       $50 = ((($49)) + 13|0);
       HEAP8[$50>>0] = $48;
       $51 = $pIndexHeader;
       $52 = ((($51)) + 5|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $1;
       $55 = ((($54)) + 14|0);
       HEAP8[$55>>0] = $53;
       $56 = $pIndexHeader;
       $57 = ((($56)) + 6|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $1;
       $60 = ((($59)) + 15|0);
       HEAP8[$60>>0] = $58;
       $61 = $pIndexHeader;
       $62 = ((($61)) + 7|0);
       $63 = HEAP8[$62>>0]|0;
       $64 = $1;
       $65 = ((($64)) + 16|0);
       HEAP8[$65>>0] = $63;
       $66 = $pIndexHeader;
       $67 = ((($66)) + 8|0);
       $68 = $67;
       $69 = $68;
       $70 = HEAP32[$69>>2]|0;
       $71 = (($68) + 4)|0;
       $72 = $71;
       $73 = HEAP32[$72>>2]|0;
       $74 = $1;
       $75 = ((($74)) + 24|0);
       $76 = $75;
       $77 = $76;
       HEAP32[$77>>2] = $70;
       $78 = (($76) + 4)|0;
       $79 = $78;
       HEAP32[$79>>2] = $73;
       $80 = $pSizeAndHash;
       $81 = HEAP32[$80>>2]|0;
       $82 = (8 + ($81))|0;
       $83 = (($82) + 15)|0;
       $84 = $83 & -16;
       $FilePosition = $84;
       $85 = $FilePosition;
       $86 = (($85) + 8)|0;
       $87 = $1;
       $88 = ((($87)) + 8|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($86>>>0)>($89>>>0);
       if ($90) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       $91 = $1;
       $92 = ((($91)) + 4|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = $FilePosition;
       $95 = (($93) + ($94)|0);
       $pSizeAndHash = $95;
       $96 = $FilePosition;
       $97 = (($96) + 8)|0;
       $FilePosition = $97;
       $98 = $FilePosition;
       $99 = $pSizeAndHash;
       $100 = HEAP32[$99>>2]|0;
       $101 = (($98) + ($100))|0;
       $102 = $1;
       $103 = ((($102)) + 8|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($101>>>0)>($104>>>0);
       if ($105) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       $106 = $pSizeAndHash;
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107>>>0)<(18);
       if ($108) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       $109 = $1;
       $110 = ((($109)) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = $FilePosition;
       $113 = (($111) + ($112)|0);
       $114 = $1;
       $115 = ((($114)) + 32|0);
       HEAP32[$115>>2] = $113;
       $116 = $pSizeAndHash;
       $117 = HEAP32[$116>>2]|0;
       $118 = (($117>>>0) / 18)&-1;
       $119 = $1;
       $120 = ((($119)) + 36|0);
       HEAP32[$120>>2] = $118;
       $121 = $pSizeAndHash;
       $122 = HEAP32[$121>>2]|0;
       $123 = $FilePosition;
       $124 = (($123) + ($122))|0;
       $FilePosition = $124;
       $i = 0;
       while(1) {
        $125 = $i;
        $126 = $1;
        $127 = ((($126)) + 36|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = ($125>>>0)<($128>>>0);
        if (!($129)) {
         break;
        }
        $130 = $1;
        $131 = ((($130)) + 32|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = $i;
        $134 = (($132) + (($133*18)|0)|0);
        _hashlittle2($134,18,$HashHigh,$HashLow);
        $135 = $i;
        $136 = (($135) + 1)|0;
        $i = $136;
       }
       $137 = HEAP32[$HashHigh>>2]|0;
       $138 = $pSizeAndHash;
       $139 = ((($138)) + 4|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($137|0)!=($140|0);
       if ($141) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       $142 = $FilePosition;
       $143 = (($142) + 4096)|0;
       $144 = (($143) - 1)|0;
       $145 = $144 & -4096;
       $FilePosition = $145;
       $146 = $FilePosition;
       $147 = $1;
       $148 = ((($147)) + 8|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($146>>>0)>($149>>>0);
       if ($150) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       $151 = $1;
       $152 = ((($151)) + 8|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = $FilePosition;
       $155 = (($153) - ($154))|0;
       $LastPartLength = $155;
       $156 = $LastPartLength;
       $157 = ($156>>>0)<(30720);
       if ($157) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       $158 = $1;
       $159 = ((($158)) + 4|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = $FilePosition;
       $162 = (($160) + ($161)|0);
       $pbLastPart = $162;
       $163 = $pbLastPart;
       $164 = $LastPartLength;
       $165 = $164 >>> 9;
       $166 = $165 << 9;
       $167 = (($163) + ($166)|0);
       $pbLastPartEnd = $167;
       L37: while(1) {
        $168 = $pbLastPart;
        $169 = $pbLastPartEnd;
        $170 = ($168>>>0)<($169>>>0);
        if (!($170)) {
         label = 34;
         break;
        }
        $i1 = 0;
        while(1) {
         $171 = $i1;
         $172 = ($171|0)<(504);
         $173 = $pbLastPart;
         if (!($172)) {
          break;
         }
         $PtrLastPart = $173;
         $174 = $PtrLastPart;
         $175 = HEAP32[$174>>2]|0;
         $176 = ($175|0)==(0);
         if ($176) {
          label = 29;
          break L37;
         }
         $177 = $PtrLastPart;
         $178 = $i1;
         $179 = (($177) + ($178<<2)|0);
         $180 = (_hashlittle($179,19,0)|0);
         $181 = $180 | -2147483648;
         HEAP32[$HashLow>>2] = $181;
         $182 = HEAP32[$HashLow>>2]|0;
         $183 = $PtrLastPart;
         $184 = HEAP32[$183>>2]|0;
         $185 = ($182|0)!=($184|0);
         if ($185) {
          label = 31;
          break L37;
         }
         $186 = $i1;
         $187 = (($186) + 24)|0;
         $i1 = $187;
        }
        $188 = ((($173)) + 512|0);
        $pbLastPart = $188;
       }
       if ((label|0) == 29) {
        $0 = 0;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       else if ((label|0) == 31) {
        $0 = 1000;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
       else if ((label|0) == 34) {
        $0 = 0;
        $189 = $0;
        STACKTOP = sp;return ($189|0);
       }
      }
     }
    }
   }
   $0 = 1000;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
 }
 $0 = 1000;
 $189 = $0;
 STACKTOP = sp;return ($189|0);
}
function __ZL20IsCascIndexHeader_V1Phj($pbFileData,$cbFileData) {
 $pbFileData = $pbFileData|0;
 $cbFileData = $cbFileData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bResult = 0;
 var $dwHeaderHash = 0, $pIndexHeader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pbFileData;
 $1 = $cbFileData;
 $2 = $0;
 $pIndexHeader = $2;
 $bResult = 0;
 $3 = $1;
 $4 = ($3>>>0)>=(48);
 if (!($4)) {
  $17 = $bResult;
  $18 = $17&1;
  STACKTOP = sp;return ($18|0);
 }
 $5 = $pIndexHeader;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $dwHeaderHash = $7;
 $8 = $pIndexHeader;
 $9 = ((($8)) + 44|0);
 HEAP32[$9>>2] = 0;
 $10 = $pIndexHeader;
 $11 = (_hashlittle($10,48,0)|0);
 $12 = $dwHeaderHash;
 $13 = ($11|0)==($12|0);
 if ($13) {
  $bResult = 1;
 }
 $14 = $dwHeaderHash;
 $15 = $pIndexHeader;
 $16 = ((($15)) + 44|0);
 HEAP32[$16>>2] = $14;
 $17 = $bResult;
 $18 = $17&1;
 STACKTOP = sp;return ($18|0);
}
function __ZL27VerifyAndParseKeyMapping_V1P19_CASC_MAPPING_TABLEj($pKeyMapping,$KeyIndex) {
 $pKeyMapping = $pKeyMapping|0;
 $KeyIndex = $KeyIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dwDataHash1 = 0, $dwDataHash2 = 0, $pIndexHeader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pKeyMapping;
 $2 = $KeyIndex;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $pIndexHeader = $5;
 $6 = $pIndexHeader;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($8|0)!=(5);
 if ($9) {
  $0 = 95;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $10 = $pIndexHeader;
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $2;
 $15 = ($13|0)!=($14|0);
 if ($15) {
  $0 = 95;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $16 = $pIndexHeader;
 $17 = ((($16)) + 8|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==(0);
 $25 = ($23|0)==(0);
 $26 = $24 & $25;
 if ($26) {
  $0 = 95;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $27 = $pIndexHeader;
 $28 = ((($27)) + 24|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($30|0)!=(4);
 if (!($31)) {
  $32 = $pIndexHeader;
  $33 = ((($32)) + 25|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)!=(5);
  if (!($36)) {
   $37 = $pIndexHeader;
   $38 = ((($37)) + 26|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = ($40|0)!=(9);
   if (!($41)) {
    $42 = $1;
    $43 = ((($42)) + 12|0);
    HEAP8[$43>>0] = 0;
    $44 = $pIndexHeader;
    $45 = ((($44)) + 24|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $1;
    $48 = ((($47)) + 13|0);
    HEAP8[$48>>0] = $46;
    $49 = $pIndexHeader;
    $50 = ((($49)) + 25|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $1;
    $53 = ((($52)) + 14|0);
    HEAP8[$53>>0] = $51;
    $54 = $pIndexHeader;
    $55 = ((($54)) + 26|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $1;
    $58 = ((($57)) + 15|0);
    HEAP8[$58>>0] = $56;
    $59 = $pIndexHeader;
    $60 = ((($59)) + 27|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $1;
    $63 = ((($62)) + 16|0);
    HEAP8[$63>>0] = $61;
    $64 = $pIndexHeader;
    $65 = ((($64)) + 16|0);
    $66 = $65;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = $1;
    $73 = ((($72)) + 24|0);
    $74 = $73;
    $75 = $74;
    HEAP32[$75>>2] = $68;
    $76 = (($74) + 4)|0;
    $77 = $76;
    HEAP32[$77>>2] = $71;
    $78 = $pIndexHeader;
    $79 = ((($78)) + 28|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $pIndexHeader;
    $82 = ((($81)) + 32|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($80) + ($83))|0;
    $85 = $1;
    $86 = ((($85)) + 36|0);
    HEAP32[$86>>2] = $84;
    $87 = $1;
    $88 = ((($87)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)!=(0);
    if ($90) {
     $91 = $1;
     $92 = ((($91)) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($93)) + 48|0);
     $95 = $1;
     $96 = ((($95)) + 32|0);
     HEAP32[$96>>2] = $94;
    }
    $97 = $1;
    $98 = ((($97)) + 32|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $pIndexHeader;
    $101 = ((($100)) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102*18)|0;
    $104 = (_hashlittle($99,$103,0)|0);
    $dwDataHash1 = $104;
    $105 = $1;
    $106 = ((($105)) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $pIndexHeader;
    $109 = ((($108)) + 28|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($107) + (($110*18)|0)|0);
    $112 = $pIndexHeader;
    $113 = ((($112)) + 32|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114*18)|0;
    $116 = (_hashlittle($111,$115,0)|0);
    $dwDataHash2 = $116;
    $117 = $dwDataHash1;
    $118 = $pIndexHeader;
    $119 = ((($118)) + 36|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($117|0)!=($120|0);
    if (!($121)) {
     $122 = $dwDataHash2;
     $123 = $pIndexHeader;
     $124 = ((($123)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($122|0)!=($125|0);
     if (!($126)) {
      $0 = 0;
      $127 = $0;
      STACKTOP = sp;return ($127|0);
     }
    }
    $0 = 1004;
    $127 = $0;
    STACKTOP = sp;return ($127|0);
   }
  }
 }
 $0 = 95;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function __ZL18IsIndexFileName_V1PKc($szFileName) {
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szFileName;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $3 = ($2|0)==(8);
 if ($3) {
  $4 = $0;
  $5 = (_strncasecmp($4,18334,6)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = $0;
   $8 = ((($7)) + 6|0);
   $9 = HEAP32[481]|0;
   $10 = (_strspn($8,$9)|0);
   $11 = ($10|0)==(2);
   $12 = $11;
  } else {
   $12 = 0;
  }
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZL18IsIndexFileName_V2PKc($szFileName) {
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $szFileName;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $3 = ($2|0)==(14);
 if ($3) {
  $4 = $0;
  $5 = (_strspn($4,18295)|0);
  $6 = ($5|0)==(10);
  if ($6) {
   $7 = $0;
   $8 = ((($7)) + 10|0);
   $9 = (_strcasecmp($8,18318)|0);
   $10 = ($9|0)==(0);
   $11 = $10;
  } else {
   $11 = 0;
  }
 } else {
  $11 = 0;
 }
 STACKTOP = sp;return ($11|0);
}
function __ZL15CutLastPathPartPc($szWorkPath) {
 $szWorkPath = $szWorkPath|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $1 = $szWorkPath;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $nLength = $3;
 $4 = $nLength;
 $5 = ($4>>>0)>(0);
 if ($5) {
  $6 = $nLength;
  $7 = (($6) + -1)|0;
  $nLength = $7;
 }
 while(1) {
  $8 = $nLength;
  $9 = ($8>>>0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $nLength;
  $11 = $1;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(92);
  if (!($15)) {
   $16 = $nLength;
   $17 = $1;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(47);
   if (!($21)) {
    break;
   }
  }
  $22 = $nLength;
  $23 = (($22) + -1)|0;
  $nLength = $23;
 }
 while(1) {
  $24 = $nLength;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   label = 12;
   break;
  }
  $26 = $nLength;
  $27 = $1;
  $28 = (($27) + ($26)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(92);
  if ($31) {
   label = 10;
   break;
  }
  $32 = $nLength;
  $33 = $1;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(47);
  if ($37) {
   label = 10;
   break;
  }
  $41 = $nLength;
  $42 = (($41) + -1)|0;
  $nLength = $42;
 }
 if ((label|0) == 10) {
  $38 = $nLength;
  $39 = $1;
  $40 = (($39) + ($38)|0);
  HEAP8[$40>>0] = 0;
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 12) {
  $$expand_i1_val3 = 0;
  HEAP8[$0>>0] = $$expand_i1_val3;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _CascGetFileSize($hFile,$pdwFileSizeHigh) {
 $hFile = $hFile|0;
 $pdwFileSizeHigh = $pdwFileSizeHigh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hf = 0, $nError = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hFile;
 $2 = $pdwFileSizeHigh;
 $3 = $1;
 $4 = (__Z17IsValidFileHandlePv($3)|0);
 $hf = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _SetLastError(9);
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $6 = $hf;
 $7 = (__ZL24EnsureFrameHeadersLoadedP10_TCascFile($6)|0);
 $nError = $7;
 $8 = $nError;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $nError;
  _SetLastError($10);
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  HEAP32[$13>>2] = 0;
 }
 $14 = $hf;
 $15 = ((($14)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _CascSetFilePointer($hFile,$lFilePos,$plFilePosHigh,$dwMoveMethod) {
 $hFile = $hFile|0;
 $lFilePos = $lFilePos|0;
 $plFilePosHigh = $plFilePosHigh|0;
 $dwMoveMethod = $dwMoveMethod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FilePosition = 0, $MoveOffset = 0, $dwFilePosHi = 0, $hf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $FilePosition = sp + 8|0;
 $MoveOffset = sp;
 $1 = $hFile;
 $2 = $lFilePos;
 $3 = $plFilePosHigh;
 $4 = $dwMoveMethod;
 $5 = $1;
 $6 = (__Z17IsValidFileHandlePv($5)|0);
 $hf = $6;
 $7 = $hf;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _SetLastError(9);
  $0 = -1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $9 = $4;
 switch ($9|0) {
 case 0:  {
  $10 = $FilePosition;
  $11 = $10;
  HEAP32[$11>>2] = 0;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  break;
 }
 case 1:  {
  $14 = $hf;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $FilePosition;
  $18 = $17;
  HEAP32[$18>>2] = $16;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = 0;
  break;
 }
 case 2:  {
  $21 = $hf;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $FilePosition;
  $25 = $24;
  HEAP32[$25>>2] = $23;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
  break;
 }
 default: {
  _SetLastError(22);
  $0 = -1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 }
 $28 = $3;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $3;
  $31 = HEAP32[$30>>2]|0;
  $dwFilePosHi = $31;
 } else {
  $32 = $2;
  $33 = $32 & -2147483648;
  $34 = ($33|0)!=(0);
  $35 = $34 ? -1 : 0;
  $dwFilePosHi = $35;
 }
 $36 = $dwFilePosHi;
 $37 = $2;
 $38 = ($37|0)<(0);
 $39 = $38 << 31 >> 31;
 $40 = $36 | $39;
 $41 = $MoveOffset;
 $42 = $41;
 HEAP32[$42>>2] = $37;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 $45 = $FilePosition;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = $MoveOffset;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_i64Add(($47|0),($50|0),($53|0),($56|0))|0);
 $58 = tempRet0;
 $59 = $FilePosition;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = ($58>>>0)>($64>>>0);
 $66 = ($57>>>0)>=($61>>>0);
 $67 = ($58|0)==($64|0);
 $68 = $67 & $66;
 $69 = $65 | $68;
 if ($69) {
  $70 = $FilePosition;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 4)|0;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = $MoveOffset;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (_i64Add(($72|0),($75|0),($78|0),($81|0))|0);
  $83 = tempRet0;
  $86 = $82;$89 = $83;
 } else {
  $86 = 0;$89 = 0;
 }
 $84 = $FilePosition;
 $85 = $84;
 HEAP32[$85>>2] = $86;
 $87 = (($84) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $89;
 $90 = $FilePosition;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0);
 $97 = (0)!=(0);
 $98 = $96 | $97;
 if ($98) {
  _SetLastError(22);
  $0 = -1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $99 = $FilePosition;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (($99) + 4)|0;
 $103 = $102;
 $104 = HEAP32[$103>>2]|0;
 $105 = $hf;
 $106 = ((($105)) + 12|0);
 HEAP32[$106>>2] = $101;
 $107 = $3;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = $3;
  HEAP32[$109>>2] = 0;
 }
 $110 = $hf;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $0 = $112;
 $113 = $0;
 STACKTOP = sp;return ($113|0);
}
function _CascReadFile($hFile,$pvBuffer,$dwBytesToRead,$pdwBytesRead) {
 $hFile = $hFile|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 $pdwBytesRead = $pdwBytesRead|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $FileOffset = 0, $StreamSize = 0, $bReadResult = 0, $dwEndPointer = 0, $dwFilePointer = 0, $dwFrameEnd = 0, $dwFrameSize = 0, $dwFrameStart = 0, $dwStartPointer = 0, $hf = 0, $nError = 0, $pFrame = 0, $pbBuffer = 0, $pbFrameData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $0 = sp + 77|0;
 $StreamSize = sp + 8|0;
 $FileOffset = sp;
 $1 = $hFile;
 $2 = $pvBuffer;
 $3 = $dwBytesToRead;
 $4 = $pdwBytesRead;
 $pFrame = 0;
 $5 = $2;
 $pbBuffer = $5;
 $dwStartPointer = 0;
 $dwFilePointer = 0;
 $dwEndPointer = 0;
 $nError = 0;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _SetLastError(22);
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $257 = $$pre_trunc&1;
  STACKTOP = sp;return ($257|0);
 }
 $8 = $1;
 $9 = (__Z17IsValidFileHandlePv($8)|0);
 $hf = $9;
 $10 = ($9|0)==(0|0);
 if ($10) {
  _SetLastError(9);
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $257 = $$pre_trunc&1;
  STACKTOP = sp;return ($257|0);
 }
 $11 = $nError;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $hf;
  $14 = (__ZL24EnsureFrameHeadersLoadedP10_TCascFile($13)|0);
  $nError = $14;
 }
 $15 = $nError;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $hf;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $hf;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)>=($22>>>0);
  if ($23) {
   $24 = $4;
   HEAP32[$24>>2] = 0;
   $$expand_i1_val4 = 0;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $257 = $$pre_trunc&1;
   STACKTOP = sp;return ($257|0);
  }
 }
 $25 = $nError;
 $26 = ($25|0)==(0);
 do {
  if ($26) {
   $27 = $hf;
   $28 = $hf;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (__ZL13FindFileFrameP10_TCascFilej($27,$30)|0);
   $pFrame = $31;
   $32 = $pFrame;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $34 = $pFrame;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36>>>0)<(1);
    if (!($37)) {
     break;
    }
   }
   $nError = 1004;
  }
 } while(0);
 $38 = $nError;
 $39 = ($38|0)==(0);
 L23: do {
  if ($39) {
   $40 = $hf;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $dwFilePointer = $42;
   $dwStartPointer = $42;
   $43 = $dwStartPointer;
   $44 = $3;
   $45 = (($43) + ($44))|0;
   $dwEndPointer = $45;
   $46 = $dwEndPointer;
   $47 = $hf;
   $48 = ((($47)) + 36|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($46>>>0)>($49>>>0);
   if ($50) {
    $51 = $hf;
    $52 = ((($51)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $dwEndPointer = $53;
   }
   while(1) {
    $54 = $dwFilePointer;
    $55 = $dwEndPointer;
    $56 = ($54>>>0)<($55>>>0);
    if (!($56)) {
     break L23;
    }
    $pbFrameData = 0;
    $57 = $pFrame;
    $58 = ((($57)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $dwFrameStart = $59;
    $60 = $pFrame;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $pFrame;
    $64 = ((($63)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($62) + ($65))|0;
    $dwFrameEnd = $66;
    $67 = $dwFrameStart;
    $68 = $hf;
    $69 = ((($68)) + 72|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($67|0)!=($70|0);
    if ($71) {
     label = 20;
    } else {
     $72 = $hf;
     $73 = ((($72)) + 76|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $dwFrameEnd;
     $76 = ($74|0)!=($75|0);
     if ($76) {
      label = 20;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $77 = $pFrame;
     $78 = ((($77)) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $hf;
     $81 = ((($80)) + 68|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($79>>>0)>($82>>>0);
     if ($83) {
      $84 = $hf;
      $85 = ((($84)) + 64|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)!=(0|0);
      if ($87) {
       $88 = $hf;
       $89 = ((($88)) + 64|0);
       $90 = HEAP32[$89>>2]|0;
       _free($90);
      }
      $91 = $pFrame;
      $92 = ((($91)) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $93;
      $95 = (_malloc($94)|0);
      $96 = $hf;
      $97 = ((($96)) + 64|0);
      HEAP32[$97>>2] = $95;
      $98 = $pFrame;
      $99 = ((($98)) + 12|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $hf;
      $102 = ((($101)) + 68|0);
      HEAP32[$102>>2] = $100;
     }
     $103 = $pFrame;
     $104 = ((($103)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105;
     $107 = (_malloc($106)|0);
     $pbFrameData = $107;
     $108 = $pbFrameData;
     $109 = ($108|0)==(0|0);
     if ($109) {
      break;
     }
     $110 = $pFrame;
     $111 = HEAP32[$110>>2]|0;
     $112 = $FileOffset;
     $113 = $112;
     HEAP32[$113>>2] = $111;
     $114 = (($112) + 4)|0;
     $115 = $114;
     HEAP32[$115>>2] = 0;
     $116 = $hf;
     $117 = ((($116)) + 4|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $pbFrameData;
     $120 = $pFrame;
     $121 = ((($120)) + 8|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (__Z15FileStream_ReadP11TFileStreamPyPvj($118,$FileOffset,$119,$122)|0);
     $124 = $123&1;
     $bReadResult = $124;
     $125 = $bReadResult;
     $126 = $125&1;
     $127 = $126&1;
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = (_GetLastError()|0);
      $130 = ($129|0)==(1002);
      if ($130) {
       $131 = $pFrame;
       $132 = ((($131)) + 16|0);
       $133 = (__Z10IsValidMD5Ph($132)|0);
       if (!($133)) {
        $134 = $hf;
        $135 = ((($134)) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        (__Z18FileStream_GetSizeP11TFileStreamPy($136,$StreamSize)|0);
        $137 = $StreamSize;
        $138 = $137;
        $139 = HEAP32[$138>>2]|0;
        $140 = (($137) + 4)|0;
        $141 = $140;
        $142 = HEAP32[$141>>2]|0;
        $143 = $FileOffset;
        $144 = $143;
        $145 = HEAP32[$144>>2]|0;
        $146 = (($143) + 4)|0;
        $147 = $146;
        $148 = HEAP32[$147>>2]|0;
        $149 = (_i64Subtract(($139|0),($142|0),($145|0),($148|0))|0);
        $150 = tempRet0;
        $dwFrameSize = $149;
        $151 = $FileOffset;
        $152 = $151;
        $153 = HEAP32[$152>>2]|0;
        $154 = (($151) + 4)|0;
        $155 = $154;
        $156 = HEAP32[$155>>2]|0;
        $157 = $StreamSize;
        $158 = $157;
        $159 = HEAP32[$158>>2]|0;
        $160 = (($157) + 4)|0;
        $161 = $160;
        $162 = HEAP32[$161>>2]|0;
        $163 = ($156>>>0)<($162>>>0);
        $164 = ($153>>>0)<($159>>>0);
        $165 = ($156|0)==($162|0);
        $166 = $165 & $164;
        $167 = $163 | $166;
        if ($167) {
         $168 = $dwFrameSize;
         $169 = $pFrame;
         $170 = ((($169)) + 8|0);
         $171 = HEAP32[$170>>2]|0;
         $172 = ($168>>>0)<($171>>>0);
         if ($172) {
          $173 = $pbFrameData;
          $174 = $dwFrameSize;
          $175 = (($173) + ($174)|0);
          $176 = $pFrame;
          $177 = ((($176)) + 8|0);
          $178 = HEAP32[$177>>2]|0;
          $179 = $dwFrameSize;
          $180 = (($178) - ($179))|0;
          _memset(($175|0),0,($180|0))|0;
          $bReadResult = 1;
         }
        }
       }
      }
     }
     $181 = $bReadResult;
     $182 = $181&1;
     if ($182) {
      $183 = $pbFrameData;
      $184 = $pFrame;
      $185 = ((($184)) + 8|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $pFrame;
      $188 = ((($187)) + 16|0);
      $189 = (__Z19VerifyDataBlockHashPvjPh($183,$186,$188)|0);
      if ($189) {
       $190 = $hf;
       $191 = ((($190)) + 64|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = $pFrame;
       $194 = ((($193)) + 12|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $pbFrameData;
       $197 = $pFrame;
       $198 = ((($197)) + 8|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = $pFrame;
       $201 = $hf;
       $202 = ((($201)) + 56|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $207 = (($206|0) / 32)&-1;
       $208 = (__ZL16ProcessFileFramePhjS_jj($192,$195,$196,$199,$207)|0);
       $nError = $208;
       $209 = $nError;
       $210 = ($209|0)==(0);
       if ($210) {
        $211 = $dwFrameStart;
        $212 = $hf;
        $213 = ((($212)) + 72|0);
        HEAP32[$213>>2] = $211;
        $214 = $dwFrameEnd;
        $215 = $hf;
        $216 = ((($215)) + 76|0);
        HEAP32[$216>>2] = $214;
       }
      } else {
       label = 36;
      }
     } else {
      label = 36;
     }
     if ((label|0) == 36) {
      label = 0;
      $nError = 1004;
     }
     $217 = $pbFrameData;
     _free($217);
    }
    $218 = $dwFrameEnd;
    $219 = $dwEndPointer;
    $220 = ($218>>>0)>($219>>>0);
    if ($220) {
     $221 = $dwEndPointer;
     $dwFrameEnd = $221;
    }
    $222 = $pbBuffer;
    $223 = $hf;
    $224 = ((($223)) + 64|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $dwFilePointer;
    $227 = $dwFrameStart;
    $228 = (($226) - ($227))|0;
    $229 = (($225) + ($228)|0);
    $230 = $dwFrameEnd;
    $231 = $dwFilePointer;
    $232 = (($230) - ($231))|0;
    _memcpy(($222|0),($229|0),($232|0))|0;
    $233 = $dwFrameEnd;
    $234 = $dwFilePointer;
    $235 = (($233) - ($234))|0;
    $236 = $pbBuffer;
    $237 = (($236) + ($235)|0);
    $pbBuffer = $237;
    $238 = $dwFrameEnd;
    $dwFilePointer = $238;
    $239 = $pFrame;
    $240 = ((($239)) + 32|0);
    $pFrame = $240;
   }
   $nError = 12;
  }
 } while(0);
 $241 = $nError;
 $242 = ($241|0)==(0);
 if ($242) {
  $243 = $4;
  $244 = ($243|0)!=(0|0);
  if ($244) {
   $245 = $dwFilePointer;
   $246 = $dwStartPointer;
   $247 = (($245) - ($246))|0;
   $248 = $4;
   HEAP32[$248>>2] = $247;
  }
  $249 = $dwFilePointer;
  $250 = $hf;
  $251 = ((($250)) + 12|0);
  HEAP32[$251>>2] = $249;
 }
 $252 = $nError;
 $253 = ($252|0)!=(0);
 if ($253) {
  $254 = $nError;
  _SetLastError($254);
 }
 $255 = $nError;
 $256 = ($255|0)==(0);
 $$expand_i1_val6 = $256&1;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $257 = $$pre_trunc&1;
 STACKTOP = sp;return ($257|0);
}
function __ZL24EnsureFrameHeadersLoadedP10_TCascFile($hf) {
 $hf = $hf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $nError = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $hf;
 $2 = $1;
 $3 = (__ZL24EnsureHeaderAreaIsLoadedP10_TCascFile($2)|0);
 $nError = $3;
 $4 = $nError;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $nError;
  $0 = $6;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $7 = $1;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $11 = $1;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<5;
 $15 = (_malloc($14)|0);
 $16 = $1;
 $17 = ((($16)) + 56|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 do {
  if ($21) {
   $22 = $1;
   $23 = ((($22)) + 24|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   $26 = $1;
   $27 = ((($26)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 4)|0;
   $30 = (($29) + 4)|0;
   if ($25) {
    $31 = (($30) + 4)|0;
    $32 = $1;
    $33 = ((($32)) + 28|0);
    HEAP32[$33>>2] = $31;
    $34 = $1;
    $35 = (__ZL14LoadFileFramesP10_TCascFile($34)|0);
    $nError = $35;
    break;
   } else {
    $36 = $1;
    $37 = ((($36)) + 28|0);
    HEAP32[$37>>2] = $30;
    $38 = $1;
    $39 = ((($38)) + 28|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $1;
    $42 = ((($41)) + 56|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$43>>2] = $40;
    $44 = $1;
    $45 = ((($44)) + 56|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 4|0);
    HEAP32[$47>>2] = 0;
    $48 = $1;
    $49 = ((($48)) + 32|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $1;
    $52 = ((($51)) + 56|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 8|0);
    HEAP32[$54>>2] = $50;
    $55 = $1;
    $56 = ((($55)) + 36|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $1;
    $59 = ((($58)) + 56|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 12|0);
    HEAP32[$61>>2] = $57;
    $62 = $1;
    $63 = ((($62)) + 56|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ((($64)) + 16|0);
    dest=$65; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    break;
   }
  }
 } while(0);
 $66 = $1;
 $67 = ((($66)) + 56|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0|0);
 $70 = $69 ? 0 : 1004;
 $0 = $70;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function __ZL13FindFileFrameP10_TCascFilej($hf,$FilePointer) {
 $hf = $hf|0;
 $FilePointer = $FilePointer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FrameBegin = 0;
 var $FrameEnd = 0, $i = 0, $pFrame = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hf;
 $2 = $FilePointer;
 $3 = $1;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $pFrame = $5;
 $6 = $1;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((18427|0),(18341|0),251,(18447|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  ___assert_fail((18461|0),(18341|0),252,(18447|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $1;
  $16 = ((($15)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  if (!($18)) {
   label = 11;
   break;
  }
  $19 = $pFrame;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $FrameBegin = $21;
  $22 = $FrameBegin;
  $23 = $pFrame;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($22) + ($25))|0;
  $FrameEnd = $26;
  $27 = $FrameBegin;
  $28 = $2;
  $29 = ($27>>>0)<=($28>>>0);
  if ($29) {
   $30 = $2;
   $31 = $FrameEnd;
   $32 = ($30>>>0)<($31>>>0);
   if ($32) {
    label = 9;
    break;
   }
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
  $36 = $pFrame;
  $37 = ((($36)) + 32|0);
  $pFrame = $37;
 }
 if ((label|0) == 9) {
  $33 = $pFrame;
  $0 = $33;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZL16ProcessFileFramePhjS_jj($pbOutBuffer,$cbOutBuffer,$pbInBuffer,$cbInBuffer,$dwFrameIndex) {
 $pbOutBuffer = $pbOutBuffer|0;
 $cbOutBuffer = $cbOutBuffer|0;
 $pbInBuffer = $pbInBuffer|0;
 $cbInBuffer = $cbInBuffer|0;
 $dwFrameIndex = $dwFrameIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $bWorkComplete = 0, $cbTempBuffer = 0, $cbWorkBuffer = 0, $dwStepCount = 0;
 var $nError = 0, $pbTempBuffer = 0, $pbWorkBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $cbWorkBuffer = sp + 8|0;
 $1 = $pbOutBuffer;
 $2 = $cbOutBuffer;
 $3 = $pbInBuffer;
 $4 = $cbInBuffer;
 $5 = $dwFrameIndex;
 $6 = $4;
 $7 = $2;
 $8 = ($6>>>0)>($7>>>0);
 $9 = $4;
 $10 = $2;
 $11 = $8 ? $9 : $10;
 $cbTempBuffer = $11;
 $12 = $2;
 $13 = (($12) + 1)|0;
 HEAP32[$cbWorkBuffer>>2] = $13;
 $dwStepCount = 0;
 $bWorkComplete = 0;
 $nError = 0;
 $14 = $cbTempBuffer;
 $15 = $14;
 $16 = (_malloc($15)|0);
 $pbTempBuffer = $16;
 $pbWorkBuffer = $16;
 $17 = $pbWorkBuffer;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = 12;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 L4: while(1) {
  $19 = $dwStepCount;
  $20 = $19 & 1;
  $21 = ($20|0)!=(0);
  $22 = $1;
  $23 = $pbTempBuffer;
  $24 = $21 ? $22 : $23;
  $pbWorkBuffer = $24;
  $25 = $dwStepCount;
  $26 = $25 & 1;
  $27 = ($26|0)!=(0);
  $28 = $2;
  $29 = $cbTempBuffer;
  $30 = $27 ? $28 : $29;
  HEAP32[$cbWorkBuffer>>2] = $30;
  $31 = $3;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  switch ($33|0) {
  case 69:  {
   $34 = $pbWorkBuffer;
   $35 = $3;
   $36 = ((($35)) + 1|0);
   $37 = $4;
   $38 = (($37) - 1)|0;
   $39 = $5;
   $40 = (__Z11CascDecryptPhPjS_jj($34,$cbWorkBuffer,$36,$38,$39)|0);
   $nError = $40;
   $41 = $nError;
   $42 = ($41|0)!=(0);
   $43 = $42&1;
   $bWorkComplete = $43;
   break;
  }
  case 90:  {
   $44 = $pbWorkBuffer;
   $45 = $3;
   $46 = ((($45)) + 1|0);
   $47 = $4;
   $48 = (($47) - 1)|0;
   $49 = (__Z14CascDecompressPhPjS_j($44,$cbWorkBuffer,$46,$48)|0);
   $nError = $49;
   $bWorkComplete = 1;
   break;
  }
  case 78:  {
   $50 = $pbWorkBuffer;
   $51 = $3;
   $52 = ((($51)) + 1|0);
   $53 = $4;
   $54 = (($53) - 1)|0;
   $55 = (__Z14CascDirectCopyPhPjS_j($50,$cbWorkBuffer,$52,$54)|0);
   $nError = $55;
   $bWorkComplete = 1;
   break;
  }
  default: {
   label = 7;
   break L4;
  }
  }
  $56 = $bWorkComplete;
  $57 = $56&1;
  if ($57) {
   break;
  }
  $58 = $pbWorkBuffer;
  $3 = $58;
  $59 = HEAP32[$cbWorkBuffer>>2]|0;
  $4 = $59;
  $60 = $dwStepCount;
  $61 = (($60) + 1)|0;
  $dwStepCount = $61;
 }
 if ((label|0) == 7) {
  $nError = 95;
  $bWorkComplete = 1;
  ___assert_fail((19711|0),(18341|0),319,(18410|0));
  // unreachable;
 }
 $62 = $nError;
 $63 = ($62|0)==(0);
 if ($63) {
  $64 = $pbWorkBuffer;
  $65 = $1;
  $66 = ($64|0)!=($65|0);
  if ($66) {
   $67 = HEAP32[$cbWorkBuffer>>2]|0;
   $68 = $2;
   $69 = ($67|0)!=($68|0);
   if ($69) {
    $nError = 105;
   }
   $70 = $1;
   $71 = $pbWorkBuffer;
   $72 = $2;
   _memcpy(($70|0),($71|0),($72|0))|0;
  }
 }
 $73 = $pbTempBuffer;
 _free($73);
 $74 = $nError;
 $0 = $74;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function __ZL24EnsureHeaderAreaIsLoadedP10_TCascFile($hf) {
 $hf = $hf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FileOffset = 0, $FileSignature = 0, $FileSize = 0, $HeaderArea = 0, $hs = 0, $nError = 0, $pbHeaderArea = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $FileOffset = sp;
 $FileSignature = sp + 16|0;
 $HeaderArea = sp + 36|0;
 $1 = $hf;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $hs = $3;
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $FileOffset;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = (__ZL22EnsureDataStreamIsOpenP10_TCascFile($11)|0);
 $nError = $12;
 $13 = $nError;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $nError;
  $0 = $15;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $16 = $hs;
 $17 = ((($16)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(-1);
 do {
  if ($19) {
   HEAP32[$FileSignature>>2] = 0;
   $20 = $1;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $FileOffset;
   $24 = $23;
   HEAP32[$24>>2] = $22;
   $25 = (($23) + 4)|0;
   $26 = $25;
   HEAP32[$26>>2] = 0;
   $27 = $1;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (__Z15FileStream_ReadP11TFileStreamPyPvj($29,$FileOffset,$FileSignature,4)|0);
   if ($30) {
    $31 = HEAP32[$FileSignature>>2]|0;
    $32 = ($31|0)==(1163152450);
    $33 = $32 ? 30 : 0;
    $34 = $hs;
    $35 = ((($34)) + 40|0);
    HEAP32[$35>>2] = $33;
    break;
   }
   $0 = 1004;
   $106 = $0;
   STACKTOP = sp;return ($106|0);
  }
 } while(0);
 $36 = $1;
 $37 = ((($36)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 do {
  if ($39) {
   $40 = $1;
   $41 = ((($40)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $hs;
   $44 = ((($43)) + 40|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($42) - ($45))|0;
   $47 = $FileOffset;
   $48 = $47;
   HEAP32[$48>>2] = $46;
   $49 = (($47) + 4)|0;
   $50 = $49;
   HEAP32[$50>>2] = 0;
   $51 = $1;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (__Z15FileStream_ReadP11TFileStreamPyPvj($53,$FileOffset,$HeaderArea,42)|0);
   if (!($54)) {
    $0 = 1004;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   $55 = $1;
   $56 = ((($55)) + 40|0);
   dest=$56; src=$HeaderArea; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $57 = ((($HeaderArea)) + 16|0);
   $pbHeaderArea = $57;
   $58 = $pbHeaderArea;
   $59 = (__Z26ConvertBytesToInteger_4_LEPh($58)|0);
   $FileSize = $59;
   $60 = $pbHeaderArea;
   $61 = ((($60)) + 14|0);
   $pbHeaderArea = $61;
   $62 = $pbHeaderArea;
   $63 = (__Z26ConvertBytesToInteger_4_LEPh($62)|0);
   $64 = ($63|0)!=(1163152450);
   if ($64) {
    $0 = 1000;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   $65 = $pbHeaderArea;
   $66 = ((($65)) + 4|0);
   $pbHeaderArea = $66;
   $67 = $pbHeaderArea;
   $68 = (__Z23ConvertBytesToInteger_4Ph($67)|0);
   $69 = $1;
   $70 = ((($69)) + 24|0);
   HEAP32[$70>>2] = $68;
   $71 = $1;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 & -2147483648;
   $75 = ($74|0)!=(0);
   if ($75) {
    $0 = 1000;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   $76 = $pbHeaderArea;
   $77 = ((($76)) + 4|0);
   $pbHeaderArea = $77;
   $78 = $hs;
   $79 = ((($78)) + 40|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80>>>0)<=(30);
   if (!($81)) {
    ___assert_fail((18527|0),(18341|0),178,(18569|0));
    // unreachable;
   }
   $82 = $hs;
   $83 = ((($82)) + 40|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (30 - ($84))|0;
   $86 = $1;
   $87 = ((($86)) + 20|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + ($85))|0;
   HEAP32[$87>>2] = $89;
   $90 = $1;
   $91 = ((($90)) + 60|0);
   HEAP32[$91>>2] = 1;
   $92 = $1;
   $93 = ((($92)) + 24|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = $pbHeaderArea;
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = ($98|0)!=(15);
    if (!($99)) {
     $100 = $pbHeaderArea;
     $101 = ((($100)) + 1|0);
     $pbHeaderArea = $101;
     $102 = $pbHeaderArea;
     $103 = (__Z23ConvertBytesToInteger_3Ph($102)|0);
     $104 = $1;
     $105 = ((($104)) + 60|0);
     HEAP32[$105>>2] = $103;
     break;
    }
    $0 = 1000;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
  }
 } while(0);
 $0 = 0;
 $106 = $0;
 STACKTOP = sp;return ($106|0);
}
function __ZL14LoadFileFramesP10_TCascFile($hf) {
 $hf = $hf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ArchiveFileOffset = 0, $FileSize = 0, $FrameOffset = 0, $i = 0, $nError = 0, $pFileFrame = 0, $pFileFrames = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ArchiveFileOffset = sp;
 $0 = $hf;
 $FrameOffset = 0;
 $FileSize = 0;
 $nError = 0;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((18481|0),(18341|0),69,(18492|0));
  // unreachable;
 }
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((18507|0),(18341|0),70,(18492|0));
  // unreachable;
 }
 $7 = $0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((18427|0),(18341|0),71,(18492|0));
  // unreachable;
 }
 $11 = $0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13*24)|0;
 $15 = (_malloc($14)|0);
 $pFileFrame = $15;
 $pFileFrames = $15;
 $16 = $pFileFrames;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $nError = 12;
  $144 = $nError;
  STACKTOP = sp;return ($144|0);
 }
 $18 = $0;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $ArchiveFileOffset;
 $22 = $21;
 HEAP32[$22>>2] = $20;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = $0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $pFileFrames;
 $29 = $0;
 $30 = ((($29)) + 60|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31*24)|0;
 $33 = (__Z15FileStream_ReadP11TFileStreamPyPvj($27,$ArchiveFileOffset,$28,$32)|0);
 L14: do {
  if ($33) {
   $34 = $0;
   $35 = ((($34)) + 60|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36*24)|0;
   $38 = $ArchiveFileOffset;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (_i64Add(($40|0),($43|0),($37|0),0)|0);
   $45 = tempRet0;
   $46 = $ArchiveFileOffset;
   $47 = $46;
   HEAP32[$47>>2] = $44;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $45;
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = $0;
    $52 = ((($51)) + 60|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($50>>>0)<($53>>>0);
    if (!($54)) {
     break L14;
    }
    $55 = $ArchiveFileOffset;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($55) + 4)|0;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = $i;
    $62 = $0;
    $63 = ((($62)) + 56|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($61<<5)|0);
    HEAP32[$65>>2] = $57;
    $66 = $FrameOffset;
    $67 = $i;
    $68 = $0;
    $69 = ((($68)) + 56|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<5)|0);
    $72 = ((($71)) + 4|0);
    HEAP32[$72>>2] = $66;
    $73 = $pFileFrame;
    $74 = (__Z23ConvertBytesToInteger_4Ph($73)|0);
    $75 = $i;
    $76 = $0;
    $77 = ((($76)) + 56|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($75<<5)|0);
    $80 = ((($79)) + 8|0);
    HEAP32[$80>>2] = $74;
    $81 = $pFileFrame;
    $82 = ((($81)) + 4|0);
    $83 = (__Z23ConvertBytesToInteger_4Ph($82)|0);
    $84 = $i;
    $85 = $0;
    $86 = ((($85)) + 56|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + ($84<<5)|0);
    $89 = ((($88)) + 12|0);
    HEAP32[$89>>2] = $83;
    $90 = $i;
    $91 = $0;
    $92 = ((($91)) + 56|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($90<<5)|0);
    $95 = ((($94)) + 16|0);
    $96 = $pFileFrame;
    $97 = ((($96)) + 8|0);
    dest=$95; src=$97; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $98 = $i;
    $99 = $0;
    $100 = ((($99)) + 56|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($98<<5)|0);
    $103 = ((($102)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $ArchiveFileOffset;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = (($105) + 4)|0;
    $109 = $108;
    $110 = HEAP32[$109>>2]|0;
    $111 = (_i64Add(($107|0),($110|0),($104|0),0)|0);
    $112 = tempRet0;
    $113 = $ArchiveFileOffset;
    $114 = $113;
    HEAP32[$114>>2] = $111;
    $115 = (($113) + 4)|0;
    $116 = $115;
    HEAP32[$116>>2] = $112;
    $117 = $i;
    $118 = $0;
    $119 = ((($118)) + 56|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($117<<5)|0);
    $122 = ((($121)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $FrameOffset;
    $125 = (($124) + ($123))|0;
    $FrameOffset = $125;
    $126 = $i;
    $127 = $0;
    $128 = ((($127)) + 56|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + ($126<<5)|0);
    $131 = ((($130)) + 12|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $FileSize;
    $134 = (($133) + ($132))|0;
    $FileSize = $134;
    $135 = $i;
    $136 = (($135) + 1)|0;
    $i = $136;
    $137 = $pFileFrame;
    $138 = ((($137)) + 24|0);
    $pFileFrame = $138;
   }
  } else {
   $139 = (_GetLastError()|0);
   $nError = $139;
  }
 } while(0);
 $140 = $FileSize;
 $141 = $0;
 $142 = ((($141)) + 36|0);
 HEAP32[$142>>2] = $140;
 $143 = $pFileFrames;
 _free($143);
 $144 = $nError;
 STACKTOP = sp;return ($144|0);
}
function __ZL22EnsureDataStreamIsOpenP10_TCascFile($hf) {
 $hf = $hf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hs = 0, $pStream = 0, $szDataFile = 0, $szPlainName = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $szPlainName = sp + 24|0;
 $0 = $hf;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $hs = $2;
 $pStream = 0;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $hs;
 $7 = ((($6)) + 140|0);
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  (_sprintf($szPlainName,18594,$vararg_buffer)|0);
  $14 = $hs;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__Z11CombinePathPKcS0_($16,$szPlainName)|0);
  $szDataFile = $17;
  $18 = $szDataFile;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $szDataFile;
   $21 = (__Z19FileStream_OpenFilePKcj($20,256)|0);
   $pStream = $21;
   $22 = $pStream;
   $23 = $0;
   $24 = ((($23)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $hs;
   $27 = ((($26)) + 140|0);
   $28 = (($27) + ($25<<2)|0);
   HEAP32[$28>>2] = $22;
   $29 = $szDataFile;
   _free($29);
  }
 }
 $30 = $0;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $hs;
 $34 = ((($33)) + 140|0);
 $35 = (($34) + ($32<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $36;
 $39 = $0;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 $43 = $42 ? 0 : 2;
 STACKTOP = sp;return ($43|0);
}
function __Z25RootHandler_CreateDiablo3P13_TCascStoragePhj($hs,$pbRootFile,$cbRootFile) {
 $hs = $hs|0;
 $pbRootFile = $pbRootFile|0;
 $cbRootFile = $cbRootFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cbCoreTOC = 0, $cbPackagesDat = 0, $dwRootEntries = 0, $dwTotalFileCount = 0, $i = 0, $nError = 0, $pPackageMap = 0, $pRootEntry = 0, $pRootHandler = 0, $pbCoreTOC = 0, $pbPackagesDat = 0, $pbRootFileEnd = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 48|0;
 $cbPackagesDat = sp + 24|0;
 $cbCoreTOC = sp;
 $1 = $hs;
 $2 = $pbRootFile;
 HEAP32[$3>>2] = $cbRootFile;
 $pPackageMap = 0;
 $4 = $2;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($4) + ($5)|0);
 $pbRootFileEnd = $6;
 $pbPackagesDat = 0;
 HEAP32[$cbPackagesDat>>2] = 0;
 $7 = (_malloc(68)|0);
 $pRootHandler = $7;
 $8 = $1;
 $9 = ((($8)) + 1840|0);
 HEAP32[$9>>2] = $7;
 $10 = $pRootHandler;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 12;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $12 = $pRootHandler;
 dest=$12; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = $pRootHandler;
 HEAP32[$13>>2] = 55;
 $14 = $pRootHandler;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 56;
 $16 = $pRootHandler;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 57;
 $18 = $pRootHandler;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 58;
 $20 = $pRootHandler;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 59;
 $22 = $pRootHandler;
 $23 = ((($22)) + 24|0);
 HEAP32[$23>>2] = 60;
 $24 = $pRootHandler;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 1;
 HEAP32[$25>>2] = $27;
 $28 = $1;
 $29 = $2;
 $30 = $pbRootFileEnd;
 $31 = (__ZL17ScanDirectoryFileP13_TCascStoragePhS1_($28,$29,$30)|0);
 $dwTotalFileCount = $31;
 $32 = $dwTotalFileCount;
 $33 = ($32|0)==(0);
 if ($33) {
  $0 = 1004;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $34 = $dwTotalFileCount;
 $35 = (($34) + 32)|0;
 $dwTotalFileCount = $35;
 $36 = $pRootHandler;
 $37 = ((($36)) + 32|0);
 $38 = $dwTotalFileCount;
 $39 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($37,40,$38)|0);
 $nError = $39;
 $40 = $nError;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $nError;
  $0 = $42;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $43 = $pRootHandler;
 $44 = ((($43)) + 48|0);
 $45 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($44,1,16777216)|0);
 $nError = $45;
 $46 = $nError;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $nError;
  $0 = $48;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $49 = $dwTotalFileCount;
 $50 = (__Z10Map_Createjjj($49,8,16)|0);
 $51 = $pRootHandler;
 $52 = ((($51)) + 64|0);
 HEAP32[$52>>2] = $50;
 $53 = $pRootHandler;
 $54 = ((($53)) + 64|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $0 = 12;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $57 = $pRootHandler;
 $58 = $2;
 $59 = $pbRootFileEnd;
 $60 = (__ZL18ParseDirectoryFileP20TRootHandler_Diablo3PhS1_j($57,$58,$59,-1)|0);
 $nError = $60;
 $61 = $nError;
 $62 = ($61|0)==(0);
 L21: do {
  if ($62) {
   $63 = $pRootHandler;
   $64 = ((($63)) + 32|0);
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $dwRootEntries = $66;
   $67 = $dwRootEntries;
   $68 = ($67>>>0)<(32);
   if (!($68)) {
    ___assert_fail((18604|0),(18640|0),1143,(18717|0));
    // unreachable;
   }
   $i = 0;
   while(1) {
    $69 = $i;
    $70 = $dwRootEntries;
    $71 = ($69>>>0)<($70>>>0);
    if (!($71)) {
     break L21;
    }
    $72 = $pRootHandler;
    $73 = ((($72)) + 32|0);
    $74 = $i;
    $75 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($73,$74)|0);
    $pRootEntry = $75;
    $76 = $1;
    $77 = $pRootEntry;
    $78 = (__ZL16LoadFileToMemoryP13_TCascStoragePhPj($76,$77,$3)|0);
    $2 = $78;
    $79 = $2;
    $80 = ($79|0)!=(0|0);
    if ($80) {
     $81 = $pRootHandler;
     $82 = $2;
     $83 = $2;
     $84 = HEAP32[$3>>2]|0;
     $85 = (($83) + ($84)|0);
     $86 = $i;
     $87 = (__ZL18ParseDirectoryFileP20TRootHandler_Diablo3PhS1_j($81,$82,$85,$86)|0);
     $nError = $87;
     $88 = $2;
     _free($88);
    }
    $89 = $i;
    $90 = (($89) + 1)|0;
    $i = $90;
   }
  }
 } while(0);
 $91 = $nError;
 $92 = ($91|0)==(0);
 if ($92) {
  $93 = $1;
  $94 = (__ZL16LoadFileToMemoryP13_TCascStoragePKcPj($93,18743,$cbPackagesDat)|0);
  $pbPackagesDat = $94;
  $95 = $pbPackagesDat;
  $96 = ($95|0)!=(0|0);
  if ($96) {
   $97 = $pbPackagesDat;
   $98 = $pbPackagesDat;
   $99 = HEAP32[$cbPackagesDat>>2]|0;
   $100 = (($98) + ($99)|0);
   $101 = (__ZL16CreatePackageMapPhS_($97,$100)|0);
   $pPackageMap = $101;
  }
 }
 $102 = $nError;
 $103 = ($102|0)==(0);
 if ($103) {
  HEAP32[$cbCoreTOC>>2] = 0;
  $104 = $1;
  $105 = (__ZL16LoadFileToMemoryP13_TCascStoragePKcPj($104,18777,$cbCoreTOC)|0);
  $pbCoreTOC = $105;
  $106 = $pbCoreTOC;
  $107 = ($106|0)!=(0|0);
  if ($107) {
   $108 = $pRootHandler;
   $109 = $pPackageMap;
   $110 = $pbCoreTOC;
   $111 = $pbCoreTOC;
   $112 = HEAP32[$cbCoreTOC>>2]|0;
   $113 = (($111) + ($112)|0);
   (__ZL12ParseCoreTOCP20TRootHandler_Diablo3P9_CASC_MAPPhS3_($108,$109,$110,$113)|0);
   $114 = $pbCoreTOC;
   _free($114);
  }
 }
 $115 = $pPackageMap;
 $116 = ($115|0)!=(0|0);
 if ($116) {
  $117 = $pPackageMap;
  __Z8Map_FreeP9_CASC_MAP($117);
 }
 $118 = $pbPackagesDat;
 $119 = ($118|0)!=(0|0);
 if ($119) {
  $120 = $pbPackagesDat;
  _free($120);
 }
 $121 = $nError;
 $0 = $121;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function __ZL16D3Handler_InsertP20TRootHandler_Diablo3PKcPh($pRootHandler,$szFileName,$pbEncodingKey) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 $pbEncodingKey = $pbEncodingKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $EncodingKey = 0, $dwFileIndex = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $EncodingKey = sp + 24|0;
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $pbEncodingKey;
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = ((($8)) + 32|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7>>>0)>=($11>>>0);
 if ($12) {
  $0 = 12;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $13 = $3;
  dest=$EncodingKey; src=$13; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $14 = $1;
  $15 = $2;
  $16 = $2;
  $17 = (_strlen($16)|0);
  $18 = (($17) + 1)|0;
  $19 = (__ZL15InsertFileEntryP20TRootHandler_Diablo3R13_ENCODING_KEYPKcj($14,$EncodingKey,$15,$18)|0);
  $dwFileIndex = $19;
  $20 = $dwFileIndex;
  $21 = ($20|0)!=(-1);
  $22 = $21 ? 0 : 12;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZL16D3Handler_SearchP20TRootHandler_Diablo3P12_TCascSearchPjS3_S3_($pRootHandler,$pSearch,$0,$1,$2) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pFileEntry = 0, $szSrcName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $pRootHandler;
 $5 = $pSearch;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $szSrcName = 0;
 $9 = $5;
 $10 = ((($9)) + 1048|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 32|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($11>>>0)<($15>>>0);
 if (!($16)) {
  $3 = 0;
  $46 = $3;
  STACKTOP = sp;return ($46|0);
 }
 $17 = $4;
 $18 = ((($17)) + 32|0);
 $19 = $5;
 $20 = ((($19)) + 1048|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($18,$21)|0);
 $pFileEntry = $22;
 $23 = $4;
 $24 = ((($23)) + 48|0);
 $25 = $pFileEntry;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($24,$27)|0);
 $szSrcName = $28;
 $29 = $pFileEntry;
 $30 = ((($29)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 1;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $4;
  $35 = $szSrcName;
  $36 = $5;
  $37 = ((($36)) + 20|0);
  (__ZL14CreateFileNameP20TRootHandler_Diablo3PKcPc($34,$35,$37)|0);
 } else {
  $38 = $5;
  $39 = ((($38)) + 20|0);
  $40 = $szSrcName;
  (_strcpy($39,$40)|0);
 }
 $41 = $5;
 $42 = ((($41)) + 1048|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[$42>>2] = $44;
 $45 = $pFileEntry;
 $3 = $45;
 $46 = $3;
 STACKTOP = sp;return ($46|0);
}
function __ZL19D3Handler_EndSearchP20TRootHandler_Diablo3P12_TCascSearch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZL16D3Handler_GetKeyP20TRootHandler_Diablo3PKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FileNameHash = 0, $pFileEntry = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $FileNameHash = sp;
 $0 = $pRootHandler;
 $1 = $szFileName;
 $2 = $1;
 $3 = (__Z16CalcFileNameHashPKc($2)|0);
 $4 = tempRet0;
 $5 = $FileNameHash;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = $0;
 $10 = ((($9)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($11,$FileNameHash,0)|0);
 $pFileEntry = $12;
 $13 = $pFileEntry;
 $14 = ($13|0)!=(0|0);
 $15 = $pFileEntry;
 $16 = $14 ? $15 : 0;
 STACKTOP = sp;return ($16|0);
}
function __ZL15D3Handler_CloseP20TRootHandler_Diablo3($pRootHandler) {
 $pRootHandler = $pRootHandler|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 __Z8Map_FreeP9_CASC_MAP($5);
 $6 = $0;
 $7 = ((($6)) + 32|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($7);
 $8 = $0;
 $9 = ((($8)) + 48|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($9);
 $10 = $0;
 _free($10);
 STACKTOP = sp;return;
}
function __ZL19D3Handler_GetFileIdP20TRootHandler_Diablo3PKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function __ZL17ScanDirectoryFileP13_TCascStoragePhS1_($hs,$pbRootFile,$pbFileEnd) {
 $hs = $hs|0;
 $pbRootFile = $pbRootFile|0;
 $pbFileEnd = $pbFileEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DirHeader = 0, $RootHeader = 0;
 var $cbNamedEntry = 0, $cbSubDir = 0, $dwTotalFileCount = 0, $i = 0, $nError = 0, $pNamedEntry = 0, $pbSubDir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $RootHeader = sp + 48|0;
 $DirHeader = sp + 24|0;
 $cbSubDir = sp + 8|0;
 $1 = $hs;
 $2 = $pbRootFile;
 $3 = $pbFileEnd;
 $4 = $2;
 $5 = $3;
 $6 = (__ZL20ParseDirectoryHeaderP19_DIABLO3_DIR_HEADERPhS1_($RootHeader,$4,$5)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $9 = ((($RootHeader)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($RootHeader)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12))|0;
 $14 = ((($RootHeader)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + ($15))|0;
 $dwTotalFileCount = $16;
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = ((($RootHeader)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17>>>0)<($19>>>0);
  if (!($20)) {
   label = 12;
   break;
  }
  $21 = ((($RootHeader)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = (__ZL20VerifyNamedFileEntryPhS_($22,$23)|0);
  $cbNamedEntry = $24;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 6;
   break;
  }
  $26 = ((($RootHeader)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $pNamedEntry = $27;
  $28 = $cbNamedEntry;
  $29 = ((($RootHeader)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($28)|0);
  HEAP32[$29>>2] = $31;
  $32 = $1;
  $33 = $pNamedEntry;
  $34 = (__ZL16LoadFileToMemoryP13_TCascStoragePhPj($32,$33,$cbSubDir)|0);
  $pbSubDir = $34;
  $35 = $pbSubDir;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $pbSubDir;
   $38 = $pbSubDir;
   $39 = HEAP32[$cbSubDir>>2]|0;
   $40 = (($38) + ($39)|0);
   $41 = (__ZL20ParseDirectoryHeaderP19_DIABLO3_DIR_HEADERPhS1_($DirHeader,$37,$40)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = ((($DirHeader)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($DirHeader)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($44) + ($46))|0;
    $48 = ((($DirHeader)) + 20|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($47) + ($49))|0;
    $51 = $dwTotalFileCount;
    $52 = (($51) + ($50))|0;
    $dwTotalFileCount = $52;
   }
   $53 = $pbSubDir;
   _free($53);
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 12) {
  $56 = $dwTotalFileCount;
  $0 = $56;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function __ZL18ParseDirectoryFileP20TRootHandler_Diablo3PhS1_j($pRootHandler,$pbDirFile,$pbFileEnd,$dwRootDirIndex) {
 $pRootHandler = $pRootHandler|0;
 $pbDirFile = $pbDirFile|0;
 $pbFileEnd = $pbFileEnd|0;
 $dwRootDirIndex = $dwRootDirIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $DirHeader = 0, $nError = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $DirHeader = sp + 8|0;
 $1 = $pRootHandler;
 $2 = $pbDirFile;
 $3 = $pbFileEnd;
 $4 = $dwRootDirIndex;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((22569|0),(18640|0),816,(19579|0));
  // unreachable;
 }
 $9 = $1;
 $10 = ((($9)) + 32|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 32|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($12>>>0)<($16>>>0);
 if (!($17)) {
  ___assert_fail((19598|0),(18640|0),817,(19579|0));
  // unreachable;
 }
 $18 = $2;
 $19 = $3;
 $20 = (__ZL20ParseDirectoryHeaderP19_DIABLO3_DIR_HEADERPhS1_($DirHeader,$18,$19)|0);
 $nError = $20;
 $21 = $nError;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $nError;
  $0 = $23;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $24 = HEAP32[$DirHeader>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = ((($DirHeader)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $4;
   $30 = ($29|0)!=(-1);
   if (!($30)) {
    ___assert_fail((19671|0),(18640|0),830,(19579|0));
    // unreachable;
   }
   $31 = $1;
   $32 = HEAP32[$DirHeader>>2]|0;
   $33 = ((($DirHeader)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $4;
   $36 = (__ZL23ParseDirEntries_FileId1P20TRootHandler_Diablo3Phjj($31,$32,$34,$35)|0);
   $nError = $36;
   $37 = $nError;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $nError;
    $0 = $39;
    $76 = $0;
    STACKTOP = sp;return ($76|0);
   }
  }
 }
 $40 = ((($DirHeader)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = ((($DirHeader)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $4;
   $47 = ($46|0)!=(-1);
   if (!($47)) {
    ___assert_fail((19671|0),(18640|0),842,(19579|0));
    // unreachable;
   }
   $48 = $1;
   $49 = ((($DirHeader)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($DirHeader)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = (__ZL23ParseDirEntries_FileId2P20TRootHandler_Diablo3Phjj($48,$50,$52,$53)|0);
   $nError = $54;
   $55 = $nError;
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = $nError;
    $0 = $57;
    $76 = $0;
    STACKTOP = sp;return ($76|0);
   }
  }
 }
 $58 = ((($DirHeader)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = ((($DirHeader)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $1;
   $65 = ((($DirHeader)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   $68 = ((($DirHeader)) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $4;
   $71 = (__ZL21ParseDirEntries_NamedP20TRootHandler_Diablo3PhS1_jj($64,$66,$67,$69,$70)|0);
   $nError = $71;
   $72 = $nError;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $nError;
    $0 = $74;
    $76 = $0;
    STACKTOP = sp;return ($76|0);
   }
  }
 }
 $75 = $nError;
 $0 = $75;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function __ZL16LoadFileToMemoryP13_TCascStoragePhPj($hs,$pbEncodingKey,$pcbFileData) {
 $hs = $hs|0;
 $pbEncodingKey = $pbEncodingKey|0;
 $pcbFileData = $pcbFileData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $EncodingKey = 0, $cbBytesRead = 0, $cbFileData = 0, $hFile = 0, $pbFileData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $EncodingKey = sp + 16|0;
 $hFile = sp + 8|0;
 $cbBytesRead = sp + 4|0;
 $0 = $hs;
 $1 = $pbEncodingKey;
 $2 = $pcbFileData;
 $pbFileData = 0;
 HEAP32[$cbBytesRead>>2] = 0;
 $cbFileData = 0;
 $3 = $1;
 HEAP32[$EncodingKey>>2] = $3;
 $4 = ((($EncodingKey)) + 4|0);
 HEAP32[$4>>2] = 16;
 $5 = $0;
 $6 = (_CascOpenFileByEncodingKey($5,$EncodingKey,0,$hFile)|0);
 if ($6) {
  $7 = HEAP32[$hFile>>2]|0;
  $8 = (_CascGetFileSize($7,0)|0);
  $cbFileData = $8;
  $9 = $cbFileData;
  $10 = ($9>>>0)>(0);
  if ($10) {
   $11 = $cbFileData;
   $12 = $11;
   $13 = (_malloc($12)|0);
   $pbFileData = $13;
   $14 = $pbFileData;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = HEAP32[$hFile>>2]|0;
    $17 = $pbFileData;
    $18 = $cbFileData;
    (_CascReadFile($16,$17,$18,$cbBytesRead)|0);
   }
  }
  $19 = HEAP32[$hFile>>2]|0;
  (_CascCloseFile($19)|0);
 }
 $20 = $2;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $24 = $pbFileData;
  STACKTOP = sp;return ($24|0);
 }
 $22 = HEAP32[$cbBytesRead>>2]|0;
 $23 = $2;
 HEAP32[$23>>2] = $22;
 $24 = $pbFileData;
 STACKTOP = sp;return ($24|0);
}
function __ZL16LoadFileToMemoryP13_TCascStoragePKcPj($hs,$szFileName,$pcbFileData) {
 $hs = $hs|0;
 $szFileName = $szFileName|0;
 $pcbFileData = $pcbFileData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pbEncodingKey = 0, $pbFileData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $hs;
 $1 = $szFileName;
 $2 = $pcbFileData;
 $pbEncodingKey = 0;
 $pbFileData = 0;
 $3 = $0;
 $4 = ((($3)) + 1840|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (__Z18RootHandler_GetKeyP12TRootHandlerPKc($5,$6)|0);
 $pbEncodingKey = $7;
 $8 = $pbEncodingKey;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = $pbFileData;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $0;
 $11 = $pbEncodingKey;
 $12 = $2;
 $13 = (__ZL16LoadFileToMemoryP13_TCascStoragePhPj($10,$11,$12)|0);
 $pbFileData = $13;
 $14 = $pbFileData;
 STACKTOP = sp;return ($14|0);
}
function __ZL16CreatePackageMapPhS_($pbPackagesDat,$pbPackagesEnd) {
 $pbPackagesDat = $pbPackagesDat|0;
 $pbPackagesEnd = $pbPackagesEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $pDatHeader = 0, $pPackageMap = 0, $szFileName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pbPackagesDat;
 $2 = $pbPackagesEnd;
 $3 = $1;
 $pDatHeader = $3;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = $2;
 $7 = ($5>>>0)>=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $1;
 $9 = ((($8)) + 8|0);
 $1 = $9;
 $10 = $pDatHeader;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(-1430585342);
 if ($12) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = $pDatHeader;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__Z10Map_Createjjj($15,-1,0)|0);
 $pPackageMap = $16;
 $17 = $pPackageMap;
 $18 = ($17|0)!=(0|0);
 L9: do {
  if ($18) {
   $19 = $1;
   $szFileName = $19;
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $pDatHeader;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($20>>>0)<($23>>>0);
    if (!($24)) {
     break L9;
    }
    $25 = $szFileName;
    $26 = $2;
    $27 = ($25>>>0)>=($26>>>0);
    if ($27) {
     break L9;
    }
    $28 = $pPackageMap;
    $29 = $szFileName;
    (__Z16Map_InsertStringP9_CASC_MAPPKcb($28,$29,1)|0);
    $30 = $szFileName;
    $31 = $szFileName;
    $32 = (_strlen($31)|0);
    $33 = (($30) + ($32)|0);
    $34 = ((($33)) + 1|0);
    $szFileName = $34;
    $35 = $i;
    $36 = (($35) + 1)|0;
    $i = $36;
   }
  }
 } while(0);
 $37 = $pPackageMap;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZL12ParseCoreTOCP20TRootHandler_Diablo3P9_CASC_MAPPhS3_($pRootHandler,$pPackageMap,$pbCoreTocFile,$pbCoreTocEnd) {
 $pRootHandler = $pRootHandler|0;
 $pPackageMap = $pPackageMap|0;
 $pbCoreTocFile = $pbCoreTocFile|0;
 $pbCoreTocEnd = $pbCoreTocEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dwFileIndexes = 0, $i = 0, $n = 0, $n1 = 0, $pSortedEntries = 0;
 var $pTocEntry = 0, $pTocHeader = 0, $pbCoreTocNames = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $pRootHandler;
 $2 = $pPackageMap;
 $3 = $pbCoreTocFile;
 $4 = $pbCoreTocEnd;
 $dwFileIndexes = 0;
 $5 = $3;
 $6 = ((($5)) + 844|0);
 $7 = $4;
 $8 = ($6>>>0)>($7>>>0);
 if ($8) {
  $0 = 1004;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $9 = $3;
 $pTocHeader = $9;
 $10 = $3;
 $11 = ((($10)) + 844|0);
 $3 = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12>>>0)<(70);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $i;
  $16 = $pTocHeader;
  $17 = ((($16)) + 280|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($14) + ($19)|0);
  $pTocEntry = $20;
  $n = 0;
  while(1) {
   $21 = $n;
   $22 = $i;
   $23 = $pTocHeader;
   $24 = (($23) + ($22<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($21>>>0)<($25>>>0);
   if (!($26)) {
    break;
   }
   $27 = $pTocEntry;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $dwFileIndexes;
   $31 = ($29>>>0)>=($30>>>0);
   if ($31) {
    $32 = $pTocEntry;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    $dwFileIndexes = $35;
   }
   $36 = $pTocEntry;
   $37 = ((($36)) + 12|0);
   $pTocEntry = $37;
   $38 = $n;
   $39 = (($38) + 1)|0;
   $n = $39;
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $42 = $dwFileIndexes;
 $43 = ($42*12)|0;
 $44 = (_malloc($43)|0);
 $pSortedEntries = $44;
 $45 = $pSortedEntries;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $pSortedEntries;
  $48 = $dwFileIndexes;
  $49 = ($48*12)|0;
  _memset(($47|0),-1,($49|0))|0;
  $i = 0;
  while(1) {
   $50 = $i;
   $51 = ($50>>>0)<(70);
   if (!($51)) {
    break;
   }
   $52 = $3;
   $53 = $i;
   $54 = $pTocHeader;
   $55 = ((($54)) + 280|0);
   $56 = (($55) + ($53<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($52) + ($57)|0);
   $pTocEntry = $58;
   $59 = $pTocEntry;
   $60 = $i;
   $61 = $pTocHeader;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($59) + (($63*12)|0)|0);
   $pbCoreTocNames = $64;
   $n1 = 0;
   while(1) {
    $65 = $n1;
    $66 = $i;
    $67 = $pTocHeader;
    $68 = (($67) + ($66<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($65>>>0)<($69>>>0);
    if (!($70)) {
     break;
    }
    $71 = $pTocEntry;
    $72 = HEAP32[$71>>2]|0;
    $73 = $pTocEntry;
    $74 = ((($73)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $pSortedEntries;
    $77 = (($76) + (($75*12)|0)|0);
    HEAP32[$77>>2] = $72;
    $78 = $pTocEntry;
    $79 = ((($78)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $pTocEntry;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $pSortedEntries;
    $85 = (($84) + (($83*12)|0)|0);
    $86 = ((($85)) + 4|0);
    HEAP32[$86>>2] = $80;
    $87 = $pbCoreTocNames;
    $88 = $3;
    $89 = $87;
    $90 = $88;
    $91 = (($89) - ($90))|0;
    $92 = $pTocEntry;
    $93 = ((($92)) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($91) + ($94))|0;
    $96 = $pTocEntry;
    $97 = ((($96)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $pSortedEntries;
    $100 = (($99) + (($98*12)|0)|0);
    $101 = ((($100)) + 8|0);
    HEAP32[$101>>2] = $95;
    $102 = $pTocEntry;
    $103 = ((($102)) + 12|0);
    $pTocEntry = $103;
    $104 = $n1;
    $105 = (($104) + 1)|0;
    $n1 = $105;
   }
   $106 = $i;
   $107 = (($106) + 1)|0;
   $i = $107;
  }
  $108 = $1;
  $109 = $pSortedEntries;
  $110 = $2;
  $111 = $3;
  $112 = $dwFileIndexes;
  __ZL20ResolveFullFileNamesP20TRootHandler_Diablo3P23_DIABLO3_CORE_TOC_ENTRYP9_CASC_MAPPhj($108,$109,$110,$111,$112);
  $113 = $pSortedEntries;
  _free($113);
 }
 $0 = 0;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function __ZL20ResolveFullFileNamesP20TRootHandler_Diablo3P23_DIABLO3_CORE_TOC_ENTRYP9_CASC_MAPPhj($pRootHandler,$pCoreTocEntries,$pPackageMap,$pbCoreTocFile,$dwFileIndexes) {
 $pRootHandler = $pRootHandler|0;
 $pCoreTocEntries = $pCoreTocEntries|0;
 $pPackageMap = $pPackageMap|0;
 $pbCoreTocFile = $pbCoreTocFile|0;
 $dwFileIndexes = $dwFileIndexes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dwFileIndex = 0, $dwRootIndex = 0, $dwSubIndex = 0, $i = 0, $nLength = 0, $pFileEntry = 0, $szFullName = 0, $szNamePtr = 0, $szPlainName = 0, $szShortName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $szShortName = sp + 1077|0;
 $szFullName = sp + 52|0;
 $0 = $pRootHandler;
 $1 = $pCoreTocEntries;
 $2 = $pPackageMap;
 $3 = $pbCoreTocFile;
 $4 = $dwFileIndexes;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $0;
  $7 = ((($6)) + 32|0);
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($5>>>0)<($9>>>0);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = $0;
  $12 = ((($11)) + 32|0);
  $13 = $i;
  $14 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($12,$13)|0);
  $pFileEntry = $14;
  $15 = $pFileEntry;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 1;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $pFileEntry;
   $21 = ((($20)) + 16|0);
   $22 = $21;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (_bitshift64Lshr(($24|0),($27|0),56)|0);
   $29 = tempRet0;
   $30 = $28 & 255;
   $dwRootIndex = $30;
   $31 = $pFileEntry;
   $32 = ((($31)) + 16|0);
   $33 = $32;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (_bitshift64Lshr(($35|0),($38|0),24)|0);
   $40 = tempRet0;
   $dwFileIndex = $39;
   $41 = $pFileEntry;
   $42 = ((($41)) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 & 2;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $pFileEntry;
    $47 = ((($46)) + 16|0);
    $48 = $47;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (_bitshift64Lshr(($50|0),($53|0),0)|0);
    $55 = tempRet0;
    $56 = $54 & 16777215;
    $57 = $56;
   } else {
    $57 = -1;
   }
   $dwSubIndex = $57;
   $58 = $dwFileIndex;
   $59 = $4;
   $60 = ($58>>>0)<($59>>>0);
   if (!($60)) {
    label = 7;
    break;
   }
   $61 = $3;
   $62 = $dwFileIndex;
   $63 = $1;
   $64 = (($63) + (($62*12)|0)|0);
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($61) + ($66)|0);
   $szPlainName = $67;
   $68 = $2;
   $69 = $dwRootIndex;
   $70 = $dwFileIndex;
   $71 = $1;
   $72 = (($71) + (($70*12)|0)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $szPlainName;
   $75 = $dwSubIndex;
   $76 = (__ZL15CreateShortNameP9_CASC_MAPjjPKcjPc($68,$69,$73,$74,$75,$szShortName)|0);
   $nLength = $76;
   $77 = $0;
   $78 = ((($77)) + 48|0);
   $79 = $nLength;
   $80 = (($79) + 1)|0;
   $81 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($78,$szShortName,$80)|0);
   $szNamePtr = $81;
   $82 = $0;
   $83 = ((($82)) + 48|0);
   $84 = $szNamePtr;
   $85 = (__Z13Array_IndexOfP14_DYNAMIC_ARRAYPKv($83,$84)|0);
   $86 = $pFileEntry;
   $87 = ((($86)) + 24|0);
   HEAP32[$87>>2] = $85;
   $88 = $0;
   $89 = (__ZL14CreateFileNameP20TRootHandler_Diablo3PKcPc($88,$szShortName,$szFullName)|0);
   $nLength = $89;
   $90 = (__Z16CalcFileNameHashPKc($szFullName)|0);
   $91 = tempRet0;
   $92 = $pFileEntry;
   $93 = ((($92)) + 16|0);
   $94 = $93;
   $95 = $94;
   HEAP32[$95>>2] = $90;
   $96 = (($94) + 4)|0;
   $97 = $96;
   HEAP32[$97>>2] = $91;
   $98 = $0;
   $99 = ((($98)) + 64|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $pFileEntry;
   $102 = $pFileEntry;
   $103 = ((($102)) + 16|0);
   (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($100,$101,$103)|0);
  }
  $104 = $i;
  $105 = (($104) + 1)|0;
  $i = $105;
 }
 if ((label|0) == 7) {
  ___assert_fail((18794|0),(18640|0),621,(18822|0));
  // unreachable;
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function __ZL15CreateShortNameP9_CASC_MAPjjPKcjPc($pPackageMap,$dwRootIndex,$dwAssetIndex,$szPlainName,$dwSubIndex,$szBuffer) {
 $pPackageMap = $pPackageMap|0;
 $dwRootIndex = $dwRootIndex|0;
 $dwAssetIndex = $dwAssetIndex|0;
 $szPlainName = $szPlainName|0;
 $dwSubIndex = $dwSubIndex|0;
 $szBuffer = $szBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $nLength = 0, $pAssetInfo = 0, $szFormat = 0, $szPackageName = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $0 = $pPackageMap;
 $1 = $dwRootIndex;
 $2 = $dwAssetIndex;
 $3 = $szPlainName;
 $4 = $dwSubIndex;
 $5 = $szBuffer;
 $6 = $2;
 $7 = (__ZL12GetAssetInfoj($6)|0);
 $pAssetInfo = $7;
 $szPackageName = 0;
 $8 = $1;
 $9 = ($8>>>0)<(256);
 if (!($9)) {
  ___assert_fail((19503|0),(18640|0),292,(19523|0));
  // unreachable;
 }
 $10 = $1;
 $11 = $10 >>> 4;
 $12 = (14094 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $5;
 $15 = ((($14)) + 1|0);
 $5 = $15;
 HEAP8[$14>>0] = $13;
 $16 = $1;
 $17 = $16 & 15;
 $18 = (14094 + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $5;
 $21 = ((($20)) + 1|0);
 $5 = $21;
 HEAP8[$20>>0] = $19;
 $22 = $2;
 $23 = ($22>>>0)<(256);
 if (!($23)) {
  ___assert_fail((19539|0),(18640|0),297,(19523|0));
  // unreachable;
 }
 $24 = $2;
 $25 = $24 >>> 4;
 $26 = (14094 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $5;
 $29 = ((($28)) + 1|0);
 $5 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $2;
 $31 = $30 & 15;
 $32 = (14094 + ($31)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $5;
 $35 = ((($34)) + 1|0);
 $5 = $35;
 HEAP8[$34>>0] = $33;
 $36 = $4;
 $37 = ($36|0)!=(-1);
 $38 = $37 ? 19560 : 19569;
 $szFormat = $38;
 $39 = $5;
 $40 = $szFormat;
 $41 = $3;
 $42 = $4;
 HEAP32[$vararg_buffer>>2] = $41;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $42;
 $43 = (_sprintf($39,$40,$vararg_buffer)|0);
 $nLength = $43;
 $44 = $0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $0;
  $47 = $pAssetInfo;
  $48 = HEAP32[$47>>2]|0;
  $49 = $5;
  $50 = (__ZL15FindPackageNameP9_CASC_MAPPKcS2_($46,$48,$49)|0);
  $szPackageName = $50;
  $51 = $szPackageName;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = $5;
   $54 = $szPackageName;
   $55 = $pAssetInfo;
   $56 = HEAP32[$55>>2]|0;
   $57 = (_strlen($56)|0);
   $58 = (($54) + ($57)|0);
   $59 = ((($58)) + 1|0);
   (_strcpy($53,$59)|0);
   $60 = $5;
   $61 = (_strlen($60)|0);
   $nLength = $61;
  }
 }
 $62 = $szPackageName;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $80 = $nLength;
  $81 = (($80) + 4)|0;
  STACKTOP = sp;return ($81|0);
 }
 $64 = $4;
 $65 = ($64|0)==(-1);
 $66 = $5;
 $67 = $nLength;
 $68 = (($66) + ($67)|0);
 if ($65) {
  $69 = $pAssetInfo;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  (_strcpy($68,$71)|0);
  $72 = $pAssetInfo;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_strlen($74)|0);
  $76 = $nLength;
  $77 = (($76) + ($75))|0;
  $nLength = $77;
  $80 = $nLength;
  $81 = (($80) + 4)|0;
  STACKTOP = sp;return ($81|0);
 } else {
  (_strcpy($68,18860)|0);
  $78 = $nLength;
  $79 = (($78) + 3)|0;
  $nLength = $79;
  $80 = $nLength;
  $81 = (($80) + 4)|0;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function __ZL14CreateFileNameP20TRootHandler_Diablo3PKcPc($pRootHandler,$szShortName,$szBuffer) {
 $pRootHandler = $pRootHandler|0;
 $szShortName = $szShortName|0;
 $szBuffer = $szBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwAssetIndex = 0, $dwRootIndex0 = 0, $pRootEntry = 0, $szNameLevel0 = 0, $szNameLevel1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $dwRootIndex0 = sp + 16|0;
 $dwAssetIndex = sp + 12|0;
 $0 = $pRootHandler;
 $1 = $szShortName;
 $2 = $szBuffer;
 $szNameLevel1 = 0;
 HEAP32[$dwRootIndex0>>2] = 0;
 HEAP32[$dwAssetIndex>>2] = 0;
 $3 = $1;
 (__Z20ConvertStringToInt08PKcPj($3,$dwRootIndex0)|0);
 $4 = $1;
 $5 = ((($4)) + 2|0);
 (__Z20ConvertStringToInt08PKcPj($5,$dwAssetIndex)|0);
 $6 = $0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$dwRootIndex0>>2]|0;
 $9 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($7,$8)|0);
 $pRootEntry = $9;
 $10 = $0;
 $11 = ((($10)) + 48|0);
 $12 = $pRootEntry;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($11,$14)|0);
 $szNameLevel0 = $15;
 $16 = HEAP32[$dwAssetIndex>>2]|0;
 $17 = ($16>>>0)<(67);
 if ($17) {
  $18 = HEAP32[$dwAssetIndex>>2]|0;
  $19 = (1928 + ($18<<3)|0);
  $20 = HEAP32[$19>>2]|0;
  $szNameLevel1 = $20;
 }
 $21 = $szNameLevel1;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = HEAP32[616]|0;
  $szNameLevel1 = $23;
 }
 $24 = $2;
 $25 = $szNameLevel0;
 $26 = $szNameLevel1;
 $27 = $1;
 $28 = ((($27)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $25;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $26;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $28;
 $29 = (_sprintf($24,18843,$vararg_buffer)|0);
 STACKTOP = sp;return ($29|0);
}
function __ZL12GetAssetInfoj($dwAssetIndex) {
 $dwAssetIndex = $dwAssetIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $dwAssetIndex;
 $2 = $1;
 $3 = ($2>>>0)<(67);
 if ($3) {
  $4 = $1;
  $5 = (1928 + ($4<<3)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $1;
   $9 = (1928 + ($8<<3)|0);
   $0 = $9;
   $10 = $0;
   STACKTOP = sp;return ($10|0);
  }
 }
 $0 = 2464;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function __ZL15FindPackageNameP9_CASC_MAPPKcS2_($pPackageMap,$szAssetName,$szPlainName) {
 $pPackageMap = $pPackageMap|0;
 $szAssetName = $szAssetName|0;
 $szPlainName = $szPlainName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLength = 0, $szFileName = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $vararg_buffer = sp;
 $szFileName = sp + 24|0;
 $0 = $pPackageMap;
 $1 = $szAssetName;
 $2 = $szPlainName;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $5 = (_sprintf($szFileName,19573,$vararg_buffer)|0);
 $nLength = $5;
 $6 = $0;
 $7 = $nLength;
 $8 = (($szFileName) + ($7)|0);
 $9 = (__Z14Map_FindStringP9_CASC_MAPPKcS2_($6,$szFileName,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZL20ParseDirectoryHeaderP19_DIABLO3_DIR_HEADERPhS1_($pDirHeader,$pbDirFile,$pbFileEnd) {
 $pDirHeader = $pDirHeader|0;
 $pbDirFile = $pbDirFile|0;
 $pbFileEnd = $pbFileEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $dwSignature = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pDirHeader;
 $2 = $pbDirFile;
 $3 = $pbFileEnd;
 $dwSignature = 0;
 $4 = $1;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = $3;
 $8 = ($6>>>0)>=($7>>>0);
 if ($8) {
  $0 = 1000;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $dwSignature = $10;
 $11 = $dwSignature;
 $12 = ($11|0)!=(-2146971452);
 $13 = $dwSignature;
 $14 = ($13|0)!=(-353239417);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $0 = 1000;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $2 = $16;
 $17 = $dwSignature;
 $18 = ($17|0)==(-353239417);
 do {
  if ($18) {
   $19 = $2;
   $20 = ((($19)) + 4|0);
   $21 = $3;
   $22 = ($20>>>0)>=($21>>>0);
   if ($22) {
    $0 = 1000;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   }
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = ((($25)) + 12|0);
   HEAP32[$26>>2] = $24;
   $27 = $2;
   $28 = ((($27)) + 4|0);
   $29 = $1;
   HEAP32[$29>>2] = $28;
   $30 = $2;
   $31 = ((($30)) + 4|0);
   $32 = $1;
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34*20)|0;
   $36 = (($31) + ($35)|0);
   $2 = $36;
   $37 = $2;
   $38 = ((($37)) + 4|0);
   $39 = $3;
   $40 = ($38>>>0)>=($39>>>0);
   if (!($40)) {
    $41 = $2;
    $42 = HEAP32[$41>>2]|0;
    $43 = $1;
    $44 = ((($43)) + 16|0);
    HEAP32[$44>>2] = $42;
    $45 = $2;
    $46 = ((($45)) + 4|0);
    $47 = $1;
    $48 = ((($47)) + 4|0);
    HEAP32[$48>>2] = $46;
    $49 = $2;
    $50 = ((($49)) + 4|0);
    $51 = $1;
    $52 = ((($51)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53*24)|0;
    $55 = (($50) + ($54)|0);
    $2 = $55;
    break;
   }
   $0 = 1000;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 } while(0);
 $56 = $2;
 $57 = ((($56)) + 4|0);
 $58 = $3;
 $59 = ($57>>>0)>=($58>>>0);
 if ($59) {
  $0 = 1000;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 } else {
  $60 = $2;
  $61 = HEAP32[$60>>2]|0;
  $62 = $1;
  $63 = ((($62)) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $2;
  $65 = ((($64)) + 4|0);
  $66 = $1;
  $67 = ((($66)) + 8|0);
  HEAP32[$67>>2] = $65;
  $0 = 0;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function __ZL23ParseDirEntries_FileId1P20TRootHandler_Diablo3Phjj($pRootHandler,$pbFileEntries,$dwFileEntries,$dwRootDirIndex) {
 $pRootHandler = $pRootHandler|0;
 $pbFileEntries = $pbFileEntries|0;
 $dwFileEntries = $dwFileEntries|0;
 $dwRootDirIndex = $dwRootDirIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pEntry = 0, $pFileEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pRootHandler;
 $1 = $pbFileEntries;
 $2 = $dwFileEntries;
 $3 = $dwRootDirIndex;
 $4 = $1;
 $pEntry = $4;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (($8) + ($9))|0;
 $11 = $0;
 $12 = ((($11)) + 32|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  ___assert_fail((19711|0),(18640|0),473,(19782|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $2;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = $0;
  $20 = ((($19)) + 32|0);
  $21 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($20,0,1)|0);
  $pFileEntry = $21;
  $22 = $pFileEntry;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   label = 6;
   break;
  }
  $24 = $pFileEntry;
  $25 = $pEntry;
  dest=$24; src=$25; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $26 = $3;
  $27 = (_bitshift64Shl(($26|0),0,56)|0);
  $28 = tempRet0;
  $29 = $pEntry;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_bitshift64Shl(($31|0),0,24)|0);
  $33 = tempRet0;
  $34 = $27 | $32;
  $35 = $28 | $33;
  $36 = $pFileEntry;
  $37 = ((($36)) + 16|0);
  $38 = $37;
  $39 = $38;
  HEAP32[$39>>2] = $34;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $35;
  $42 = $pFileEntry;
  $43 = ((($42)) + 28|0);
  HEAP32[$43>>2] = 1;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
  $46 = $pEntry;
  $47 = ((($46)) + 20|0);
  $pEntry = $47;
 }
 if ((label|0) == 6) {
  ___assert_fail((19739|0),(18640|0),482,(19782|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZL23ParseDirEntries_FileId2P20TRootHandler_Diablo3Phjj($pRootHandler,$pbFileEntries,$dwFileEntries,$dwRootDirIndex) {
 $pRootHandler = $pRootHandler|0;
 $pbFileEntries = $pbFileEntries|0;
 $dwFileEntries = $dwFileEntries|0;
 $dwRootDirIndex = $dwRootDirIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pEntry = 0, $pFileEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pRootHandler;
 $1 = $pbFileEntries;
 $2 = $dwFileEntries;
 $3 = $dwRootDirIndex;
 $4 = $1;
 $pEntry = $4;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (($8) + ($9))|0;
 $11 = $0;
 $12 = ((($11)) + 32|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  ___assert_fail((19711|0),(18640|0),505,(19758|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $2;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = $0;
  $20 = ((($19)) + 32|0);
  $21 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($20,0,1)|0);
  $pFileEntry = $21;
  $22 = $pFileEntry;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   label = 6;
   break;
  }
  $24 = $pFileEntry;
  $25 = $pEntry;
  dest=$24; src=$25; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $26 = $3;
  $27 = (_bitshift64Shl(($26|0),0,56)|0);
  $28 = tempRet0;
  $29 = $pEntry;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_bitshift64Shl(($31|0),0,24)|0);
  $33 = tempRet0;
  $34 = $27 | $32;
  $35 = $28 | $33;
  $36 = $pEntry;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $34 | $38;
  $40 = $pFileEntry;
  $41 = ((($40)) + 16|0);
  $42 = $41;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $35;
  $46 = $pFileEntry;
  $47 = ((($46)) + 28|0);
  HEAP32[$47>>2] = 3;
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
  $50 = $pEntry;
  $51 = ((($50)) + 24|0);
  $pEntry = $51;
 }
 if ((label|0) == 6) {
  ___assert_fail((19739|0),(18640|0),514,(19758|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZL21ParseDirEntries_NamedP20TRootHandler_Diablo3PhS1_jj($pRootHandler,$pbFileEntries,$pbFileEnd,$dwFileEntries,$dwRootDirIndex) {
 $pRootHandler = $pRootHandler|0;
 $pbFileEntries = $pbFileEntries|0;
 $pbFileEnd = $pbFileEnd|0;
 $dwFileEntries = $dwFileEntries|0;
 $dwRootDirIndex = $dwRootDirIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $cbFileEntry = 0, $cchFileName = 0, $nError = 0, $pNamedEntry = 0, $pRootEntry = 0, $szFileName = 0, $szNamePtr = 0, $szRootName = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1088|0);
 $szFileName = sp + 52|0;
 $1 = $pRootHandler;
 $2 = $pbFileEntries;
 $3 = $pbFileEnd;
 $4 = $dwFileEntries;
 $5 = $dwRootDirIndex;
 $szNamePtr = $szFileName;
 $nError = 0;
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = (($9) + ($10))|0;
 $12 = $1;
 $13 = ((($12)) + 32|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($11>>>0)>=($15>>>0);
 if ($16) {
  ___assert_fail((19711|0),(18640|0),540,(19717|0));
  // unreachable;
 }
 $17 = $5;
 $18 = ($17|0)!=(-1);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 32|0);
  $21 = $5;
  $22 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($20,$21)|0);
  $pRootEntry = $22;
  $23 = $1;
  $24 = ((($23)) + 48|0);
  $25 = $pRootEntry;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($24,$27)|0);
  $szRootName = $28;
  while(1) {
   $29 = $szRootName;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    break;
   }
   $33 = $szRootName;
   $34 = ((($33)) + 1|0);
   $szRootName = $34;
   $35 = HEAP8[$33>>0]|0;
   $36 = $szNamePtr;
   $37 = ((($36)) + 1|0);
   $szNamePtr = $37;
   HEAP8[$36>>0] = $35;
  }
  $38 = $szNamePtr;
  $39 = ((($38)) + 1|0);
  $szNamePtr = $39;
  HEAP8[$38>>0] = 92;
 }
 while(1) {
  $40 = $2;
  $41 = $3;
  $42 = ($40>>>0)<($41>>>0);
  if (!($42)) {
   label = 14;
   break;
  }
  $43 = $2;
  $pNamedEntry = $43;
  $44 = $2;
  $45 = $3;
  $46 = (__ZL20VerifyNamedFileEntryPhS_($44,$45)|0);
  $cbFileEntry = $46;
  $47 = $cbFileEntry;
  $48 = ($47|0)==(0);
  if ($48) {
   label = 10;
   break;
  }
  $49 = $szNamePtr;
  $50 = $pNamedEntry;
  $51 = ((($50)) + 16|0);
  $52 = $cbFileEntry;
  $53 = (($52) - 16)|0;
  _memcpy(($49|0),($51|0),($53|0))|0;
  $54 = $szNamePtr;
  $55 = $54;
  $56 = $szFileName;
  $57 = (($55) - ($56))|0;
  $58 = $cbFileEntry;
  $59 = (($58) - 16)|0;
  $60 = (($57) + ($59))|0;
  $cchFileName = $60;
  $61 = $1;
  $62 = $pNamedEntry;
  $63 = $cchFileName;
  $64 = (__ZL15InsertFileEntryP20TRootHandler_Diablo3R13_ENCODING_KEYPKcj($61,$62,$szFileName,$63)|0);
  $nError = $64;
  $65 = $nError;
  $66 = ($65|0)!=(0);
  if ($66) {
   label = 12;
   break;
  }
  $68 = $cbFileEntry;
  $69 = $2;
  $70 = (($69) + ($68)|0);
  $2 = $70;
 }
 if ((label|0) == 10) {
  $0 = 1004;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 12) {
  $67 = $nError;
  $0 = $67;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 14) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function __ZL20VerifyNamedFileEntryPhS_($pbNamedEntry,$pbFileEnd) {
 $pbNamedEntry = $pbNamedEntry|0;
 $pbFileEnd = $pbFileEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pbFileName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pbNamedEntry;
 $2 = $pbFileEnd;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $pbFileName = $4;
 while(1) {
  $5 = $pbFileName;
  $6 = $2;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $8 = $pbFileName;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($10|0)!=(0);
   $24 = $11;
  } else {
   $24 = 0;
  }
  $12 = $pbFileName;
  if (!($24)) {
   break;
  }
  $13 = ((($12)) + 1|0);
  $pbFileName = $13;
 }
 $14 = $2;
 $15 = ($12>>>0)>=($14>>>0);
 if ($15) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $16 = $pbFileName;
  $17 = ((($16)) + 1|0);
  $pbFileName = $17;
  $18 = $pbFileName;
  $19 = $1;
  $20 = $18;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZL15InsertFileEntryP20TRootHandler_Diablo3R13_ENCODING_KEYPKcj($pRootHandler,$EncodingKey,$szFileName,$cchFileName) {
 $pRootHandler = $pRootHandler|0;
 $EncodingKey = $EncodingKey|0;
 $szFileName = $szFileName|0;
 $cchFileName = $cchFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pFileEntry = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pRootHandler;
 $2 = $EncodingKey;
 $3 = $szFileName;
 $4 = $cchFileName;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 32|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($8>>>0)>=($12>>>0);
 if ($13) {
  ___assert_fail((19711|0),(18640|0),432,(22553|0));
  // unreachable;
 }
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = $3;
 $17 = $4;
 $18 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($15,$16,$17)|0);
 $3 = $18;
 $19 = $3;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $0 = 12;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $21 = $1;
 $22 = ((($21)) + 32|0);
 $23 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($22,0,1)|0);
 $pFileEntry = $23;
 $24 = $pFileEntry;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((19739|0),(18640|0),443,(22553|0));
  // unreachable;
 }
 $26 = $pFileEntry;
 $27 = $2;
 dest=$26; src=$27; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $28 = $3;
 $29 = (__Z16CalcFileNameHashPKc($28)|0);
 $30 = tempRet0;
 $31 = $pFileEntry;
 $32 = ((($31)) + 16|0);
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = $29;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $30;
 $37 = $1;
 $38 = ((($37)) + 48|0);
 $39 = $3;
 $40 = (__Z13Array_IndexOfP14_DYNAMIC_ARRAYPKv($38,$39)|0);
 $41 = $pFileEntry;
 $42 = ((($41)) + 24|0);
 HEAP32[$42>>2] = $40;
 $43 = $pFileEntry;
 $44 = ((($43)) + 28|0);
 HEAP32[$44>>2] = 0;
 $45 = $1;
 $46 = ((($45)) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $pFileEntry;
 $49 = ((($48)) + 16|0);
 $50 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($47,$49,0)|0);
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  ___assert_fail((22914|0),(18640|0),452,(22553|0));
  // unreachable;
 }
 $52 = $1;
 $53 = ((($52)) + 64|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $pFileEntry;
 $56 = $pFileEntry;
 $57 = ((($56)) + 16|0);
 (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($54,$55,$57)|0);
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function __Z18GetNumberOfSetBitsj($Value32) {
 $Value32 = $Value32|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $Value32;
 $1 = $0;
 $2 = $1 >>> 1;
 $3 = $2 & 1431655765;
 $4 = $0;
 $5 = $4 & 1431655765;
 $6 = (($3) + ($5))|0;
 $0 = $6;
 $7 = $0;
 $8 = $7 >>> 2;
 $9 = $8 & 858993459;
 $10 = $0;
 $11 = $10 & 858993459;
 $12 = (($9) + ($11))|0;
 $0 = $12;
 $13 = $0;
 $14 = $13 >>> 4;
 $15 = $14 & 252645135;
 $16 = $0;
 $17 = $16 & 252645135;
 $18 = (($15) + ($17))|0;
 $0 = $18;
 $19 = $0;
 $20 = Math_imul($19, 16843009)|0;
 STACKTOP = sp;return ($20|0);
}
function __ZN15TMndxFindResultC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 24|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN15TMndxFindResultD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 __ZN15TMndxFindResult12FreeStruct40Ev($1);
 STACKTOP = sp;return;
}
function __ZN15TMndxFindResult12FreeStruct40Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = ((($3)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    __THREW__ = 0;
    invoke_vi(61,($8|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     $1 = $12;
     $2 = $13;
     __ZdlPv($8);
     $14 = $1;
     $15 = $2;
     ___resumeException($14|0);
     // unreachable;
    } else {
     __ZdlPv($8);
     break;
    }
   }
  }
 } while(0);
 $16 = ((($3)) + 24|0);
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN15TMndxFindResult14CreateStruct40Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $0 = 22;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $8 = (__Znwj(64)|0);
 __THREW__ = 0;
 invoke_vi(62,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $2 = $16;
  $3 = $17;
  __ZdlPv($8);
  $18 = $2;
  $19 = $3;
  ___resumeException($18|0);
  // unreachable;
 }
 $11 = ((($4)) + 24|0);
 HEAP32[$11>>2] = $8;
 $12 = ((($4)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = $14 ? 0 : 12;
 $0 = $15;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __ZN15TMndxFindResult13SetSearchPathEPKcj($this,$szNewSearchMask,$cchNewSearchMask) {
 $this = $this|0;
 $szNewSearchMask = $szNewSearchMask|0;
 $cchNewSearchMask = $cchNewSearchMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $szNewSearchMask;
 $3 = $cchNewSearchMask;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($4)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $0 = 22;
   $19 = $0;
   STACKTOP = sp;return ($19|0);
  }
 }
 $10 = ((($4)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = ((($4)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 60|0);
  HEAP32[$15>>2] = 0;
 }
 $16 = $2;
 HEAP32[$4>>2] = $16;
 $17 = $3;
 $18 = ((($4)) + 4|0);
 HEAP32[$18>>2] = $17;
 $0 = 0;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function __ZN11TByteStreamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN11TByteStream12ExchangeWithERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $WorkBuff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $WorkBuff = sp;
 $0 = $this;
 $1 = $Target;
 $2 = $0;
 __ZN11TByteStreamC2Ev($WorkBuff);
 ;HEAP32[$WorkBuff>>2]=HEAP32[$2>>2]|0;HEAP32[$WorkBuff+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$WorkBuff+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$WorkBuff+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$WorkBuff+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$WorkBuff+20>>2]=HEAP32[$2+20>>2]|0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$3+20>>2]|0;
 $4 = $1;
 ;HEAP32[$4>>2]=HEAP32[$WorkBuff>>2]|0;HEAP32[$4+4>>2]=HEAP32[$WorkBuff+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$WorkBuff+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$WorkBuff+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$WorkBuff+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$WorkBuff+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($this,$cbByteCount,$PtrArray) {
 $this = $this|0;
 $cbByteCount = $cbByteCount|0;
 $PtrArray = $PtrArray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $cbByteCount;
 $3 = $PtrArray;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ($6>>>0)<($7>>>0);
 if ($8) {
  $0 = 1000;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $9 = HEAP32[$4>>2]|0;
  $10 = $3;
  HEAP32[$10>>2] = $9;
  $11 = $2;
  $12 = HEAP32[$4>>2]|0;
  $13 = (($12) + ($11)|0);
  HEAP32[$4>>2] = $13;
  $14 = $2;
  $15 = ((($4)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - ($14))|0;
  HEAP32[$15>>2] = $17;
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN11TByteStream15GetArray_DWORDsEP14_ARRAY_POINTERj($this,$PtrArray,$ItemCount) {
 $this = $this|0;
 $PtrArray = $PtrArray|0;
 $ItemCount = $ItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $PtrArray;
 $3 = $ItemCount;
 $4 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = ($7|0)!=(0);
 $or$cond = $6 & $8;
 do {
  if ($or$cond) {
   $0 = 22;
  } else {
   $9 = $3;
   $10 = ($9>>>0)>(1073741823);
   if ($10) {
    $0 = 12;
    break;
   } else {
    $11 = $3;
    $12 = $11<<2;
    $13 = $2;
    $14 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($4,$12,$13)|0);
    $0 = $14;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __ZN11TByteStream17GetArray_TripletsEP14_ARRAY_POINTERj($this,$PtrArray,$ItemCount) {
 $this = $this|0;
 $PtrArray = $PtrArray|0;
 $ItemCount = $ItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $PtrArray;
 $3 = $ItemCount;
 $4 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = ($7|0)!=(0);
 $or$cond = $6 & $8;
 do {
  if ($or$cond) {
   $0 = 22;
  } else {
   $9 = $3;
   $10 = ($9>>>0)>(357913941);
   if ($10) {
    $0 = 12;
    break;
   } else {
    $11 = $3;
    $12 = ($11*12)|0;
    $13 = $2;
    $14 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($4,$12,$13)|0);
    $0 = $14;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __ZN11TByteStream14GetArray_BYTESEP14_ARRAY_POINTERj($this,$PtrArray,$ItemCount) {
 $this = $this|0;
 $PtrArray = $PtrArray|0;
 $ItemCount = $ItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $PtrArray;
 $3 = $ItemCount;
 $4 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = ($7|0)!=(0);
 $or$cond = $6 & $8;
 do {
  if ($or$cond) {
   $0 = 22;
  } else {
   $9 = $3;
   $10 = ($9>>>0)>(4294967295);
   if ($10) {
    $0 = 12;
    break;
   } else {
    $11 = $3;
    $12 = $2;
    $13 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($4,$11,$12)|0);
    $0 = $13;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function __ZN11TByteStream18GetArray_NameTableEP14_ARRAY_POINTERj($this,$PtrArray,$ItemCount) {
 $this = $this|0;
 $PtrArray = $PtrArray|0;
 $ItemCount = $ItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $PtrArray;
 $3 = $ItemCount;
 $4 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = ($7|0)!=(0);
 $or$cond = $6 & $8;
 do {
  if ($or$cond) {
   $0 = 22;
  } else {
   $9 = $3;
   $10 = ($9>>>0)>(357913941);
   if ($10) {
    $0 = 12;
    break;
   } else {
    $11 = $3;
    $12 = ($11*12)|0;
    $13 = $2;
    $14 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($4,$12,$13)|0);
    $0 = $14;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __ZN11TByteStream9SkipBytesEj($this,$cbByteCount) {
 $this = $this|0;
 $cbByteCount = $cbByteCount|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Dummy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Dummy = sp;
 $0 = $this;
 $1 = $cbByteCount;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($2,$3,$Dummy)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN11TByteStream13SetByteBufferEPhj($this,$pbNewByteData,$cbNewByteData) {
 $this = $this|0;
 $pbNewByteData = $pbNewByteData|0;
 $cbNewByteData = $cbNewByteData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $pbNewByteData;
 $3 = $cbNewByteData;
 $4 = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $7 = $3;
 $8 = ($7|0)==(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $9 = $2;
  HEAP32[$4>>2] = $9;
  $10 = $3;
  $11 = ((($4)) + 8|0);
  HEAP32[$11>>2] = $10;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 22;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN11TByteStream14GetValue_DWORDERj($this,$Value) {
 $this = $this|0;
 $Value = $Value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Pointer = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Pointer = sp + 4|0;
 $1 = $this;
 $2 = $Value;
 $3 = $1;
 $4 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($3,4,$Pointer)|0);
 $nError = $4;
 $5 = $nError;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $nError;
  $0 = $7;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = HEAP32[$Pointer>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  HEAP32[$10>>2] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN11TByteStream18GetValue_ItemCountERjS0_j($this,$NumberOfBytes,$ItemCount,$ItemSize) {
 $this = $this|0;
 $NumberOfBytes = $NumberOfBytes|0;
 $ItemCount = $ItemCount|0;
 $ItemSize = $ItemSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ByteCount = 0, $Pointer = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $Pointer = sp + 12|0;
 $ByteCount = sp;
 $1 = $this;
 $2 = $NumberOfBytes;
 $3 = $ItemCount;
 $4 = $ItemSize;
 $5 = $1;
 $6 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($5,8,$Pointer)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $nError;
  $0 = $9;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $10 = HEAP32[$Pointer>>2]|0;
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $ByteCount;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = $ByteCount;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)>(0);
 $28 = ($23>>>0)>(4294967295);
 $29 = ($26|0)==(0);
 $30 = $29 & $28;
 $31 = $27 | $30;
 if (!($31)) {
  $32 = $ByteCount;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = $4;
  $39 = (___uremdi3(($34|0),($37|0),($38|0),0)|0);
  $40 = tempRet0;
  $41 = ($39|0)!=(0);
  $42 = ($40|0)!=(0);
  $43 = $41 | $42;
  if (!($43)) {
   $44 = $ByteCount;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = $2;
   HEAP32[$50>>2] = $46;
   $51 = $ByteCount;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) + 4)|0;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = $4;
   $58 = (___udivdi3(($53|0),($56|0),($57|0),0)|0);
   $59 = tempRet0;
   $60 = $3;
   HEAP32[$60>>2] = $58;
   $0 = 0;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  }
 }
 $0 = 1000;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function __ZN13TGenericArrayC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN13TGenericArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function __ZN13TGenericArray12ExchangeWithERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $WorkBuff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $WorkBuff = sp;
 $0 = $this;
 $1 = $Target;
 $2 = $0;
 __ZN13TGenericArrayC2Ev($WorkBuff);
 ;HEAP32[$WorkBuff>>2]=HEAP32[$2>>2]|0;HEAP32[$WorkBuff+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$WorkBuff+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$WorkBuff+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$WorkBuff+16>>2]=HEAP32[$2+16>>2]|0;HEAP8[$WorkBuff+20>>0]=HEAP8[$2+20>>0]|0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$3+16>>2]|0;HEAP8[$2+20>>0]=HEAP8[$3+20>>0]|0;
 $4 = $1;
 ;HEAP32[$4>>2]=HEAP32[$WorkBuff>>2]|0;HEAP32[$4+4>>2]=HEAP32[$WorkBuff+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$WorkBuff+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$WorkBuff+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$WorkBuff+16>>2]|0;HEAP8[$4+20>>0]=HEAP8[$WorkBuff+20>>0]|0;
 __ZN13TGenericArrayD2Ev($WorkBuff);
 STACKTOP = sp;return;
}
function __ZN13TGenericArray8CopyFromERS_($this,$Source) {
 $this = $this|0;
 $Source = $Source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $Source;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  _free($5);
 }
 $6 = $1;
 ;HEAP32[$2>>2]=HEAP32[$6>>2]|0;HEAP32[$2+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$6+16>>2]|0;HEAP8[$2+20>>0]=HEAP8[$6+20>>0]|0;
 STACKTOP = sp;return;
}
function __ZN13TGenericArray13SetArrayValidEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 $6 = $5&1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $8 = ((($2)) + 20|0);
  HEAP8[$8>>0] = 1;
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN13TGenericArray17SetMaxItems_CHARSEj($this,$NewMaxItemCount) {
 $this = $this|0;
 $NewMaxItemCount = $NewMaxItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewDataBuffer = 0, $OldDataBuffer = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $OldDataBuffer = sp + 8|0;
 $NewDataBuffer = sp + 4|0;
 $0 = $this;
 $1 = $NewMaxItemCount;
 $2 = $0;
 ;HEAP32[$OldDataBuffer>>2]=HEAP32[$2>>2]|0;
 $3 = $1;
 $4 = $3;
 $5 = (_malloc($4)|0);
 HEAP32[$NewDataBuffer>>2] = $5;
 $6 = HEAP32[$NewDataBuffer>>2]|0;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $i = 0;
   while(1) {
    $8 = $i;
    $9 = ((($2)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8>>>0)<($10>>>0);
    if (!($11)) {
     break L1;
    }
    $12 = $i;
    $13 = ((($2)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($12)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $i;
    $18 = HEAP32[$NewDataBuffer>>2]|0;
    $19 = (($18) + ($17)|0);
    HEAP8[$19>>0] = $16;
    $20 = $i;
    $21 = (($20) + 1)|0;
    $i = $21;
   }
  }
 } while(0);
 ;HEAP32[$2>>2]=HEAP32[$NewDataBuffer>>2]|0;
 $22 = ((($2)) + 4|0);
 ;HEAP32[$22>>2]=HEAP32[$NewDataBuffer>>2]|0;
 $23 = ((($2)) + 8|0);
 ;HEAP32[$23>>2]=HEAP32[$NewDataBuffer>>2]|0;
 $24 = $1;
 $25 = ((($2)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$OldDataBuffer>>2]|0;
 _free($26);
 STACKTOP = sp;return;
}
function __ZN13TGenericArray21SetMaxItems_PATH_STOPEj($this,$NewMaxItemCount) {
 $this = $this|0;
 $NewMaxItemCount = $NewMaxItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewDataBuffer = 0, $OldDataBuffer = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $OldDataBuffer = sp + 8|0;
 $NewDataBuffer = sp + 4|0;
 $0 = $this;
 $1 = $NewMaxItemCount;
 $2 = $0;
 ;HEAP32[$OldDataBuffer>>2]=HEAP32[$2>>2]|0;
 $3 = $1;
 $4 = ($3*20)|0;
 $5 = (_malloc($4)|0);
 HEAP32[$NewDataBuffer>>2] = $5;
 $6 = HEAP32[$NewDataBuffer>>2]|0;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $i = 0;
   while(1) {
    $8 = $i;
    $9 = ((($2)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8>>>0)<($10>>>0);
    if (!($11)) {
     break L1;
    }
    $12 = $i;
    $13 = HEAP32[$NewDataBuffer>>2]|0;
    $14 = (($13) + (($12*20)|0)|0);
    $15 = $i;
    $16 = ((($2)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + (($15*20)|0)|0);
    ;HEAP32[$14>>2]=HEAP32[$18>>2]|0;HEAP32[$14+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$18+12>>2]|0;HEAP32[$14+16>>2]=HEAP32[$18+16>>2]|0;
    $19 = $i;
    $20 = (($19) + 1)|0;
    $i = $20;
   }
  }
 } while(0);
 ;HEAP32[$2>>2]=HEAP32[$NewDataBuffer>>2]|0;
 $21 = ((($2)) + 4|0);
 ;HEAP32[$21>>2]=HEAP32[$NewDataBuffer>>2]|0;
 $22 = ((($2)) + 8|0);
 ;HEAP32[$22>>2]=HEAP32[$NewDataBuffer>>2]|0;
 $23 = $1;
 $24 = ((($2)) + 16|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$OldDataBuffer>>2]|0;
 _free($25);
 STACKTOP = sp;return;
}
function __ZN13TGenericArray18InsertOneItem_CHAREc($this,$NewItem) {
 $this = $this|0;
 $NewItem = $NewItem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewItemCount = 0, $NewMaxItemCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $NewItem;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $NewItemCount = $5;
 $6 = $NewItemCount;
 $7 = ((($2)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = $NewItemCount;
  $NewMaxItemCount = $10;
  $11 = ((($2)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $NewItemCount;
  $14 = (($13>>>0) / 2)&-1;
  $15 = ($12>>>0)>($14>>>0);
  do {
   if ($15) {
    $16 = ((($2)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17>>>0)<=(2147483647);
    if ($18) {
     $19 = ((($2)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($2)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($20) + ($22))|0;
     $NewMaxItemCount = $23;
     break;
    } else {
     $NewMaxItemCount = -1;
     break;
    }
   }
  } while(0);
  $24 = $NewMaxItemCount;
  __ZN13TGenericArray17SetMaxItems_CHARSEj($2,$24);
 }
 $25 = $1;
 $26 = ((($2)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($2)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27)|0);
 HEAP8[$31>>0] = $25;
 STACKTOP = sp;return;
}
function __ZN13TGenericArray23InsertOneItem_PATH_STOPER10_PATH_STOP($this,$NewItem) {
 $this = $this|0;
 $NewItem = $NewItem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewItemCount = 0, $NewMaxItemCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $NewItem;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $NewItemCount = $5;
 $6 = $NewItemCount;
 $7 = ((($2)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = $NewItemCount;
  $NewMaxItemCount = $10;
  $11 = ((($2)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $NewItemCount;
  $14 = (($13>>>0) / 2)&-1;
  $15 = ($12>>>0)>($14>>>0);
  do {
   if ($15) {
    $16 = ((($2)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17>>>0)<=(107374182);
    if ($18) {
     $19 = ((($2)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($2)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($20) + ($22))|0;
     $NewMaxItemCount = $23;
     break;
    } else {
     $NewMaxItemCount = 214748364;
     break;
    }
   }
  } while(0);
  $24 = $NewMaxItemCount;
  __ZN13TGenericArray21SetMaxItems_PATH_STOPEj($2,$24);
 }
 $25 = ((($2)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 $28 = ((($2)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + (($26*20)|0)|0);
 $31 = $1;
 ;HEAP32[$30>>2]=HEAP32[$31>>2]|0;HEAP32[$30+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$31+12>>2]|0;HEAP32[$30+16>>2]=HEAP32[$31+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN13TGenericArray11sub_19583A0Ej($this,$NewItemCount) {
 $this = $this|0;
 $NewItemCount = $NewItemCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewMaxItemCount = 0, $OldMaxItemCount = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $this;
 $1 = $NewItemCount;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $OldMaxItemCount = $4;
 $5 = $1;
 $6 = ((($2)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = $1;
  $NewMaxItemCount = $9;
  $10 = ((($2)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = (($12>>>0) / 2)&-1;
  $14 = ($11>>>0)>($13>>>0);
  do {
   if ($14) {
    $15 = ((($2)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16>>>0)<=(107374182);
    if ($17) {
     $18 = ((($2)) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($2)) + 16|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($19) + ($21))|0;
     $NewMaxItemCount = $22;
     break;
    } else {
     $NewMaxItemCount = 214748364;
     break;
    }
   }
  } while(0);
  $23 = $NewMaxItemCount;
  __ZN13TGenericArray21SetMaxItems_PATH_STOPEj($2,$23);
 }
 $24 = $OldMaxItemCount;
 $i = $24;
 while(1) {
  $25 = $i;
  $26 = $1;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = ((($2)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + (($28*20)|0)|0);
  HEAP32[$31>>2] = 0;
  $32 = $i;
  $33 = ((($2)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + (($32*20)|0)|0);
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = 0;
  $37 = $i;
  $38 = ((($2)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($37*20)|0)|0);
  $41 = ((($40)) + 8|0);
  HEAP32[$41>>2] = 0;
  $42 = $i;
  $43 = ((($2)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + (($42*20)|0)|0);
  $46 = ((($45)) + 12|0);
  HEAP32[$46>>2] = -1;
  $47 = $i;
  $48 = ((($2)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + (($47*20)|0)|0);
  $51 = ((($50)) + 16|0);
  HEAP32[$51>>2] = -1;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $54 = $1;
 $55 = ((($2)) + 12|0);
 HEAP32[$55>>2] = $54;
 STACKTOP = sp;return;
}
function __ZN13TGenericArray15LoadDwordsArrayER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NumberOfBytes = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $NumberOfBytes = sp + 4|0;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = (__ZN11TByteStream18GetValue_ItemCountERjS0_j($4,$NumberOfBytes,$5,4)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $nError;
  $0 = $9;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $2;
 $11 = ((($3)) + 8|0);
 $12 = ((($3)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN11TByteStream15GetArray_DWORDsEP14_ARRAY_POINTERj($10,$11,$13)|0);
 $nError = $14;
 $15 = $nError;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $nError;
  $0 = $17;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = HEAP32[$NumberOfBytes>>2]|0;
 $20 = (0 - ($19))|0;
 $21 = $20 & 7;
 $22 = (__ZN11TByteStream9SkipBytesEj($18,$21)|0);
 $nError = $22;
 $23 = $nError;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $nError;
  $0 = $25;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = (__ZN13TGenericArray13SetArrayValidEv($3)|0);
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN13TGenericArray17LoadTripletsArrayER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NumberOfBytes = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $NumberOfBytes = sp + 4|0;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = (__ZN11TByteStream18GetValue_ItemCountERjS0_j($4,$NumberOfBytes,$5,12)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $nError;
  $0 = $9;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $2;
 $11 = ((($3)) + 8|0);
 $12 = ((($3)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN11TByteStream17GetArray_TripletsEP14_ARRAY_POINTERj($10,$11,$13)|0);
 $nError = $14;
 $15 = $nError;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $nError;
  $0 = $17;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = HEAP32[$NumberOfBytes>>2]|0;
 $20 = (0 - ($19))|0;
 $21 = $20 & 7;
 $22 = (__ZN11TByteStream9SkipBytesEj($18,$21)|0);
 $nError = $22;
 $23 = $nError;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $nError;
  $0 = $25;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = (__ZN13TGenericArray13SetArrayValidEv($3)|0);
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN13TGenericArray13LoadByteArrayER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NumberOfBytes = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $NumberOfBytes = sp + 4|0;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = (__ZN11TByteStream18GetValue_ItemCountERjS0_j($4,$NumberOfBytes,$5,1)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $nError;
  $0 = $9;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $2;
 $11 = ((($3)) + 8|0);
 $12 = ((($3)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN11TByteStream14GetArray_BYTESEP14_ARRAY_POINTERj($10,$11,$13)|0);
 $nError = $14;
 $15 = $nError;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $nError;
  $0 = $17;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = HEAP32[$NumberOfBytes>>2]|0;
 $20 = (0 - ($19))|0;
 $21 = $20 & 7;
 $22 = (__ZN11TByteStream9SkipBytesEj($18,$21)|0);
 $nError = $22;
 $23 = $nError;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $nError;
  $0 = $25;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = (__ZN13TGenericArray13SetArrayValidEv($3)|0);
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN13TGenericArray17LoadFragmentInfosER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NumberOfBytes = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $NumberOfBytes = sp + 4|0;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = (__ZN11TByteStream18GetValue_ItemCountERjS0_j($4,$NumberOfBytes,$5,12)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $nError;
  $0 = $9;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $2;
 $11 = ((($3)) + 8|0);
 $12 = ((($3)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN11TByteStream18GetArray_NameTableEP14_ARRAY_POINTERj($10,$11,$13)|0);
 $nError = $14;
 $15 = $nError;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $nError;
  $0 = $17;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = HEAP32[$NumberOfBytes>>2]|0;
 $20 = (0 - ($19))|0;
 $21 = $20 & 7;
 $22 = (__ZN11TByteStream9SkipBytesEj($18,$21)|0);
 $nError = $22;
 $23 = $nError;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $nError;
  $0 = $25;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = (__ZN13TGenericArray13SetArrayValidEv($3)|0);
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN13TGenericArray11LoadStringsER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NumberOfBytes = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $NumberOfBytes = sp + 4|0;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = (__ZN11TByteStream18GetValue_ItemCountERjS0_j($4,$NumberOfBytes,$5,1)|0);
 $nError = $6;
 $7 = $nError;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $nError;
  $0 = $9;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $2;
 $11 = ((($3)) + 8|0);
 $12 = ((($3)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN11TByteStream14GetArray_BYTESEP14_ARRAY_POINTERj($10,$11,$13)|0);
 $nError = $14;
 $15 = $nError;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $nError;
  $0 = $17;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = HEAP32[$NumberOfBytes>>2]|0;
 $20 = (0 - ($19))|0;
 $21 = $20 & 7;
 $22 = (__ZN11TByteStream9SkipBytesEj($18,$21)|0);
 $nError = $22;
 $23 = $nError;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $nError;
  $0 = $25;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = (__ZN13TGenericArray13SetArrayValidEv($3)|0);
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN13TGenericArray20LoadDwordsArray_CopyER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempArray = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $TempArray = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN13TGenericArrayC2Ev($TempArray);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(63,($TempArray|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(65,($6|0),($TempArray|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(64,($TempArray|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN13TGenericArray22LoadTripletsArray_CopyER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempArray = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $TempArray = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN13TGenericArrayC2Ev($TempArray);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(66,($TempArray|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(65,($6|0),($TempArray|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(64,($TempArray|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN13TGenericArray14LoadBytes_CopyER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempArray = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $TempArray = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN13TGenericArrayC2Ev($TempArray);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(67,($TempArray|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(65,($6|0),($TempArray|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(64,($TempArray|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN13TGenericArray22LoadFragmentInfos_CopyER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempArray = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $TempArray = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN13TGenericArrayC2Ev($TempArray);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(68,($TempArray|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(65,($6|0),($TempArray|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(64,($TempArray|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN13TGenericArray19LoadStringsWithCopyER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempArray = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $TempArray = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN13TGenericArrayC2Ev($TempArray);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(69,($TempArray|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(65,($6|0),($TempArray|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN13TGenericArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(64,($TempArray|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN14TBitEntryArrayC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 __ZN13TGenericArrayC2Ev($1);
 $2 = ((($1)) + 24|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 28|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 32|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN14TBitEntryArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 __ZN13TGenericArrayD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14TBitEntryArray12ExchangeWithERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $WorkBuff = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $WorkBuff = sp;
 $0 = $this;
 $1 = $Target;
 $2 = $0;
 __ZN14TBitEntryArrayC2Ev($WorkBuff);
 dest=$WorkBuff; src=$2; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $1;
 dest=$2; src=$3; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $1;
 dest=$4; src=$WorkBuff; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN14TBitEntryArrayD2Ev($WorkBuff);
 STACKTOP = sp;return;
}
function __ZN14TBitEntryArray14LoadFromStreamER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $Pointer = 0, $Value = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Pointer = sp + 12|0;
 $Value = sp;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $Value;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $2;
 $9 = (__ZN13TGenericArray20LoadDwordsArray_CopyER11TByteStream($3,$8)|0);
 $nError = $9;
 $10 = $nError;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $nError;
  $0 = $12;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $13 = $2;
 $14 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($13,4,$Pointer)|0);
 $nError = $14;
 $15 = $nError;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $nError;
  $0 = $17;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $18 = HEAP32[$Pointer>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($3)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($3)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22>>>0)>(32);
 if ($23) {
  $0 = 1000;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $24 = $2;
 $25 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($24,4,$Pointer)|0);
 $nError = $25;
 $26 = $nError;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $nError;
  $0 = $28;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $29 = HEAP32[$Pointer>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($3)) + 28|0);
 HEAP32[$31>>2] = $30;
 $32 = $2;
 $33 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($32,8,$Pointer)|0);
 $nError = $33;
 $34 = $nError;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = HEAP32[$Pointer>>2]|0;
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = $Value;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $42;
 }
 $47 = $Value;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52>>>0)>(0);
 $54 = ($49>>>0)>(4294967295);
 $55 = ($52|0)==(0);
 $56 = $55 & $54;
 $57 = $53 | $56;
 if ($57) {
  $0 = 1000;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $58 = $Value;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($3)) + 32|0);
 HEAP32[$64>>2] = $60;
 $65 = ((($3)) + 24|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($3)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = Math_imul($66, $68)|0;
 $70 = (($69>>>0) / 32)&-1;
 $71 = ((($3)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($70>>>0)<=($72>>>0);
 if (!($73)) {
  ___assert_fail((21854|0),(21902|0),881,(21976|0));
  // unreachable;
 }
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZN14TBitEntryArray23LoadFromStream_ExchangeER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempArray = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $TempArray = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN14TBitEntryArrayC2Ev($TempArray);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(70,($TempArray|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN14TBitEntryArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(72,($6|0),($TempArray|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN14TBitEntryArrayD2Ev($TempArray);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(71,($TempArray|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN9TStruct40C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 __ZN13TGenericArrayC2Ev($3);
 $4 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vi(73,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 48|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($3)) + 52|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 56|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 60|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
 $11 = ___cxa_find_matching_catch_2()|0;
 $12 = tempRet0;
 $1 = $11;
 $2 = $12;
 __THREW__ = 0;
 invoke_vi(64,($3|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $17 = ___cxa_find_matching_catch_3(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 }
}
function __ZN9TStruct4017InitSearchBuffersEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewMaxItemCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<(64);
 if ($5) {
  $NewMaxItemCount = 64;
  $6 = ((($1)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)>(32);
  do {
   if ($8) {
    $9 = ((($1)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10>>>0)<=(2147483647);
    if ($11) {
     $12 = ((($1)) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($1)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + ($15))|0;
     $NewMaxItemCount = $16;
     break;
    } else {
     $NewMaxItemCount = -1;
     break;
    }
   }
  } while(0);
  $17 = $NewMaxItemCount;
  __ZN13TGenericArray17SetMaxItems_CHARSEj($1,$17);
 }
 $18 = ((($1)) + 24|0);
 __ZN13TGenericArray11sub_19583A0Ej($18,0);
 $19 = ((($1)) + 24|0);
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)<(4);
 if (!($22)) {
  $40 = ((($1)) + 48|0);
  HEAP32[$40>>2] = 0;
  $41 = ((($1)) + 52|0);
  HEAP32[$41>>2] = 0;
  $42 = ((($1)) + 56|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($1)) + 60|0);
  HEAP32[$43>>2] = 2;
  STACKTOP = sp;return;
 }
 $NewMaxItemCount = 4;
 $23 = ((($1)) + 24|0);
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25>>>0)>(2);
 do {
  if ($26) {
   $27 = ((($1)) + 24|0);
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)<=(107374182);
   if ($30) {
    $31 = ((($1)) + 24|0);
    $32 = ((($31)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($1)) + 24|0);
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($33) + ($36))|0;
    $NewMaxItemCount = $37;
    break;
   } else {
    $NewMaxItemCount = 214748364;
    break;
   }
  }
 } while(0);
 $38 = ((($1)) + 24|0);
 $39 = $NewMaxItemCount;
 __ZN13TGenericArray21SetMaxItems_PATH_STOPEj($38,$39);
 $40 = ((($1)) + 48|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($1)) + 52|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($1)) + 56|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($1)) + 60|0);
 HEAP32[$43>>2] = 2;
 STACKTOP = sp;return;
}
function __ZN12TSparseArrayC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 __ZN13TGenericArrayC2Ev($3);
 $4 = ((($3)) + 32|0);
 __THREW__ = 0;
 invoke_vi(73,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  $1 = $15;
  $2 = $16;
 } else {
  $7 = ((($3)) + 56|0);
  __THREW__ = 0;
  invoke_vi(73,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   $1 = $17;
   $2 = $18;
  } else {
   $10 = ((($3)) + 80|0);
   __THREW__ = 0;
   invoke_vi(73,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    $13 = ((($3)) + 24|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($3)) + 28|0);
    HEAP32[$14>>2] = 0;
    STACKTOP = sp;return;
   }
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $1 = $19;
   $2 = $20;
   __THREW__ = 0;
   invoke_vi(64,($7|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(64,($4|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $29 = ___cxa_find_matching_catch_3(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(64,($3|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN12TSparseArray12ExchangeWithERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $WorkBuff = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $WorkBuff = sp;
 $0 = $this;
 $1 = $Target;
 $2 = $0;
 __ZN12TSparseArrayC2Ev($WorkBuff);
 dest=$WorkBuff; src=$2; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $1;
 dest=$2; src=$3; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $1;
 dest=$4; src=$WorkBuff; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN12TSparseArrayD2Ev($WorkBuff);
 STACKTOP = sp;return;
}
function __ZN12TSparseArray14LoadFromStreamER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Pointer = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Pointer = sp + 4|0;
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN13TGenericArray20LoadDwordsArray_CopyER11TByteStream($3,$4)|0);
 $nError = $5;
 $6 = $nError;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $nError;
  $0 = $8;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $9 = $2;
 $10 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($9,4,$Pointer)|0);
 $nError = $10;
 $11 = $nError;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $nError;
  $0 = $13;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $14 = HEAP32[$Pointer>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 24|0);
 HEAP32[$16>>2] = $15;
 $17 = $2;
 $18 = (__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER($17,4,$Pointer)|0);
 $nError = $18;
 $19 = $nError;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $nError;
  $0 = $21;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $22 = HEAP32[$Pointer>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($3)) + 28|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($3)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26>>>0)>($28>>>0);
 if ($29) {
  $0 = 1004;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $30 = ((($3)) + 32|0);
 $31 = $2;
 $32 = (__ZN13TGenericArray22LoadTripletsArray_CopyER11TByteStream($30,$31)|0);
 $nError = $32;
 $33 = $nError;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $nError;
  $0 = $35;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $36 = ((($3)) + 56|0);
 $37 = $2;
 $38 = (__ZN13TGenericArray20LoadDwordsArray_CopyER11TByteStream($36,$37)|0);
 $nError = $38;
 $39 = $nError;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $nError;
  $0 = $41;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $42 = ((($3)) + 80|0);
 $43 = $2;
 $44 = (__ZN13TGenericArray20LoadDwordsArray_CopyER11TByteStream($42,$43)|0);
 $nError = $44;
 $45 = $nError;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $nError;
  $0 = $47;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 } else {
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function __ZN12TSparseArray23LoadFromStream_ExchangeER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $NewStruct68 = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $NewStruct68 = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN12TSparseArrayC2Ev($NewStruct68);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(74,($NewStruct68|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN12TSparseArrayD2Ev($NewStruct68);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(76,($6|0),($NewStruct68|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN12TSparseArrayD2Ev($NewStruct68);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(75,($NewStruct68|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12TSparseArray12GetItemValueEj($this,$ItemIndex) {
 $this = $this|0;
 $ItemIndex = $ItemIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $BaseValue = 0, $BitMask = 0, $DwordIndex = 0, $pTriplet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $this;
 $1 = $ItemIndex;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $6 >>> 9;
 $8 = (($5) + (($7*12)|0)|0);
 $pTriplet = $8;
 $9 = $pTriplet;
 $10 = HEAP32[$9>>2]|0;
 $BaseValue = $10;
 $11 = $1;
 $12 = $11 >>> 6;
 $13 = $12 & 7;
 $14 = (($13) - 1)|0;
 switch ($14|0) {
 case 0:  {
  $15 = $pTriplet;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 127;
  $19 = $BaseValue;
  $20 = (($19) + ($18))|0;
  $BaseValue = $20;
  break;
 }
 case 1:  {
  $21 = $pTriplet;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> 7;
  $25 = $24 & 255;
  $26 = $BaseValue;
  $27 = (($26) + ($25))|0;
  $BaseValue = $27;
  break;
 }
 case 2:  {
  $28 = $pTriplet;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 >>> 15;
  $32 = $31 & 255;
  $33 = $BaseValue;
  $34 = (($33) + ($32))|0;
  $BaseValue = $34;
  break;
 }
 case 3:  {
  $35 = $pTriplet;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37 >>> 23;
  $39 = $BaseValue;
  $40 = (($39) + ($38))|0;
  $BaseValue = $40;
  break;
 }
 case 4:  {
  $41 = $pTriplet;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & 511;
  $45 = $BaseValue;
  $46 = (($45) + ($44))|0;
  $BaseValue = $46;
  break;
 }
 case 5:  {
  $47 = $pTriplet;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 >>> 9;
  $51 = $50 & 511;
  $52 = $BaseValue;
  $53 = (($52) + ($51))|0;
  $BaseValue = $53;
  break;
 }
 case 6:  {
  $54 = $pTriplet;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 >>> 18;
  $58 = $57 & 511;
  $59 = $BaseValue;
  $60 = (($59) + ($58))|0;
  $BaseValue = $60;
  break;
 }
 default: {
 }
 }
 $61 = $1;
 $62 = $61 >>> 5;
 $DwordIndex = $62;
 $63 = $1;
 $64 = $63 & 32;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  $76 = $1;
  $77 = $76 & 31;
  $78 = 1 << $77;
  $79 = (($78) - 1)|0;
  $BitMask = $79;
  $80 = $BaseValue;
  $81 = $DwordIndex;
  $82 = ((($2)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($81<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $BitMask;
  $87 = $85 & $86;
  $88 = (__Z18GetNumberOfSetBitsj($87)|0);
  $89 = $88 >>> 24;
  $90 = (($80) + ($89))|0;
  STACKTOP = sp;return ($90|0);
 }
 $66 = $DwordIndex;
 $67 = (($66) - 1)|0;
 $68 = ((($2)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + ($67<<2)|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (__Z18GetNumberOfSetBitsj($71)|0);
 $73 = $72 >>> 24;
 $74 = $BaseValue;
 $75 = (($74) + ($73))|0;
 $BaseValue = $75;
 $76 = $1;
 $77 = $76 & 31;
 $78 = 1 << $77;
 $79 = (($78) - 1)|0;
 $BitMask = $79;
 $80 = $BaseValue;
 $81 = $DwordIndex;
 $82 = ((($2)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + ($81<<2)|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $BitMask;
 $87 = $85 & $86;
 $88 = (__Z18GetNumberOfSetBitsj($87)|0);
 $89 = $88 >>> 24;
 $90 = (($80) + ($89))|0;
 STACKTOP = sp;return ($90|0);
}
function __ZN16TNameIndexStructC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 __ZN13TGenericArrayC2Ev($3);
 $4 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vi(77,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(64,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_3(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZN16TNameIndexStructD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vi(75,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN13TGenericArrayD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(64,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_3(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZN16TNameIndexStruct17CheckNameFragmentEP15TMndxFindResultj($this,$pStruct1C,$dwFragOffs) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $dwFragOffs = $dwFragOffs|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $pStruct40 = 0, $szPathFragment = 0, $szSearchMask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 24|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $dwFragOffs;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $pStruct40 = $7;
 $8 = ((($4)) + 24|0);
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = ((($4)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 if ($11) {
  $szPathFragment = $13;
  $57 = $2;
  $58 = HEAP32[$57>>2]|0;
  $szSearchMask = $58;
  while(1) {
   $59 = $3;
   $60 = $szPathFragment;
   $61 = (($60) + ($59)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = $pStruct40;
   $65 = ((($64)) + 52|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $szSearchMask;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69 << 24 >> 24;
   $71 = ($63|0)==($70|0);
   if (!($71)) {
    label = 15;
    break;
   }
   $72 = $pStruct40;
   $73 = ((($72)) + 52|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 1)|0;
   HEAP32[$73>>2] = $75;
   $76 = ((($4)) + 24|0);
   $77 = $3;
   $78 = (($77) + 1)|0;
   $3 = $78;
   $79 = (__ZN12TSparseArray13IsItemPresentEj($76,$77)|0);
   $80 = ($79|0)!=(0);
   if ($80) {
    label = 12;
    break;
   }
   $81 = $3;
   $82 = $2;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($81>>>0)>=($84>>>0);
   if ($85) {
    label = 14;
    break;
   }
  }
  if ((label|0) == 12) {
   $$expand_i1_val6 = 1;
   HEAP8[$0>>0] = $$expand_i1_val6;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
  else if ((label|0) == 14) {
   $$expand_i1_val8 = 0;
   HEAP8[$0>>0] = $$expand_i1_val8;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
  else if ((label|0) == 15) {
   $$expand_i1_val10 = 0;
   HEAP8[$0>>0] = $$expand_i1_val10;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
 } else {
  $14 = $3;
  $15 = (($13) + ($14)|0);
  $16 = $pStruct40;
  $17 = ((($16)) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (0 - ($18))|0;
  $20 = (($15) + ($19)|0);
  $szPathFragment = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $szSearchMask = $22;
  while(1) {
   $23 = $pStruct40;
   $24 = ((($23)) + 52|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $szPathFragment;
   $27 = (($26) + ($25)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = $pStruct40;
   $31 = ((($30)) + 52|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $szSearchMask;
   $34 = (($33) + ($32)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($29|0)==($36|0);
   if (!($37)) {
    label = 8;
    break;
   }
   $38 = $pStruct40;
   $39 = ((($38)) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$39>>2] = $41;
   $42 = $pStruct40;
   $43 = ((($42)) + 52|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $szPathFragment;
   $46 = (($45) + ($44)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = ($48|0)==(0);
   if ($49) {
    label = 5;
    break;
   }
   $50 = $pStruct40;
   $51 = ((($50)) + 52|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $2;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($52>>>0)>=($55>>>0);
   if ($56) {
    label = 7;
    break;
   }
  }
  if ((label|0) == 5) {
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
  else if ((label|0) == 7) {
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
  else if ((label|0) == 8) {
   $$expand_i1_val4 = 0;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
 }
 return (0)|0;
}
function __ZN16TNameIndexStruct24CheckAndCopyNameFragmentEP15TMndxFindResultj($this,$pStruct1C,$dwFragOffs) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $dwFragOffs = $dwFragOffs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pStruct40 = 0, $szPathFragment = 0, $szSearchMask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 24|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $dwFragOffs;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $pStruct40 = $7;
 $8 = ((($4)) + 24|0);
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = ((($4)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 L1: do {
  if ($11) {
   $szPathFragment = $13;
   $73 = $2;
   $74 = HEAP32[$73>>2]|0;
   $szSearchMask = $74;
   while(1) {
    $75 = $3;
    $76 = $2;
    $77 = ((($76)) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75>>>0)<($78>>>0);
    $80 = $3;
    $81 = $szPathFragment;
    $82 = (($81) + ($80)|0);
    if (!($79)) {
     label = 17;
     break;
    }
    $83 = HEAP8[$82>>0]|0;
    $84 = $83 << 24 >> 24;
    $85 = $pStruct40;
    $86 = ((($85)) + 52|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $szSearchMask;
    $89 = (($88) + ($87)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $92 = ($84|0)!=($91|0);
    if ($92) {
     label = 14;
     break;
    }
    $93 = $pStruct40;
    $94 = $3;
    $95 = $szPathFragment;
    $96 = (($95) + ($94)|0);
    $97 = HEAP8[$96>>0]|0;
    __ZN13TGenericArray18InsertOneItem_CHAREc($93,$97);
    $98 = $pStruct40;
    $99 = ((($98)) + 52|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[$99>>2] = $101;
    $102 = ((($4)) + 24|0);
    $103 = $3;
    $104 = (($103) + 1)|0;
    $3 = $104;
    $105 = (__ZN12TSparseArray13IsItemPresentEj($102,$103)|0);
    $106 = ($105|0)!=(0);
    if ($106) {
     label = 16;
     break;
    }
   }
   if ((label|0) == 14) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $117 = $$pre_trunc&1;
    STACKTOP = sp;return ($117|0);
   }
   else if ((label|0) == 16) {
    $$expand_i1_val6 = 1;
    HEAP8[$0>>0] = $$expand_i1_val6;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $117 = $$pre_trunc&1;
    STACKTOP = sp;return ($117|0);
   }
   else if ((label|0) == 17) {
    $szPathFragment = $82;
    while(1) {
     $107 = ((($4)) + 24|0);
     $108 = $3;
     $109 = (($108) + 1)|0;
     $3 = $109;
     $110 = (__ZN12TSparseArray13IsItemPresentEj($107,$108)|0);
     $111 = ($110|0)==(0);
     if (!($111)) {
      break L1;
     }
     $112 = $pStruct40;
     $113 = $szPathFragment;
     $114 = HEAP8[$113>>0]|0;
     __ZN13TGenericArray18InsertOneItem_CHAREc($112,$114);
     $115 = $szPathFragment;
     $116 = ((($115)) + 1|0);
     $szPathFragment = $116;
    }
   }
  } else {
   $14 = $3;
   $15 = (($13) + ($14)|0);
   $16 = $pStruct40;
   $17 = ((($16)) + 52|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($15) + ($19)|0);
   $szPathFragment = $20;
   $21 = $2;
   $22 = HEAP32[$21>>2]|0;
   $szSearchMask = $22;
   while(1) {
    $23 = $pStruct40;
    $24 = ((($23)) + 52|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $2;
    $27 = ((($26)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($25>>>0)<($28>>>0);
    $30 = $pStruct40;
    $31 = ((($30)) + 52|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $szPathFragment;
    $34 = (($33) + ($32)|0);
    if (!($29)) {
     label = 8;
     break;
    }
    $35 = HEAP8[$34>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = $pStruct40;
    $38 = ((($37)) + 52|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $szSearchMask;
    $41 = (($40) + ($39)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = ($36|0)!=($43|0);
    if ($44) {
     label = 5;
     break;
    }
    $45 = $pStruct40;
    $46 = $pStruct40;
    $47 = ((($46)) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $szPathFragment;
    $50 = (($49) + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    __ZN13TGenericArray18InsertOneItem_CHAREc($45,$51);
    $52 = $pStruct40;
    $53 = ((($52)) + 52|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$53>>2] = $55;
    $56 = $pStruct40;
    $57 = ((($56)) + 52|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $szPathFragment;
    $60 = (($59) + ($58)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $63 = ($62|0)==(0);
    if ($63) {
     label = 7;
     break;
    }
   }
   if ((label|0) == 5) {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $117 = $$pre_trunc&1;
    STACKTOP = sp;return ($117|0);
   }
   else if ((label|0) == 7) {
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $117 = $$pre_trunc&1;
    STACKTOP = sp;return ($117|0);
   }
   else if ((label|0) == 8) {
    $szPathFragment = $34;
    while(1) {
     $64 = $szPathFragment;
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($66|0)!=(0);
     if (!($67)) {
      break L1;
     }
     $68 = $pStruct40;
     $69 = $szPathFragment;
     $70 = HEAP8[$69>>0]|0;
     __ZN13TGenericArray18InsertOneItem_CHAREc($68,$70);
     $71 = $szPathFragment;
     $72 = ((($71)) + 1|0);
     $szPathFragment = $72;
    }
   }
  }
 } while(0);
 $$expand_i1_val8 = 1;
 HEAP8[$0>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $117 = $$pre_trunc&1;
 STACKTOP = sp;return ($117|0);
}
function __ZN16TNameIndexStruct16CopyNameFragmentEP15TMndxFindResultj($this,$pStruct1C,$dwFragOffs) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $dwFragOffs = $dwFragOffs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pStruct40 = 0, $szPathFragment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $this;
 $1 = $pStruct1C;
 $2 = $dwFragOffs;
 $3 = $0;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $pStruct40 = $6;
 $7 = ((($3)) + 24|0);
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  while(1) {
   $23 = $pStruct40;
   $24 = $2;
   $25 = ((($3)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($24)|0);
   $28 = HEAP8[$27>>0]|0;
   __ZN13TGenericArray18InsertOneItem_CHAREc($23,$28);
   $29 = ((($3)) + 24|0);
   $30 = $2;
   $31 = (($30) + 1)|0;
   $2 = $31;
   $32 = (__ZN12TSparseArray13IsItemPresentEj($29,$30)|0);
   $33 = ($32|0)!=(0);
   if ($33) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $11 = ((($3)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = (($12) + ($13)|0);
 $szPathFragment = $14;
 while(1) {
  $15 = $szPathFragment;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  $19 = $pStruct40;
  $20 = $szPathFragment;
  $21 = ((($20)) + 1|0);
  $szPathFragment = $21;
  $22 = HEAP8[$20>>0]|0;
  __ZN13TGenericArray18InsertOneItem_CHAREc($19,$22);
 }
 STACKTOP = sp;return;
}
function __ZN16TNameIndexStruct12ExchangeWithERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $WorkBuff = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $WorkBuff = sp;
 $0 = $this;
 $1 = $Target;
 $2 = $0;
 __ZN16TNameIndexStructC2Ev($WorkBuff);
 dest=$WorkBuff; src=$2; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $1;
 dest=$2; src=$3; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $1;
 dest=$4; src=$WorkBuff; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN16TNameIndexStructD2Ev($WorkBuff);
 STACKTOP = sp;return;
}
function __ZN16TNameIndexStruct14LoadFromStreamER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $InStream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN13TGenericArray19LoadStringsWithCopyER11TByteStream($3,$4)|0);
 $nError = $5;
 $6 = $nError;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $nError;
  $0 = $8;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = ((($3)) + 24|0);
  $10 = $2;
  $11 = (__ZN12TSparseArray23LoadFromStream_ExchangeER11TByteStream($9,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN16TNameIndexStruct23LoadFromStream_ExchangeER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempIndexStruct = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $TempIndexStruct = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN16TNameIndexStructC2Ev($TempIndexStruct);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iii(78,($TempIndexStruct|0),($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN16TNameIndexStructD2Ev($TempIndexStruct);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
  __THREW__ = 0;
  invoke_vii(80,($6|0),($TempIndexStruct|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $0 = 0;
   $5 = 1;
   __ZN16TNameIndexStructD2Ev($TempIndexStruct);
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(79,($TempIndexStruct|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN9TStruct10C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 3;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 512;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 4096;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 131072;
 STACKTOP = sp;return;
}
function __ZN9TStruct108CopyFromERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $Target;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($2)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($2)) + 12|0);
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN9TStruct1011sub_1956FD0Ej($this,$dwBitMask) {
 $this = $this|0;
 $dwBitMask = $dwBitMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $dwBitMask;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 3968;
 switch ($5|0) {
 case 0:  {
  $6 = ((($3)) + 4|0);
  HEAP32[$6>>2] = 512;
  $0 = 0;
  break;
 }
 case 128:  {
  $7 = ((($3)) + 4|0);
  HEAP32[$7>>2] = 128;
  $0 = 0;
  break;
 }
 case 256:  {
  $8 = ((($3)) + 4|0);
  HEAP32[$8>>2] = 256;
  $0 = 0;
  break;
 }
 case 512:  {
  $9 = ((($3)) + 4|0);
  HEAP32[$9>>2] = 512;
  $0 = 0;
  break;
 }
 case 1024:  {
  $10 = ((($3)) + 4|0);
  HEAP32[$10>>2] = 1024;
  $0 = 0;
  break;
 }
 case 2048:  {
  $11 = ((($3)) + 4|0);
  HEAP32[$11>>2] = 2048;
  $0 = 0;
  break;
 }
 default: {
  $0 = 22;
 }
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __ZN9TStruct1011sub_1957050Ej($this,$dwBitMask) {
 $this = $this|0;
 $dwBitMask = $dwBitMask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $switch$split32D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $dwBitMask;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 983040;
 $switch$split2D = ($5|0)<(65536);
 L1: do {
  if ($switch$split2D) {
   switch ($5|0) {
   case 0:  {
    break;
   }
   default: {
    label = 5;
    break L1;
   }
   }
   $6 = ((($3)) + 12|0);
   HEAP32[$6>>2] = 131072;
   $0 = 0;
  } else {
   $switch$split32D = ($5|0)<(131072);
   if ($switch$split32D) {
    switch ($5|0) {
    case 65536:  {
     break;
    }
    default: {
     label = 5;
     break L1;
    }
    }
    $7 = ((($3)) + 12|0);
    HEAP32[$7>>2] = 65536;
    $0 = 0;
    break;
   } else {
    switch ($5|0) {
    case 131072:  {
     break;
    }
    default: {
     label = 5;
     break L1;
    }
    }
    $8 = ((($3)) + 12|0);
    HEAP32[$8>>2] = 131072;
    $0 = 0;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $0 = 22;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function __ZN9TStruct1011sub_19572E0Ej($this,$dwBitMask) {
 $this = $this|0;
 $dwBitMask = $dwBitMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwSubMask = 0, $nError = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $this;
 $2 = $dwBitMask;
 $3 = $1;
 $4 = $2;
 $5 = $4 & -1048576;
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = 22;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $7 = $2;
 $8 = $7 & 127;
 $dwSubMask = $8;
 $9 = $dwSubMask;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $dwSubMask;
  HEAP32[$3>>2] = $11;
 }
 $12 = $2;
 $13 = (__ZN9TStruct1011sub_1956FD0Ej($3,$12)|0);
 $nError = $13;
 $14 = $nError;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $nError;
  $0 = $16;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $17 = $2;
 $18 = $17 & 61440;
 $dwSubMask = $18;
 $19 = $dwSubMask;
 $20 = ($19|0)==(0);
 $21 = $dwSubMask;
 $22 = ($21|0)==(4096);
 $or$cond = $20 | $22;
 if ($or$cond) {
  $23 = ((($3)) + 8|0);
  HEAP32[$23>>2] = 4096;
  $24 = $2;
  $25 = (__ZN9TStruct1011sub_1957050Ej($3,$24)|0);
  $0 = $25;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $26 = $dwSubMask;
 $27 = ($26|0)==(8192);
 if ($27) {
  $28 = ((($3)) + 8|0);
  HEAP32[$28>>2] = 8192;
  $29 = $2;
  $30 = (__ZN9TStruct1011sub_1957050Ej($3,$29)|0);
  $0 = $30;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $0 = 22;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __ZN9TStruct1011sub_1957800Ej($this,$dwBitMask) {
 $this = $this|0;
 $dwBitMask = $dwBitMask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TempStruct = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $TempStruct = sp + 8|0;
 $1 = $this;
 $2 = $dwBitMask;
 $3 = $1;
 __ZN9TStruct10C2Ev($TempStruct);
 $4 = $2;
 $5 = (__ZN9TStruct1011sub_19572E0Ej($TempStruct,$4)|0);
 $nError = $5;
 $6 = $nError;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $nError;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  __ZN9TStruct108CopyFromERS_($3,$TempStruct);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN17TFileNameDatabaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 __ZN12TSparseArrayC2Ev($3);
 $4 = ((($3)) + 104|0);
 __THREW__ = 0;
 invoke_vi(77,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $33 = ___cxa_find_matching_catch_2()|0;
   $34 = tempRet0;
   $1 = $33;
   $2 = $34;
   label = 25;
  } else {
   $7 = ((($3)) + 208|0);
   __THREW__ = 0;
   invoke_vi(77,($7|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    $1 = $35;
    $2 = $36;
   } else {
    $10 = ((($3)) + 312|0);
    __THREW__ = 0;
    invoke_vi(73,($10|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $37 = ___cxa_find_matching_catch_2()|0;
     $38 = tempRet0;
     $1 = $37;
     $2 = $38;
    } else {
     $13 = ((($3)) + 336|0);
     __THREW__ = 0;
     invoke_vi(81,($13|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      $39 = ___cxa_find_matching_catch_2()|0;
      $40 = tempRet0;
      $1 = $39;
      $2 = $40;
     } else {
      $16 = ((($3)) + 372|0);
      __THREW__ = 0;
      invoke_vi(82,($16|0));
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $41 = ___cxa_find_matching_catch_2()|0;
       $42 = tempRet0;
       $1 = $41;
       $2 = $42;
      } else {
       $19 = ((($3)) + 500|0);
       __THREW__ = 0;
       invoke_vi(83,($19|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        $43 = ___cxa_find_matching_catch_2()|0;
        $44 = tempRet0;
        $1 = $43;
        $2 = $44;
       } else {
        $22 = ((($3)) + 504|0);
        __THREW__ = 0;
        invoke_vi(73,($22|0));
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if ($24) {
         $45 = ___cxa_find_matching_catch_2()|0;
         $46 = tempRet0;
         $1 = $45;
         $2 = $46;
        } else {
         $25 = ((($3)) + 536|0);
         __THREW__ = 0;
         invoke_vi(84,($25|0));
         $26 = __THREW__; __THREW__ = 0;
         $27 = $26&1;
         if (!($27)) {
          $28 = ((($3)) + 552|0);
          __THREW__ = 0;
          invoke_vi(85,($28|0));
          $29 = __THREW__; __THREW__ = 0;
          $30 = $29&1;
          if (!($30)) {
           $31 = ((($3)) + 528|0);
           HEAP32[$31>>2] = 0;
           $32 = ((($3)) + 532|0);
           HEAP32[$32>>2] = 0;
           STACKTOP = sp;return;
          }
         }
         $47 = ___cxa_find_matching_catch_2()|0;
         $48 = tempRet0;
         $1 = $47;
         $2 = $48;
         __THREW__ = 0;
         invoke_vi(64,($22|0));
         $49 = __THREW__; __THREW__ = 0;
         $50 = $49&1;
         if ($50) {
          break;
         }
        }
        __THREW__ = 0;
        invoke_vi(86,($19|0));
        $51 = __THREW__; __THREW__ = 0;
        $52 = $51&1;
        if ($52) {
         break;
        }
       }
       __THREW__ = 0;
       invoke_vi(79,($16|0));
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        break;
       }
      }
      __THREW__ = 0;
      invoke_vi(71,($13|0));
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(64,($10|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      break;
     }
    }
    __THREW__ = 0;
    invoke_vi(75,($7|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
   }
   __THREW__ = 0;
   invoke_vi(75,($4|0));
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   if (!($62)) {
    label = 25;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  __THREW__ = 0;
  invoke_vi(75,($3|0));
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if (!($64)) {
   $65 = $1;
   $66 = $2;
   ___resumeException($65|0);
   // unreachable;
  }
 }
 $67 = ___cxa_find_matching_catch_3(0|0)|0;
 $68 = tempRet0;
 ___clang_call_terminate($67);
 // unreachable;
}
function __ZN17TFileNameDatabase12ExchangeWithERS_($this,$Target) {
 $this = $this|0;
 $Target = $Target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $TempPtr = 0, $dwTemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $TempPtr = sp + 12|0;
 $0 = $this;
 $1 = $Target;
 $4 = $0;
 __ZN20TFileNameDatabasePtrC2Ev($TempPtr);
 $5 = $1;
 __THREW__ = 0;
 invoke_vii(76,($4|0),($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($4)) + 104|0);
  $9 = $1;
  $10 = ((($9)) + 104|0);
  __THREW__ = 0;
  invoke_vii(76,($8|0),($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = ((($4)) + 208|0);
   $14 = $1;
   $15 = ((($14)) + 208|0);
   __THREW__ = 0;
   invoke_vii(76,($13|0),($15|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    $18 = ((($4)) + 312|0);
    $19 = $1;
    $20 = ((($19)) + 312|0);
    __THREW__ = 0;
    invoke_vii(87,($18|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ((($4)) + 336|0);
     $24 = $1;
     $25 = ((($24)) + 336|0);
     __THREW__ = 0;
     invoke_vii(72,($23|0),($25|0));
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      $28 = ((($4)) + 372|0);
      $29 = $1;
      $30 = ((($29)) + 372|0);
      __THREW__ = 0;
      invoke_vii(80,($28|0),($30|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if (!($32)) {
       $33 = ((($4)) + 500|0);
       ;HEAP32[$TempPtr>>2]=HEAP32[$33>>2]|0;
       $34 = ((($4)) + 500|0);
       $35 = $1;
       $36 = ((($35)) + 500|0);
       ;HEAP32[$34>>2]=HEAP32[$36>>2]|0;
       $37 = $1;
       $38 = ((($37)) + 500|0);
       ;HEAP32[$38>>2]=HEAP32[$TempPtr>>2]|0;
       $39 = ((($4)) + 504|0);
       $40 = $1;
       $41 = ((($40)) + 504|0);
       __THREW__ = 0;
       invoke_vii(87,($39|0),($41|0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if (!($43)) {
        $44 = ((($4)) + 528|0);
        $45 = HEAP32[$44>>2]|0;
        $dwTemp = $45;
        $46 = $1;
        $47 = ((($46)) + 528|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ((($4)) + 528|0);
        HEAP32[$49>>2] = $48;
        $50 = $dwTemp;
        $51 = $1;
        $52 = ((($51)) + 528|0);
        HEAP32[$52>>2] = $50;
        $53 = ((($4)) + 532|0);
        $54 = HEAP32[$53>>2]|0;
        $dwTemp = $54;
        $55 = $1;
        $56 = ((($55)) + 532|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ((($4)) + 532|0);
        HEAP32[$58>>2] = $57;
        $59 = $dwTemp;
        $60 = $1;
        $61 = ((($60)) + 532|0);
        HEAP32[$61>>2] = $59;
        $62 = ((($4)) + 536|0);
        $63 = $1;
        $64 = ((($63)) + 536|0);
        __THREW__ = 0;
        invoke_vii(88,($62|0),($64|0));
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if (!($66)) {
         __ZN20TFileNameDatabasePtrD2Ev($TempPtr);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 $67 = ___cxa_find_matching_catch_2()|0;
 $68 = tempRet0;
 $2 = $67;
 $3 = $68;
 __THREW__ = 0;
 invoke_vi(86,($TempPtr|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $73 = ___cxa_find_matching_catch_3(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  $71 = $2;
  $72 = $3;
  ___resumeException($71|0);
  // unreachable;
 }
}
function __ZN17TFileNameDatabase11sub_1959CB0Ej($this,$dwItemIndex) {
 $this = $this|0;
 $dwItemIndex = $dwItemIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dwKeyShifted = 0, $eax = 0, $ebx = 0, $ecx = 0, $edi = 0, $edx = 0, $esi = 0, $pTriplet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $this;
 $2 = $dwItemIndex;
 $3 = $1;
 $4 = $2;
 $5 = $4 >>> 9;
 $dwKeyShifted = $5;
 $6 = $2;
 $edx = $6;
 $7 = $edx;
 $8 = $7 & 511;
 $9 = ($8|0)==(0);
 $10 = $dwKeyShifted;
 $11 = ((($3)) + 56|0);
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 if ($9) {
  $0 = $15;
  $269 = $0;
  STACKTOP = sp;return ($269|0);
 }
 $16 = $15 >>> 9;
 $eax = $16;
 $17 = $dwKeyShifted;
 $18 = (($17) + 1)|0;
 $19 = ((($3)) + 56|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 511)|0;
 $25 = $24 >>> 9;
 $esi = $25;
 $26 = $esi;
 $2 = $26;
 $27 = $eax;
 $28 = (($27) + 10)|0;
 $29 = $esi;
 $30 = ($28>>>0)>=($29>>>0);
 L5: do {
  if ($30) {
   $31 = ((($3)) + 32|0);
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $eax;
   $35 = (($33) + (($34*12)|0)|0);
   $36 = ((($35)) + 12|0);
   $pTriplet = $36;
   $37 = $eax;
   $38 = $37 << 9;
   $edi = $38;
   $39 = $edi;
   $40 = $pTriplet;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) - ($41))|0;
   $43 = (($42) + 512)|0;
   $ebx = $43;
   while(1) {
    $44 = $edx;
    $45 = $ebx;
    $46 = ($44>>>0)>=($45>>>0);
    if (!($46)) {
     break L5;
    }
    $47 = $edi;
    $48 = (($47) + 512)|0;
    $edi = $48;
    $49 = $pTriplet;
    $50 = ((($49)) + 12|0);
    $pTriplet = $50;
    $51 = $edi;
    $52 = $pTriplet;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) - ($53))|0;
    $55 = (($54) + 512)|0;
    $ebx = $55;
    $56 = $eax;
    $57 = (($56) + 1)|0;
    $eax = $57;
   }
  } else {
   while(1) {
    $58 = $eax;
    $59 = (($58) + 1)|0;
    $60 = $esi;
    $61 = ($59>>>0)<($60>>>0);
    if (!($61)) {
     break L5;
    }
    $62 = $esi;
    $63 = $eax;
    $64 = (($62) + ($63))|0;
    $65 = $64 >>> 1;
    $esi = $65;
    $66 = $esi;
    $67 = $66 << 9;
    $68 = $esi;
    $69 = ((($3)) + 32|0);
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + (($68*12)|0)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($67) - ($73))|0;
    $ebx = $74;
    $75 = $edx;
    $76 = $ebx;
    $77 = ($75>>>0)<($76>>>0);
    $78 = $esi;
    if ($77) {
     $2 = $78;
     continue;
    } else {
     $eax = $78;
     $79 = $2;
     $esi = $79;
     continue;
    }
   }
  }
 } while(0);
 $80 = ((($3)) + 32|0);
 $81 = ((($80)) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $eax;
 $84 = (($82) + (($83*12)|0)|0);
 $pTriplet = $84;
 $85 = $pTriplet;
 $86 = HEAP32[$85>>2]|0;
 $87 = $eax;
 $88 = $87 << 9;
 $89 = (($86) - ($88))|0;
 $90 = $edx;
 $91 = (($90) + ($89))|0;
 $edx = $91;
 $92 = $eax;
 $93 = $92 << 4;
 $edi = $93;
 $94 = $pTriplet;
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $eax = $96;
 $97 = $eax;
 $98 = $97 >>> 23;
 $ecx = $98;
 $99 = $ecx;
 $100 = (256 - ($99))|0;
 $ebx = $100;
 $101 = $edx;
 $102 = $ebx;
 $103 = ($101>>>0)<($102>>>0);
 do {
  if ($103) {
   $104 = $eax;
   $105 = $104 >>> 7;
   $106 = $105 & 255;
   $ecx = $106;
   $107 = $ecx;
   $108 = (128 - ($107))|0;
   $esi = $108;
   $109 = $edx;
   $110 = $esi;
   $111 = ($109>>>0)<($110>>>0);
   $112 = $eax;
   if ($111) {
    $113 = $112 & 127;
    $eax = $113;
    $114 = $eax;
    $115 = (64 - ($114))|0;
    $ecx = $115;
    $116 = $edx;
    $117 = $ecx;
    $118 = ($116>>>0)>=($117>>>0);
    if (!($118)) {
     break;
    }
    $119 = $edi;
    $120 = (($119) + 2)|0;
    $edi = $120;
    $121 = $edx;
    $122 = $eax;
    $123 = (($121) + ($122))|0;
    $124 = (($123) - 64)|0;
    $edx = $124;
    break;
   }
   $125 = $112 >>> 15;
   $126 = $125 & 255;
   $eax = $126;
   $127 = $eax;
   $128 = (192 - ($127))|0;
   $esi = $128;
   $129 = $edx;
   $130 = $esi;
   $131 = ($129>>>0)<($130>>>0);
   $132 = $edi;
   if ($131) {
    $133 = (($132) + 4)|0;
    $edi = $133;
    $134 = $edx;
    $135 = $ecx;
    $136 = (($134) + ($135))|0;
    $137 = (($136) - 128)|0;
    $edx = $137;
    break;
   } else {
    $138 = (($132) + 6)|0;
    $edi = $138;
    $139 = $edx;
    $140 = $eax;
    $141 = (($139) + ($140))|0;
    $142 = (($141) - 192)|0;
    $edx = $142;
    break;
   }
  } else {
   $143 = $pTriplet;
   $144 = ((($143)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $esi = $145;
   $146 = $esi;
   $147 = $146 >>> 9;
   $148 = $147 & 511;
   $eax = $148;
   $149 = $eax;
   $150 = (384 - ($149))|0;
   $ebx = $150;
   $151 = $edx;
   $152 = $ebx;
   $153 = ($151>>>0)<($152>>>0);
   $154 = $esi;
   if ($153) {
    $155 = $154 & 511;
    $esi = $155;
    $156 = $esi;
    $157 = (320 - ($156))|0;
    $eax = $157;
    $158 = $edx;
    $159 = $eax;
    $160 = ($158>>>0)<($159>>>0);
    $161 = $edi;
    if ($160) {
     $162 = (($161) + 8)|0;
     $edi = $162;
     $163 = $edx;
     $164 = $ecx;
     $165 = (($163) + ($164))|0;
     $166 = (($165) - 256)|0;
     $edx = $166;
     break;
    } else {
     $167 = (($161) + 10)|0;
     $edi = $167;
     $168 = $edx;
     $169 = $esi;
     $170 = (($168) + ($169))|0;
     $171 = (($170) - 320)|0;
     $edx = $171;
     break;
    }
   } else {
    $172 = $154 >>> 18;
    $173 = $172 & 511;
    $esi = $173;
    $174 = $esi;
    $175 = (448 - ($174))|0;
    $ecx = $175;
    $176 = $edx;
    $177 = $ecx;
    $178 = ($176>>>0)<($177>>>0);
    $179 = $edi;
    if ($178) {
     $180 = (($179) + 12)|0;
     $edi = $180;
     $181 = $edx;
     $182 = $eax;
     $183 = (($181) + ($182))|0;
     $184 = (($183) - 384)|0;
     $edx = $184;
     break;
    } else {
     $185 = (($179) + 14)|0;
     $edi = $185;
     $186 = $edx;
     $187 = $esi;
     $188 = (($186) + ($187))|0;
     $189 = (($188) - 448)|0;
     $edx = $189;
     break;
    }
   }
  }
 } while(0);
 $190 = $edi;
 $191 = ((($3)) + 8|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (($192) + ($190<<2)|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $194 ^ -1;
 $ecx = $195;
 $196 = $ecx;
 $197 = (__Z18GetNumberOfSetBitsj($196)|0);
 $eax = $197;
 $198 = $eax;
 $199 = $198 >>> 24;
 $esi = $199;
 $200 = $edx;
 $201 = $esi;
 $202 = ($200>>>0)>=($201>>>0);
 if ($202) {
  $203 = $edi;
  $204 = (($203) + 1)|0;
  $edi = $204;
  $205 = ((($3)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + ($204<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $208 ^ -1;
  $ecx = $209;
  $210 = $edx;
  $211 = $esi;
  $212 = (($210) - ($211))|0;
  $edx = $212;
  $213 = $ecx;
  $214 = (__Z18GetNumberOfSetBitsj($213)|0);
  $eax = $214;
 }
 $215 = $eax;
 $216 = $215 >>> 8;
 $217 = $216 & 255;
 $esi = $217;
 $218 = $edi;
 $219 = $218 << 5;
 $edi = $219;
 $220 = $edx;
 $221 = $esi;
 $222 = ($220>>>0)<($221>>>0);
 $223 = $eax;
 do {
  if ($222) {
   $224 = $223 & 255;
   $eax = $224;
   $225 = $edx;
   $226 = $eax;
   $227 = ($225>>>0)>=($226>>>0);
   if ($227) {
    $228 = $ecx;
    $229 = $228 >>> 8;
    $ecx = $229;
    $230 = $edi;
    $231 = (($230) + 8)|0;
    $edi = $231;
    $232 = $eax;
    $233 = $edx;
    $234 = (($233) - ($232))|0;
    $edx = $234;
   }
  } else {
   $235 = $223 >>> 16;
   $236 = $235 & 255;
   $eax = $236;
   $237 = $edx;
   $238 = $eax;
   $239 = ($237>>>0)<($238>>>0);
   $240 = $ecx;
   if ($239) {
    $241 = $240 >>> 16;
    $ecx = $241;
    $242 = $edi;
    $243 = (($242) + 16)|0;
    $edi = $243;
    $244 = $esi;
    $245 = $edx;
    $246 = (($245) - ($244))|0;
    $edx = $246;
    break;
   } else {
    $247 = $240 >>> 24;
    $ecx = $247;
    $248 = $edi;
    $249 = (($248) + 24)|0;
    $edi = $249;
    $250 = $eax;
    $251 = $edx;
    $252 = (($251) - ($250))|0;
    $edx = $252;
    break;
   }
  }
 } while(0);
 $253 = $edx;
 $254 = $253 << 8;
 $edx = $254;
 $255 = $ecx;
 $256 = $255 & 255;
 $ecx = $256;
 $257 = $ecx;
 $258 = $edx;
 $259 = (($257) + ($258))|0;
 $260 = ($259>>>0)<(2048);
 if (!($260)) {
  ___assert_fail((21991|0),(21902|0),1684,(22027|0));
  // unreachable;
 }
 $261 = $ecx;
 $262 = $edx;
 $263 = (($261) + ($262))|0;
 $264 = (19806 + ($263)|0);
 $265 = HEAP8[$264>>0]|0;
 $266 = $265&255;
 $267 = $edi;
 $268 = (($266) + ($267))|0;
 $0 = $268;
 $269 = $0;
 STACKTOP = sp;return ($269|0);
}
function __ZN17TFileNameDatabase11sub_1959F50Ej($this,$arg_0) {
 $this = $this|0;
 $arg_0 = $arg_0|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ItemArray = 0, $eax = 0, $ebx = 0, $ecx = 0, $edi = 0, $edx = 0, $esi = 0, $pTriplet = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $this;
 $2 = $arg_0;
 $3 = $1;
 $4 = $2;
 $edx = $4;
 $5 = $2;
 $6 = $5 >>> 9;
 $eax = $6;
 $7 = $2;
 $8 = $7 & 511;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $eax;
  $11 = ((($3)) + 80|0);
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $229 = $0;
  STACKTOP = sp;return ($229|0);
 }
 $16 = ((($3)) + 80|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $eax;
 $20 = (($18) + ($19<<2)|0);
 $ItemArray = $20;
 $21 = $ItemArray;
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 >>> 9;
 $eax = $23;
 $24 = $ItemArray;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 511)|0;
 $28 = $27 >>> 9;
 $edi = $28;
 $29 = $eax;
 $30 = (($29) + 10)|0;
 $31 = $edi;
 $32 = ($30>>>0)>($31>>>0);
 L5: do {
  if ($32) {
   $33 = ((($3)) + 32|0);
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $eax;
   $37 = (($35) + (($36*12)|0)|0);
   $38 = ((($37)) + 12|0);
   $pTriplet = $38;
   while(1) {
    $39 = $edx;
    $40 = $pTriplet;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($39>>>0)>=($41>>>0);
    if (!($42)) {
     break L5;
    }
    $43 = $pTriplet;
    $44 = ((($43)) + 12|0);
    $pTriplet = $44;
    $45 = $eax;
    $46 = (($45) + 1)|0;
    $eax = $46;
   }
  } else {
   $47 = $eax;
   $48 = (($47) + 1)|0;
   $49 = $edi;
   $50 = ($48>>>0)<($49>>>0);
   if ($50) {
    $51 = $edi;
    $52 = $eax;
    $53 = (($51) + ($52))|0;
    $54 = $53 >>> 1;
    $esi = $54;
    $55 = $edx;
    $56 = $esi;
    $57 = ((($3)) + 32|0);
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + (($56*12)|0)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($55>>>0)<($61>>>0);
    $63 = $esi;
    if ($62) {
     $edi = $63;
     break;
    } else {
     $eax = $63;
     break;
    }
   }
  }
 } while(0);
 $64 = ((($3)) + 32|0);
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $eax;
 $68 = (($66) + (($67*12)|0)|0);
 $pTriplet = $68;
 $69 = $edx;
 $70 = $pTriplet;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) - ($71))|0;
 $edx = $72;
 $73 = $eax;
 $74 = $73 << 4;
 $edi = $74;
 $75 = $pTriplet;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $eax = $77;
 $78 = $eax;
 $79 = $78 >>> 23;
 $ebx = $79;
 $80 = $edx;
 $81 = $ebx;
 $82 = ($80>>>0)<($81>>>0);
 do {
  if ($82) {
   $83 = $eax;
   $84 = $83 >>> 7;
   $85 = $84 & 255;
   $esi = $85;
   $86 = $edx;
   $87 = $esi;
   $88 = ($86>>>0)<($87>>>0);
   $89 = $eax;
   if ($88) {
    $90 = $89 & 127;
    $eax = $90;
    $91 = $edx;
    $92 = $eax;
    $93 = ($91>>>0)>=($92>>>0);
    if (!($93)) {
     break;
    }
    $94 = $edi;
    $95 = (($94) + 2)|0;
    $edi = $95;
    $96 = $edx;
    $97 = $eax;
    $98 = (($96) - ($97))|0;
    $edx = $98;
    break;
   }
   $99 = $89 >>> 15;
   $100 = $99 & 255;
   $eax = $100;
   $101 = $edx;
   $102 = $eax;
   $103 = ($101>>>0)<($102>>>0);
   $104 = $edi;
   if ($103) {
    $105 = (($104) + 4)|0;
    $edi = $105;
    $106 = $edx;
    $107 = $esi;
    $108 = (($106) - ($107))|0;
    $edx = $108;
    break;
   } else {
    $109 = (($104) + 6)|0;
    $edi = $109;
    $110 = $edx;
    $111 = $eax;
    $112 = (($110) - ($111))|0;
    $edx = $112;
    break;
   }
  } else {
   $113 = $pTriplet;
   $114 = ((($113)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $esi = $115;
   $116 = $pTriplet;
   $117 = ((($116)) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 >>> 9;
   $120 = $119 & 511;
   $eax = $120;
   $121 = $edx;
   $122 = $eax;
   $123 = ($121>>>0)<($122>>>0);
   $124 = $esi;
   if ($123) {
    $125 = $124 & 511;
    $esi = $125;
    $126 = $edx;
    $127 = $esi;
    $128 = ($126>>>0)<($127>>>0);
    $129 = $edi;
    if ($128) {
     $130 = (($129) + 8)|0;
     $edi = $130;
     $131 = $edx;
     $132 = $ebx;
     $133 = (($131) - ($132))|0;
     $edx = $133;
     break;
    } else {
     $134 = (($129) + 10)|0;
     $edi = $134;
     $135 = $edx;
     $136 = $esi;
     $137 = (($135) - ($136))|0;
     $edx = $137;
     break;
    }
   } else {
    $138 = $124 >>> 18;
    $139 = $138 & 511;
    $esi = $139;
    $140 = $edx;
    $141 = $esi;
    $142 = ($140>>>0)<($141>>>0);
    $143 = $edi;
    if ($142) {
     $144 = (($143) + 12)|0;
     $edi = $144;
     $145 = $edx;
     $146 = $eax;
     $147 = (($145) - ($146))|0;
     $edx = $147;
     break;
    } else {
     $148 = (($143) + 14)|0;
     $edi = $148;
     $149 = $edx;
     $150 = $esi;
     $151 = (($149) - ($150))|0;
     $edx = $151;
     break;
    }
   }
  }
 } while(0);
 $152 = $edi;
 $153 = ((($3)) + 8|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($152<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $esi = $156;
 $157 = $esi;
 $158 = (__Z18GetNumberOfSetBitsj($157)|0);
 $eax = $158;
 $159 = $eax;
 $160 = $159 >>> 24;
 $ecx = $160;
 $161 = $edx;
 $162 = $ecx;
 $163 = ($161>>>0)>=($162>>>0);
 if ($163) {
  $164 = $edi;
  $165 = (($164) + 1)|0;
  $edi = $165;
  $166 = ((($3)) + 8|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + ($165<<2)|0);
  $169 = HEAP32[$168>>2]|0;
  $esi = $169;
  $170 = $edx;
  $171 = $ecx;
  $172 = (($170) - ($171))|0;
  $edx = $172;
  $173 = $esi;
  $174 = (__Z18GetNumberOfSetBitsj($173)|0);
  $eax = $174;
 }
 $175 = $eax;
 $176 = $175 >>> 8;
 $177 = $176 & 255;
 $ecx = $177;
 $178 = $edi;
 $179 = $178 << 5;
 $edi = $179;
 $180 = $edx;
 $181 = $ecx;
 $182 = ($180>>>0)<($181>>>0);
 $183 = $eax;
 do {
  if ($182) {
   $184 = $183 & 255;
   $eax = $184;
   $185 = $edx;
   $186 = $eax;
   $187 = ($185>>>0)>=($186>>>0);
   if ($187) {
    $188 = $edi;
    $189 = (($188) + 8)|0;
    $edi = $189;
    $190 = $esi;
    $191 = $190 >>> 8;
    $esi = $191;
    $192 = $edx;
    $193 = $eax;
    $194 = (($192) - ($193))|0;
    $edx = $194;
   }
  } else {
   $195 = $183 >>> 16;
   $196 = $195 & 255;
   $eax = $196;
   $197 = $edx;
   $198 = $eax;
   $199 = ($197>>>0)<($198>>>0);
   $200 = $esi;
   if ($199) {
    $201 = $200 >>> 16;
    $esi = $201;
    $202 = $edi;
    $203 = (($202) + 16)|0;
    $edi = $203;
    $204 = $edx;
    $205 = $ecx;
    $206 = (($204) - ($205))|0;
    $edx = $206;
    break;
   } else {
    $207 = $200 >>> 24;
    $esi = $207;
    $208 = $edi;
    $209 = (($208) + 24)|0;
    $edi = $209;
    $210 = $edx;
    $211 = $eax;
    $212 = (($210) - ($211))|0;
    $edx = $212;
    break;
   }
  }
 } while(0);
 $213 = $esi;
 $214 = $213 & 255;
 $esi = $214;
 $215 = $edx;
 $216 = $215 << 8;
 $edx = $216;
 $217 = $esi;
 $218 = $edx;
 $219 = (($217) + ($218))|0;
 $220 = ($219>>>0)<(2048);
 if (!($220)) {
  ___assert_fail((22039|0),(21902|0),1869,(22075|0));
  // unreachable;
 }
 $221 = $esi;
 $222 = $edx;
 $223 = (($221) + ($222))|0;
 $224 = (19806 + ($223)|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $edi;
 $228 = (($226) + ($227))|0;
 $0 = $228;
 $229 = $0;
 STACKTOP = sp;return ($229|0);
}
function __ZN17TFileNameDatabase21CheckNextPathFragmentEP15TMndxFindResult($this,$pStruct1C) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CollisionIndex = 0, $FragOffs = 0, $HiBitsIndex = 0, $NameFragIndex = 0, $SaveCharIndex = 0, $pStruct40 = 0, $pbPathName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 36|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $pStruct40 = $6;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $pbPathName = $8;
 $9 = $pStruct40;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 5;
 $13 = $pStruct40;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $12 ^ $15;
 $17 = $pStruct40;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $pbPathName;
 $21 = (($20) + ($19)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $16 ^ $23;
 $25 = ((($3)) + 528|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $24 & $26;
 $NameFragIndex = $27;
 $28 = $NameFragIndex;
 $29 = ((($3)) + 504|0);
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + (($28*12)|0)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $pStruct40;
 $35 = ((($34)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33|0)==($36|0);
 if ($37) {
  $38 = ((($3)) + 504|0);
  $39 = $NameFragIndex;
  $40 = (__Z20IS_SINGLE_CHAR_MATCHR13TGenericArrayj($38,$39)|0);
  if ($40) {
   $41 = $NameFragIndex;
   $42 = ((($3)) + 504|0);
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + (($41*12)|0)|0);
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $pStruct40;
   $49 = ((($48)) + 48|0);
   HEAP32[$49>>2] = $47;
   $50 = $pStruct40;
   $51 = ((($50)) + 52|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$51>>2] = $53;
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $174 = $$pre_trunc&1;
   STACKTOP = sp;return ($174|0);
  }
  $54 = ((($3)) + 500|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = ((($3)) + 500|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $2;
   $60 = $NameFragIndex;
   $61 = ((($3)) + 504|0);
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + (($60*12)|0)|0);
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (__ZN17TFileNameDatabase11sub_1957B80EP15TMndxFindResultj($58,$59,$66)|0);
   if (!($67)) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $174 = $$pre_trunc&1;
    STACKTOP = sp;return ($174|0);
   }
  } else {
   $68 = ((($3)) + 372|0);
   $69 = $2;
   $70 = $NameFragIndex;
   $71 = ((($3)) + 504|0);
   $72 = ((($71)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + (($70*12)|0)|0);
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (__ZN16TNameIndexStruct17CheckNameFragmentEP15TMndxFindResultj($68,$69,$76)|0);
   if (!($77)) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $174 = $$pre_trunc&1;
    STACKTOP = sp;return ($174|0);
   }
  }
  $78 = $NameFragIndex;
  $79 = ((($3)) + 504|0);
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + (($78*12)|0)|0);
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $pStruct40;
  $86 = ((($85)) + 48|0);
  HEAP32[$86>>2] = $84;
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 $87 = $pStruct40;
 $88 = ((($87)) + 48|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (__ZN17TFileNameDatabase11sub_1959CB0Ej($3,$89)|0);
 $91 = (($90) + 1)|0;
 $CollisionIndex = $91;
 $92 = $CollisionIndex;
 $93 = (__ZN12TSparseArray13IsItemPresentEj($3,$92)|0);
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 $95 = $CollisionIndex;
 $96 = $pStruct40;
 $97 = ((($96)) + 48|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($95) - ($98))|0;
 $100 = (($99) - 1)|0;
 $101 = $pStruct40;
 $102 = ((($101)) + 48|0);
 HEAP32[$102>>2] = $100;
 $HiBitsIndex = -1;
 while(1) {
  $103 = ((($3)) + 208|0);
  $104 = $pStruct40;
  $105 = ((($104)) + 48|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (__ZN12TSparseArray13IsItemPresentEj($103,$106)|0);
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $HiBitsIndex;
   $110 = ($109|0)==(-1);
   if ($110) {
    $111 = ((($3)) + 208|0);
    $112 = $pStruct40;
    $113 = ((($112)) + 48|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (__ZN12TSparseArray12GetItemValueEj($111,$114)|0);
    $HiBitsIndex = $115;
   } else {
    $116 = $HiBitsIndex;
    $117 = (($116) + 1)|0;
    $HiBitsIndex = $117;
   }
   $118 = $pStruct40;
   $119 = ((($118)) + 52|0);
   $120 = HEAP32[$119>>2]|0;
   $SaveCharIndex = $120;
   $121 = $pStruct40;
   $122 = ((($121)) + 48|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $HiBitsIndex;
   $125 = (__ZN17TFileNameDatabase23GetNameFragmentOffsetExEjj($3,$123,$124)|0);
   $FragOffs = $125;
   $126 = ((($3)) + 500|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($127|0)!=(0|0);
   if ($128) {
    $129 = ((($3)) + 500|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $2;
    $132 = $FragOffs;
    $133 = (__ZN17TFileNameDatabase11sub_1957B80EP15TMndxFindResultj($130,$131,$132)|0);
    if ($133) {
     label = 19;
     break;
    }
   } else {
    $134 = ((($3)) + 372|0);
    $135 = $2;
    $136 = $FragOffs;
    $137 = (__ZN16TNameIndexStruct17CheckNameFragmentEP15TMndxFindResultj($134,$135,$136)|0);
    if ($137) {
     label = 21;
     break;
    }
   }
   $138 = $pStruct40;
   $139 = ((($138)) + 52|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $SaveCharIndex;
   $142 = ($140|0)!=($141|0);
   if ($142) {
    label = 23;
    break;
   }
  } else {
   $143 = $pStruct40;
   $144 = ((($143)) + 48|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($3)) + 312|0);
   $147 = ((($146)) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + ($145)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = $pStruct40;
   $153 = ((($152)) + 52|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $2;
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + ($154)|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158 << 24 >> 24;
   $160 = ($151|0)==($159|0);
   if ($160) {
    label = 25;
    break;
   }
  }
  $165 = $pStruct40;
  $166 = ((($165)) + 48|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 1)|0;
  HEAP32[$166>>2] = $168;
  $169 = $CollisionIndex;
  $170 = (($169) + 1)|0;
  $CollisionIndex = $170;
  $171 = $CollisionIndex;
  $172 = (__ZN12TSparseArray13IsItemPresentEj($3,$171)|0);
  $173 = ($172|0)!=(0);
  if (!($173)) {
   label = 27;
   break;
  }
 }
 if ((label|0) == 19) {
  $$expand_i1_val10 = 1;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 21) {
  $$expand_i1_val12 = 1;
  HEAP8[$0>>0] = $$expand_i1_val12;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 23) {
  $$expand_i1_val14 = 0;
  HEAP8[$0>>0] = $$expand_i1_val14;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 25) {
  $161 = $pStruct40;
  $162 = ((($161)) + 52|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + 1)|0;
  HEAP32[$162>>2] = $164;
  $$expand_i1_val16 = 1;
  HEAP8[$0>>0] = $$expand_i1_val16;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 27) {
  $$expand_i1_val18 = 0;
  HEAP8[$0>>0] = $$expand_i1_val18;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $174 = $$pre_trunc&1;
  STACKTOP = sp;return ($174|0);
 }
 return (0)|0;
}
function __ZN17TFileNameDatabase11sub_1957B80EP15TMndxFindResultj($this,$pStruct1C,$arg_4) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $arg_4 = $arg_4|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FragOffs = 0;
 var $eax = 0, $edi = 0, $pNameEntry = 0, $pStruct40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 32|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $arg_4;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $pStruct40 = $7;
 $8 = $3;
 $edi = $8;
 L1: while(1) {
  $9 = ((($4)) + 504|0);
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $edi;
  $13 = ((($4)) + 528|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $12 & $14;
  $16 = (($11) + (($15*12)|0)|0);
  $pNameEntry = $16;
  $17 = $edi;
  $18 = $pNameEntry;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==($20|0);
  if ($21) {
   $22 = $pNameEntry;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & -256;
   $26 = ($25|0)!=(-256);
   do {
    if ($26) {
     $27 = ((($4)) + 500|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)!=(0|0);
     if ($29) {
      $30 = ((($4)) + 500|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $2;
      $33 = $pNameEntry;
      $34 = ((($33)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (__ZN17TFileNameDatabase11sub_1957B80EP15TMndxFindResultj($31,$32,$35)|0);
      if ($36) {
       break;
      } else {
       label = 6;
       break L1;
      }
     } else {
      $37 = ((($4)) + 372|0);
      $38 = $2;
      $39 = $pNameEntry;
      $40 = ((($39)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (__ZN16TNameIndexStruct17CheckNameFragmentEP15TMndxFindResultj($37,$38,$41)|0);
      if ($42) {
       break;
      } else {
       label = 8;
       break L1;
      }
     }
    } else {
     $43 = $pStruct40;
     $44 = ((($43)) + 52|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $2;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + ($45)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = $pNameEntry;
     $52 = ((($51)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $53&255;
     $55 = $54 << 24 >> 24;
     $56 = ($50|0)!=($55|0);
     if ($56) {
      label = 10;
      break L1;
     }
     $57 = $pStruct40;
     $58 = ((($57)) + 52|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + 1)|0;
     HEAP32[$58>>2] = $60;
    }
   } while(0);
   $61 = $pNameEntry;
   $62 = HEAP32[$61>>2]|0;
   $edi = $62;
   $63 = $edi;
   $64 = ($63|0)==(0);
   if ($64) {
    label = 13;
    break;
   }
   $65 = $pStruct40;
   $66 = ((($65)) + 52|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $2;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($67>>>0)>=($70>>>0);
   if ($71) {
    label = 15;
    break;
   } else {
    continue;
   }
  }
  $72 = ((($4)) + 208|0);
  $73 = $edi;
  $74 = (__ZN12TSparseArray13IsItemPresentEj($72,$73)|0);
  $75 = ($74|0)!=(0);
  do {
   if ($75) {
    $76 = ((($4)) + 500|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)!=(0|0);
    $79 = $edi;
    $80 = (__ZN17TFileNameDatabase21GetNameFragmentOffsetEj($4,$79)|0);
    $FragOffs = $80;
    if ($78) {
     $81 = ((($4)) + 500|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $2;
     $84 = $FragOffs;
     $85 = (__ZN17TFileNameDatabase11sub_1957B80EP15TMndxFindResultj($82,$83,$84)|0);
     if ($85) {
      break;
     } else {
      label = 19;
      break L1;
     }
    } else {
     $86 = ((($4)) + 372|0);
     $87 = $2;
     $88 = $FragOffs;
     $89 = (__ZN16TNameIndexStruct17CheckNameFragmentEP15TMndxFindResultj($86,$87,$88)|0);
     if ($89) {
      break;
     } else {
      label = 21;
      break L1;
     }
    }
   } else {
    $90 = $edi;
    $91 = ((($4)) + 312|0);
    $92 = ((($91)) + 8|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($90)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $pStruct40;
    $98 = ((($97)) + 52|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $2;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($99)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $105 = ($96|0)!=($104|0);
    if ($105) {
     label = 23;
     break L1;
    }
    $106 = $pStruct40;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[$107>>2] = $109;
   }
  } while(0);
  $110 = $edi;
  $111 = ((($4)) + 532|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110>>>0)<=($112>>>0);
  if ($113) {
   label = 26;
   break;
  }
  $114 = $pStruct40;
  $115 = ((($114)) + 52|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $2;
  $118 = ((($117)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($116>>>0)>=($119>>>0);
  if ($120) {
   label = 28;
   break;
  }
  $121 = $edi;
  $122 = (__ZN17TFileNameDatabase11sub_1959F50Ej($4,$121)|0);
  $eax = $122;
  $123 = $eax;
  $124 = $edi;
  $125 = (($123) - ($124))|0;
  $126 = (($125) - 1)|0;
  $edi = $126;
 }
 switch (label|0) {
  case 6: {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 8: {
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 10: {
   $$expand_i1_val4 = 0;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 13: {
   $$expand_i1_val6 = 1;
   HEAP8[$0>>0] = $$expand_i1_val6;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 15: {
   $$expand_i1_val8 = 0;
   HEAP8[$0>>0] = $$expand_i1_val8;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 19: {
   $$expand_i1_val10 = 0;
   HEAP8[$0>>0] = $$expand_i1_val10;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 21: {
   $$expand_i1_val12 = 0;
   HEAP8[$0>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 23: {
   $$expand_i1_val14 = 0;
   HEAP8[$0>>0] = $$expand_i1_val14;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 26: {
   $$expand_i1_val16 = 1;
   HEAP8[$0>>0] = $$expand_i1_val16;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
  case 28: {
   $$expand_i1_val18 = 0;
   HEAP8[$0>>0] = $$expand_i1_val18;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $127 = $$pre_trunc&1;
   STACKTOP = sp;return ($127|0);
   break;
  }
 }
 return (0)|0;
}
function __ZN17TFileNameDatabase11sub_1958D70EP15TMndxFindResultj($this,$pStruct1C,$arg_4) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $arg_4 = $arg_4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $FragOffs = 0, $pNameEntry = 0, $pStruct40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $this;
 $1 = $pStruct1C;
 $2 = $arg_4;
 $3 = $0;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $pStruct40 = $6;
 while(1) {
  $7 = ((($3)) + 504|0);
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ((($3)) + 528|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $10 & $12;
  $14 = (($9) + (($13*12)|0)|0);
  $pNameEntry = $14;
  $15 = $2;
  $16 = $pNameEntry;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)==($18|0);
  if ($19) {
   $20 = $pNameEntry;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 & -256;
   $24 = ($23|0)!=(-256);
   do {
    if ($24) {
     $25 = ((($3)) + 500|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)!=(0|0);
     if ($27) {
      $28 = ((($3)) + 500|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $1;
      $31 = $pNameEntry;
      $32 = ((($31)) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      __ZN17TFileNameDatabase11sub_1958D70EP15TMndxFindResultj($29,$30,$33);
      break;
     } else {
      $34 = ((($3)) + 372|0);
      $35 = $1;
      $36 = $pNameEntry;
      $37 = ((($36)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      __ZN16TNameIndexStruct16CopyNameFragmentEP15TMndxFindResultj($34,$35,$38);
      break;
     }
    } else {
     $39 = $pStruct40;
     $40 = $pNameEntry;
     $41 = ((($40)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $42 & 255;
     $44 = $43&255;
     __ZN13TGenericArray18InsertOneItem_CHAREc($39,$44);
    }
   } while(0);
   $45 = $pNameEntry;
   $46 = HEAP32[$45>>2]|0;
   $2 = $46;
   $47 = $2;
   $48 = ($47|0)==(0);
   if ($48) {
    label = 16;
    break;
   } else {
    continue;
   }
  }
  $49 = ((($3)) + 208|0);
  $50 = $2;
  $51 = (__ZN12TSparseArray13IsItemPresentEj($49,$50)|0);
  $52 = ($51|0)!=(0);
  do {
   if ($52) {
    $53 = $2;
    $54 = (__ZN17TFileNameDatabase21GetNameFragmentOffsetEj($3,$53)|0);
    $FragOffs = $54;
    $55 = ((($3)) + 500|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)!=(0|0);
    if ($57) {
     $58 = ((($3)) + 500|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $1;
     $61 = $FragOffs;
     __ZN17TFileNameDatabase11sub_1958D70EP15TMndxFindResultj($59,$60,$61);
     break;
    } else {
     $62 = ((($3)) + 372|0);
     $63 = $1;
     $64 = $FragOffs;
     __ZN16TNameIndexStruct16CopyNameFragmentEP15TMndxFindResultj($62,$63,$64);
     break;
    }
   } else {
    $65 = $pStruct40;
    $66 = $2;
    $67 = ((($3)) + 312|0);
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + ($66)|0);
    $71 = HEAP8[$70>>0]|0;
    __ZN13TGenericArray18InsertOneItem_CHAREc($65,$71);
   }
  } while(0);
  $72 = $2;
  $73 = ((($3)) + 532|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72>>>0)<=($74>>>0);
  if ($75) {
   label = 16;
   break;
  }
  $76 = $2;
  $77 = (-1 - ($76))|0;
  $78 = $2;
  $79 = (__ZN17TFileNameDatabase11sub_1959F50Ej($3,$78)|0);
  $80 = (($77) + ($79))|0;
  $2 = $80;
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function __ZN17TFileNameDatabase11sub_1959010EP15TMndxFindResultj($this,$pStruct1C,$arg_4) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $arg_4 = $arg_4|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FragOffs = 0, $pNameEntry = 0, $pStruct40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 24|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $arg_4;
 $4 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $pStruct40 = $7;
 L1: while(1) {
  $8 = ((($4)) + 504|0);
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = ((($4)) + 528|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = (($10) + (($14*12)|0)|0);
  $pNameEntry = $15;
  $16 = $3;
  $17 = $pNameEntry;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)==($19|0);
  if ($20) {
   $21 = $pNameEntry;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 & -256;
   $25 = ($24|0)!=(-256);
   do {
    if ($25) {
     $26 = ((($4)) + 500|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)!=(0|0);
     if ($28) {
      $29 = ((($4)) + 500|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $2;
      $32 = $pNameEntry;
      $33 = ((($32)) + 8|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (__ZN17TFileNameDatabase11sub_1959010EP15TMndxFindResultj($30,$31,$34)|0);
      if ($35) {
       break;
      } else {
       label = 6;
       break L1;
      }
     } else {
      $36 = ((($4)) + 372|0);
      $37 = $2;
      $38 = $pNameEntry;
      $39 = ((($38)) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (__ZN16TNameIndexStruct24CheckAndCopyNameFragmentEP15TMndxFindResultj($36,$37,$40)|0);
      if ($41) {
       break;
      } else {
       label = 8;
       break L1;
      }
     }
    } else {
     $42 = $pNameEntry;
     $43 = ((($42)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $44 & 255;
     $46 = $45&255;
     $47 = $46 << 24 >> 24;
     $48 = $pStruct40;
     $49 = ((($48)) + 52|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $2;
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + ($50)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($47|0)!=($55|0);
     if ($56) {
      label = 10;
      break L1;
     }
     $57 = $pStruct40;
     $58 = $pNameEntry;
     $59 = ((($58)) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $60 & 255;
     $62 = $61&255;
     __ZN13TGenericArray18InsertOneItem_CHAREc($57,$62);
     $63 = $pStruct40;
     $64 = ((($63)) + 52|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + 1)|0;
     HEAP32[$64>>2] = $66;
    }
   } while(0);
   $67 = $pNameEntry;
   $68 = HEAP32[$67>>2]|0;
   $3 = $68;
   $69 = $3;
   $70 = ($69|0)==(0);
   if ($70) {
    label = 13;
    break;
   }
  } else {
   $71 = ((($4)) + 208|0);
   $72 = $3;
   $73 = (__ZN12TSparseArray13IsItemPresentEj($71,$72)|0);
   $74 = ($73|0)!=(0);
   $75 = $3;
   do {
    if ($74) {
     $76 = (__ZN17TFileNameDatabase21GetNameFragmentOffsetEj($4,$75)|0);
     $FragOffs = $76;
     $77 = ((($4)) + 500|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)!=(0|0);
     if ($79) {
      $80 = ((($4)) + 500|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $2;
      $83 = $FragOffs;
      $84 = (__ZN17TFileNameDatabase11sub_1959010EP15TMndxFindResultj($81,$82,$83)|0);
      if ($84) {
       break;
      } else {
       label = 17;
       break L1;
      }
     } else {
      $85 = ((($4)) + 372|0);
      $86 = $2;
      $87 = $FragOffs;
      $88 = (__ZN16TNameIndexStruct24CheckAndCopyNameFragmentEP15TMndxFindResultj($85,$86,$87)|0);
      if ($88) {
       break;
      } else {
       label = 19;
       break L1;
      }
     }
    } else {
     $89 = ((($4)) + 312|0);
     $90 = ((($89)) + 8|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($91) + ($75)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93 << 24 >> 24;
     $95 = $pStruct40;
     $96 = ((($95)) + 52|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $2;
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + ($97)|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101 << 24 >> 24;
     $103 = ($94|0)!=($102|0);
     if ($103) {
      label = 21;
      break L1;
     }
     $104 = $pStruct40;
     $105 = $3;
     $106 = ((($4)) + 312|0);
     $107 = ((($106)) + 8|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (($108) + ($105)|0);
     $110 = HEAP8[$109>>0]|0;
     __ZN13TGenericArray18InsertOneItem_CHAREc($104,$110);
     $111 = $pStruct40;
     $112 = ((($111)) + 52|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = (($113) + 1)|0;
     HEAP32[$112>>2] = $114;
    }
   } while(0);
   $115 = $3;
   $116 = ((($4)) + 532|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($115>>>0)<=($117>>>0);
   if ($118) {
    label = 24;
    break;
   }
   $119 = $3;
   $120 = (-1 - ($119))|0;
   $121 = $3;
   $122 = (__ZN17TFileNameDatabase11sub_1959F50Ej($4,$121)|0);
   $123 = (($120) + ($122))|0;
   $3 = $123;
  }
  $124 = $pStruct40;
  $125 = ((($124)) + 52|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $2;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($126>>>0)>=($129>>>0);
  if ($130) {
   label = 27;
   break;
  }
 }
 if ((label|0) == 6) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 8) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 10) {
  $$expand_i1_val4 = 0;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 13) {
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 17) {
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 19) {
  $$expand_i1_val10 = 0;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 21) {
  $$expand_i1_val12 = 0;
  HEAP8[$0>>0] = $$expand_i1_val12;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 24) {
  $$expand_i1_val14 = 1;
  HEAP8[$0>>0] = $$expand_i1_val14;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 else if ((label|0) == 27) {
  $131 = $2;
  $132 = $3;
  __ZN17TFileNameDatabase11sub_1958D70EP15TMndxFindResultj($4,$131,$132);
  $$expand_i1_val16 = 1;
  HEAP8[$0>>0] = $$expand_i1_val16;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $133 = $$pre_trunc&1;
  STACKTOP = sp;return ($133|0);
 }
 return (0)|0;
}
function __ZN17TFileNameDatabase11sub_1959460EP15TMndxFindResult($this,$pStruct1C) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $CollisionIndex = 0, $FragOffs = 0, $NewMaxItemCount = 0, $PathStop = 0, $edi = 0, $pLastStop = 0, $pPathStop = 0, $pStruct40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp + 56|0;
 $PathStop = sp + 20|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $pStruct40 = $6;
 $7 = $pStruct40;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(4);
 if ($10) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $256 = $$pre_trunc&1;
  STACKTOP = sp;return ($256|0);
 }
 $11 = $pStruct40;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(2);
 if ($14) {
  $15 = $pStruct40;
  __ZN9TStruct4017InitSearchBuffersEv($15);
  while(1) {
   $16 = $pStruct40;
   $17 = ((($16)) + 52|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $2;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($18>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $2;
   $24 = (__ZN17TFileNameDatabase11sub_1958B00EP15TMndxFindResult($3,$23)|0);
   if (!($24)) {
    label = 7;
    break;
   }
  }
  if ((label|0) == 7) {
   $25 = $pStruct40;
   $26 = ((($25)) + 60|0);
   HEAP32[$26>>2] = 4;
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $256 = $$pre_trunc&1;
   STACKTOP = sp;return ($256|0);
  }
  $27 = $pStruct40;
  $28 = ((($27)) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$PathStop>>2] = $29;
  $30 = ((($PathStop)) + 4|0);
  HEAP32[$30>>2] = 0;
  $31 = $pStruct40;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($PathStop)) + 8|0);
  HEAP32[$34>>2] = $33;
  $35 = ((($PathStop)) + 12|0);
  HEAP32[$35>>2] = -1;
  $36 = ((($PathStop)) + 16|0);
  HEAP32[$36>>2] = -1;
  $37 = $pStruct40;
  $38 = ((($37)) + 24|0);
  __ZN13TGenericArray23InsertOneItem_PATH_STOPER10_PATH_STOP($38,$PathStop);
  $39 = $pStruct40;
  $40 = ((($39)) + 56|0);
  HEAP32[$40>>2] = 1;
  $41 = ((($3)) + 104|0);
  $42 = $pStruct40;
  $43 = ((($42)) + 48|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (__ZN12TSparseArray13IsItemPresentEj($41,$44)|0);
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $pStruct40;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $2;
   $51 = ((($50)) + 12|0);
   HEAP32[$51>>2] = $49;
   $52 = $pStruct40;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $2;
   $56 = ((($55)) + 16|0);
   HEAP32[$56>>2] = $54;
   $57 = ((($3)) + 104|0);
   $58 = $pStruct40;
   $59 = ((($58)) + 48|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (__ZN12TSparseArray12GetItemValueEj($57,$60)|0);
   $62 = $2;
   $63 = ((($62)) + 20|0);
   HEAP32[$63>>2] = $61;
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $256 = $$pre_trunc&1;
   STACKTOP = sp;return ($256|0);
  }
 }
 while(1) {
  $64 = $pStruct40;
  $65 = ((($64)) + 56|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $pStruct40;
  $68 = ((($67)) + 24|0);
  $69 = ((($68)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($66|0)==($70|0);
  if ($71) {
   $72 = $pStruct40;
   $73 = ((($72)) + 24|0);
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $pStruct40;
   $77 = ((($76)) + 24|0);
   $78 = ((($77)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($75) + (($79*20)|0)|0);
   $81 = ((($80)) + -20|0);
   $pLastStop = $81;
   $82 = $pLastStop;
   $83 = HEAP32[$82>>2]|0;
   $84 = (__ZN17TFileNameDatabase11sub_1959CB0Ej($3,$83)|0);
   $85 = (($84) + 1)|0;
   $CollisionIndex = $85;
   $86 = $CollisionIndex;
   $87 = $pLastStop;
   $88 = HEAP32[$87>>2]|0;
   $89 = (($86) - ($88))|0;
   $90 = (($89) - 1)|0;
   HEAP32[$PathStop>>2] = $90;
   $91 = $CollisionIndex;
   $92 = ((($PathStop)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ((($PathStop)) + 8|0);
   HEAP32[$93>>2] = 0;
   $94 = ((($PathStop)) + 12|0);
   HEAP32[$94>>2] = -1;
   $95 = ((($PathStop)) + 16|0);
   HEAP32[$95>>2] = -1;
   $96 = $pStruct40;
   $97 = ((($96)) + 24|0);
   __ZN13TGenericArray23InsertOneItem_PATH_STOPER10_PATH_STOP($97,$PathStop);
  }
  $98 = $pStruct40;
  $99 = ((($98)) + 24|0);
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $pStruct40;
  $103 = ((($102)) + 56|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($101) + (($104*20)|0)|0);
  $pPathStop = $105;
  $106 = $pPathStop;
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + 1)|0;
  HEAP32[$107>>2] = $109;
  $110 = (__ZN12TSparseArray13IsItemPresentEj($3,$108)|0);
  $111 = ($110|0)!=(0);
  $112 = $pStruct40;
  $113 = ((($112)) + 56|0);
  $114 = HEAP32[$113>>2]|0;
  if (!($111)) {
   $198 = ($114|0)==(1);
   $199 = $pStruct40;
   if ($198) {
    label = 27;
    break;
   }
   $201 = ((($199)) + 24|0);
   $202 = ((($201)) + 4|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $pStruct40;
   $205 = ((($204)) + 56|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($203) + (($206*20)|0)|0);
   $208 = ((($207)) + -20|0);
   $pPathStop = $208;
   $209 = $pPathStop;
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + 1)|0;
   HEAP32[$209>>2] = $211;
   $212 = $pStruct40;
   $213 = ((($212)) + 24|0);
   $214 = ((($213)) + 4|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $pStruct40;
   $217 = ((($216)) + 56|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($215) + (($218*20)|0)|0);
   $220 = ((($219)) + -40|0);
   $pPathStop = $220;
   $221 = $pPathStop;
   $222 = ((($221)) + 8|0);
   $223 = HEAP32[$222>>2]|0;
   $edi = $223;
   $224 = $edi;
   $225 = $pStruct40;
   $226 = ((($225)) + 16|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($224>>>0)>($227>>>0);
   if ($228) {
    $229 = $edi;
    $NewMaxItemCount = $229;
    $230 = $pStruct40;
    $231 = ((($230)) + 16|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $edi;
    $234 = (($233>>>0) / 2)&-1;
    $235 = ($232>>>0)>($234>>>0);
    do {
     if ($235) {
      $236 = $pStruct40;
      $237 = ((($236)) + 16|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ($238>>>0)>(2147483647);
      if ($239) {
       $NewMaxItemCount = -1;
       break;
      } else {
       $240 = $pStruct40;
       $241 = ((($240)) + 16|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = $pStruct40;
       $244 = ((($243)) + 16|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = (($242) + ($245))|0;
       $NewMaxItemCount = $246;
       break;
      }
     }
    } while(0);
    $247 = $pStruct40;
    $248 = $NewMaxItemCount;
    __ZN13TGenericArray17SetMaxItems_CHARSEj($247,$248);
   }
   $249 = $edi;
   $250 = $pStruct40;
   $251 = ((($250)) + 12|0);
   HEAP32[$251>>2] = $249;
   $252 = $pStruct40;
   $253 = ((($252)) + 56|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($254) + -1)|0;
   HEAP32[$253>>2] = $255;
   continue;
  }
  $115 = (($114) + 1)|0;
  HEAP32[$113>>2] = $115;
  $116 = ((($3)) + 208|0);
  $117 = $pPathStop;
  $118 = HEAP32[$117>>2]|0;
  $119 = (__ZN12TSparseArray13IsItemPresentEj($116,$118)|0);
  $120 = ($119|0)!=(0);
  do {
   if ($120) {
    $121 = $pPathStop;
    $122 = ((($121)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)==(-1);
    if ($124) {
     $125 = ((($3)) + 208|0);
     $126 = $pPathStop;
     $127 = HEAP32[$126>>2]|0;
     $128 = (__ZN12TSparseArray12GetItemValueEj($125,$127)|0);
     $129 = $pPathStop;
     $130 = ((($129)) + 12|0);
     HEAP32[$130>>2] = $128;
    } else {
     $131 = $pPathStop;
     $132 = ((($131)) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($133) + 1)|0;
     HEAP32[$132>>2] = $134;
    }
    $135 = $pPathStop;
    $136 = HEAP32[$135>>2]|0;
    $137 = $pPathStop;
    $138 = ((($137)) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (__ZN17TFileNameDatabase23GetNameFragmentOffsetExEjj($3,$136,$139)|0);
    $FragOffs = $140;
    $141 = ((($3)) + 500|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)!=(0|0);
    if ($143) {
     $144 = ((($3)) + 500|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $2;
     $147 = $FragOffs;
     __ZN17TFileNameDatabase11sub_1958D70EP15TMndxFindResultj($145,$146,$147);
     break;
    } else {
     $148 = ((($3)) + 372|0);
     $149 = $2;
     $150 = $FragOffs;
     __ZN16TNameIndexStruct16CopyNameFragmentEP15TMndxFindResultj($148,$149,$150);
     break;
    }
   } else {
    $151 = $pStruct40;
    $152 = $pPathStop;
    $153 = HEAP32[$152>>2]|0;
    $154 = ((($3)) + 312|0);
    $155 = ((($154)) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (($156) + ($153)|0);
    $158 = HEAP8[$157>>0]|0;
    __ZN13TGenericArray18InsertOneItem_CHAREc($151,$158);
   }
  } while(0);
  $159 = $pStruct40;
  $160 = ((($159)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $pPathStop;
  $163 = ((($162)) + 8|0);
  HEAP32[$163>>2] = $161;
  $164 = ((($3)) + 104|0);
  $165 = $pPathStop;
  $166 = HEAP32[$165>>2]|0;
  $167 = (__ZN12TSparseArray13IsItemPresentEj($164,$166)|0);
  $168 = ($167|0)!=(0);
  if ($168) {
   break;
  }
 }
 if ((label|0) == 27) {
  $200 = ((($199)) + 60|0);
  HEAP32[$200>>2] = 4;
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $256 = $$pre_trunc&1;
  STACKTOP = sp;return ($256|0);
 }
 $169 = $pPathStop;
 $170 = ((($169)) + 16|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)==(-1);
 if ($172) {
  $173 = ((($3)) + 104|0);
  $174 = $pPathStop;
  $175 = HEAP32[$174>>2]|0;
  $176 = (__ZN12TSparseArray12GetItemValueEj($173,$175)|0);
  $177 = $pPathStop;
  $178 = ((($177)) + 16|0);
  HEAP32[$178>>2] = $176;
 } else {
  $179 = $pPathStop;
  $180 = ((($179)) + 16|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + 1)|0;
  HEAP32[$180>>2] = $182;
 }
 $183 = $pStruct40;
 $184 = ((($183)) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $2;
 $187 = ((($186)) + 12|0);
 HEAP32[$187>>2] = $185;
 $188 = $pStruct40;
 $189 = ((($188)) + 12|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $2;
 $192 = ((($191)) + 16|0);
 HEAP32[$192>>2] = $190;
 $193 = $pPathStop;
 $194 = ((($193)) + 16|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $2;
 $197 = ((($196)) + 20|0);
 HEAP32[$197>>2] = $195;
 $$expand_i1_val6 = 1;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $256 = $$pre_trunc&1;
 STACKTOP = sp;return ($256|0);
}
function __ZN17TFileNameDatabase11sub_1958B00EP15TMndxFindResult($this,$pStruct1C) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CollisionIndex = 0, $FragOffs = 0, $FragmentOffset = 0, $ItemIndex = 0, $SaveCharIndex = 0, $pStruct40 = 0;
 var $pbPathName = 0, $var_4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = sp + 40|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $pStruct40 = $6;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $pbPathName = $8;
 $9 = $pStruct40;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $pbPathName;
 $13 = (($12) + ($11)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $pStruct40;
 $17 = ((($16)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 5;
 $20 = $15 ^ $19;
 $21 = $pStruct40;
 $22 = ((($21)) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20 ^ $23;
 $ItemIndex = $24;
 $25 = $ItemIndex;
 $26 = ((($3)) + 528|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25 & $27;
 $ItemIndex = $28;
 $29 = $pStruct40;
 $30 = ((($29)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $ItemIndex;
 $33 = ((($3)) + 504|0);
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*12)|0)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($31|0)==($37|0);
 if ($38) {
  $39 = $ItemIndex;
  $40 = ((($3)) + 504|0);
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*12)|0)|0);
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $FragmentOffset = $45;
  $46 = $FragmentOffset;
  $47 = $46 & -256;
  $48 = ($47|0)==(-256);
  if ($48) {
   $49 = $pStruct40;
   $50 = $FragmentOffset;
   $51 = $50&255;
   __ZN13TGenericArray18InsertOneItem_CHAREc($49,$51);
   $52 = $ItemIndex;
   $53 = ((($3)) + 504|0);
   $54 = ((($53)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + (($52*12)|0)|0);
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $pStruct40;
   $60 = ((($59)) + 48|0);
   HEAP32[$60>>2] = $58;
   $61 = $pStruct40;
   $62 = ((($61)) + 52|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 1)|0;
   HEAP32[$62>>2] = $64;
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $182 = $$pre_trunc&1;
   STACKTOP = sp;return ($182|0);
  }
  $65 = ((($3)) + 500|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0|0);
  if ($67) {
   $68 = ((($3)) + 500|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $2;
   $71 = $FragmentOffset;
   $72 = (__ZN17TFileNameDatabase11sub_1959010EP15TMndxFindResultj($69,$70,$71)|0);
   if (!($72)) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $182 = $$pre_trunc&1;
    STACKTOP = sp;return ($182|0);
   }
  } else {
   $73 = ((($3)) + 372|0);
   $74 = $2;
   $75 = $FragmentOffset;
   $76 = (__ZN16TNameIndexStruct24CheckAndCopyNameFragmentEP15TMndxFindResultj($73,$74,$75)|0);
   if (!($76)) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $182 = $$pre_trunc&1;
    STACKTOP = sp;return ($182|0);
   }
  }
  $77 = $ItemIndex;
  $78 = ((($3)) + 504|0);
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + (($77*12)|0)|0);
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $pStruct40;
  $85 = ((($84)) + 48|0);
  HEAP32[$85>>2] = $83;
  $$expand_i1_val6 = 1;
  HEAP8[$0>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 $86 = $pStruct40;
 $87 = ((($86)) + 48|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (__ZN17TFileNameDatabase11sub_1959CB0Ej($3,$88)|0);
 $90 = (($89) + 1)|0;
 $CollisionIndex = $90;
 $91 = $CollisionIndex;
 $92 = (__ZN12TSparseArray13IsItemPresentEj($3,$91)|0);
 $93 = ($92|0)!=(0);
 if (!($93)) {
  $$expand_i1_val8 = 0;
  HEAP8[$0>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 $94 = $CollisionIndex;
 $95 = $pStruct40;
 $96 = ((($95)) + 48|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($94) - ($97))|0;
 $99 = (($98) - 1)|0;
 $100 = $pStruct40;
 $101 = ((($100)) + 48|0);
 HEAP32[$101>>2] = $99;
 $var_4 = -1;
 while(1) {
  $102 = ((($3)) + 208|0);
  $103 = $pStruct40;
  $104 = ((($103)) + 48|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (__ZN12TSparseArray13IsItemPresentEj($102,$105)|0);
  $107 = ($106|0)!=(0);
  if ($107) {
   $108 = $var_4;
   $109 = ($108|0)==(-1);
   if ($109) {
    $110 = ((($3)) + 208|0);
    $111 = $pStruct40;
    $112 = ((($111)) + 48|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (__ZN12TSparseArray12GetItemValueEj($110,$113)|0);
    $var_4 = $114;
   } else {
    $115 = $var_4;
    $116 = (($115) + 1)|0;
    $var_4 = $116;
   }
   $117 = $pStruct40;
   $118 = ((($117)) + 52|0);
   $119 = HEAP32[$118>>2]|0;
   $SaveCharIndex = $119;
   $120 = $pStruct40;
   $121 = ((($120)) + 48|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $var_4;
   $124 = (__ZN17TFileNameDatabase23GetNameFragmentOffsetExEjj($3,$122,$123)|0);
   $FragOffs = $124;
   $125 = ((($3)) + 500|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)!=(0|0);
   if ($127) {
    $128 = ((($3)) + 500|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $2;
    $131 = $FragOffs;
    $132 = (__ZN17TFileNameDatabase11sub_1959010EP15TMndxFindResultj($129,$130,$131)|0);
    if ($132) {
     label = 19;
     break;
    }
   } else {
    $133 = ((($3)) + 372|0);
    $134 = $2;
    $135 = $FragOffs;
    $136 = (__ZN16TNameIndexStruct24CheckAndCopyNameFragmentEP15TMndxFindResultj($133,$134,$135)|0);
    if ($136) {
     label = 21;
     break;
    }
   }
   $137 = $SaveCharIndex;
   $138 = $pStruct40;
   $139 = ((($138)) + 52|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($137|0)!=($140|0);
   if ($141) {
    label = 23;
    break;
   }
  } else {
   $142 = $pStruct40;
   $143 = ((($142)) + 48|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($3)) + 312|0);
   $146 = ((($145)) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + ($144)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $pStruct40;
   $152 = ((($151)) + 52|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $2;
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + ($153)|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157 << 24 >> 24;
   $159 = ($150|0)==($158|0);
   if ($159) {
    label = 25;
    break;
   }
  }
  $173 = $pStruct40;
  $174 = ((($173)) + 48|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($175) + 1)|0;
  HEAP32[$174>>2] = $176;
  $177 = $CollisionIndex;
  $178 = (($177) + 1)|0;
  $CollisionIndex = $178;
  $179 = $CollisionIndex;
  $180 = (__ZN12TSparseArray13IsItemPresentEj($3,$179)|0);
  $181 = ($180|0)!=(0);
  if (!($181)) {
   label = 27;
   break;
  }
 }
 if ((label|0) == 19) {
  $$expand_i1_val10 = 1;
  HEAP8[$0>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 else if ((label|0) == 21) {
  $$expand_i1_val12 = 1;
  HEAP8[$0>>0] = $$expand_i1_val12;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 else if ((label|0) == 23) {
  $$expand_i1_val14 = 0;
  HEAP8[$0>>0] = $$expand_i1_val14;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 else if ((label|0) == 25) {
  $160 = $pStruct40;
  $161 = $pStruct40;
  $162 = ((($161)) + 48|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ((($3)) + 312|0);
  $165 = ((($164)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + ($163)|0);
  $168 = HEAP8[$167>>0]|0;
  __ZN13TGenericArray18InsertOneItem_CHAREc($160,$168);
  $169 = $pStruct40;
  $170 = ((($169)) + 52|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + 1)|0;
  HEAP32[$170>>2] = $172;
  $$expand_i1_val16 = 1;
  HEAP8[$0>>0] = $$expand_i1_val16;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 else if ((label|0) == 27) {
  $$expand_i1_val18 = 0;
  HEAP8[$0>>0] = $$expand_i1_val18;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $182 = $$pre_trunc&1;
  STACKTOP = sp;return ($182|0);
 }
 return (0)|0;
}
function __ZN17TFileNameDatabase18FindFileInDatabaseEP15TMndxFindResult($this,$pStruct1C) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pStruct40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 12|0;
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $pStruct40 = $6;
 $7 = $pStruct40;
 $8 = ((($7)) + 48|0);
 HEAP32[$8>>2] = 0;
 $9 = $pStruct40;
 $10 = ((($9)) + 52|0);
 HEAP32[$10>>2] = 0;
 $11 = $pStruct40;
 $12 = ((($11)) + 60|0);
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15>>>0)>(0);
 L1: do {
  if ($16) {
   while(1) {
    $17 = $pStruct40;
    $18 = ((($17)) + 52|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $2;
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19>>>0)<($22>>>0);
    if (!($23)) {
     break L1;
    }
    $24 = $2;
    $25 = (__ZN17TFileNameDatabase21CheckNextPathFragmentEP15TMndxFindResult($3,$24)|0);
    if (!($25)) {
     break;
    }
   }
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $48 = $$pre_trunc&1;
   STACKTOP = sp;return ($48|0);
  }
 } while(0);
 $26 = ((($3)) + 104|0);
 $27 = $pStruct40;
 $28 = ((($27)) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (__ZN12TSparseArray13IsItemPresentEj($26,$29)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $2;
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $2;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $2;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $38;
  $41 = ((($3)) + 104|0);
  $42 = $pStruct40;
  $43 = ((($42)) + 48|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (__ZN12TSparseArray12GetItemValueEj($41,$44)|0);
  $46 = $2;
  $47 = ((($46)) + 20|0);
  HEAP32[$47>>2] = $45;
  $$expand_i1_val4 = 1;
  HEAP8[$0>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $48 = $$pre_trunc&1;
  STACKTOP = sp;return ($48|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $48 = $$pre_trunc&1;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function __ZN17TFileNameDatabase14LoadFromStreamER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $dwBitMask = 0, $nError = 0;
 var $pNextDB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $dwBitMask = sp + 16|0;
 $1 = $this;
 $2 = $InStream;
 $5 = $1;
 $6 = $2;
 $7 = (__ZN12TSparseArray23LoadFromStream_ExchangeER11TByteStream($5,$6)|0);
 $nError = $7;
 $8 = $nError;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $nError;
  $0 = $10;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $11 = ((($5)) + 104|0);
 $12 = $2;
 $13 = (__ZN12TSparseArray23LoadFromStream_ExchangeER11TByteStream($11,$12)|0);
 $nError = $13;
 $14 = $nError;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $nError;
  $0 = $16;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $17 = ((($5)) + 208|0);
 $18 = $2;
 $19 = (__ZN12TSparseArray23LoadFromStream_ExchangeER11TByteStream($17,$18)|0);
 $nError = $19;
 $20 = $nError;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $nError;
  $0 = $22;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $23 = ((($5)) + 312|0);
 $24 = $2;
 $25 = (__ZN13TGenericArray14LoadBytes_CopyER11TByteStream($23,$24)|0);
 $nError = $25;
 $26 = $nError;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $nError;
  $0 = $28;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $29 = ((($5)) + 336|0);
 $30 = $2;
 $31 = (__ZN14TBitEntryArray23LoadFromStream_ExchangeER11TByteStream($29,$30)|0);
 $nError = $31;
 $32 = $nError;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $nError;
  $0 = $34;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $35 = ((($5)) + 372|0);
 $36 = $2;
 $37 = (__ZN16TNameIndexStruct23LoadFromStream_ExchangeER11TByteStream($35,$36)|0);
 $nError = $37;
 $38 = $nError;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $nError;
  $0 = $40;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $41 = ((($5)) + 208|0);
 $42 = ((($41)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = ((($5)) + 372|0);
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = (__Znwj(576)|0);
   __THREW__ = 0;
   invoke_vi(89,($49|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $58 = ___cxa_find_matching_catch_2()|0;
    $59 = tempRet0;
    $3 = $58;
    $4 = $59;
    __ZdlPv($49);
    $60 = $3;
    $61 = $4;
    ___resumeException($60|0);
    // unreachable;
   }
   $pNextDB = $49;
   $52 = ((($5)) + 500|0);
   $53 = $pNextDB;
   $54 = (__ZN20TFileNameDatabasePtr11SetDatabaseEP17TFileNameDatabase($52,$53)|0);
   $nError = $54;
   $55 = $nError;
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = $nError;
    $0 = $57;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   }
   $62 = ((($5)) + 500|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(0|0);
   if ($64) {
    $0 = 12;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   }
   $65 = ((($5)) + 500|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $2;
   $68 = (__ZN17TFileNameDatabase14LoadFromStreamER11TByteStream($66,$67)|0);
   $nError = $68;
   $69 = $nError;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $nError;
    $0 = $71;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   }
  }
 }
 $72 = ((($5)) + 504|0);
 $73 = $2;
 $74 = (__ZN13TGenericArray22LoadFragmentInfos_CopyER11TByteStream($72,$73)|0);
 $nError = $74;
 $75 = $nError;
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = $nError;
  $0 = $77;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $78 = ((($5)) + 504|0);
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) - 1)|0;
 $82 = ((($5)) + 528|0);
 HEAP32[$82>>2] = $81;
 $83 = $2;
 $84 = ((($5)) + 532|0);
 $85 = (__ZN11TByteStream14GetValue_DWORDERj($83,$84)|0);
 $nError = $85;
 $86 = $nError;
 $87 = ($86|0)!=(0);
 if ($87) {
  $88 = $nError;
  $0 = $88;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $89 = $2;
 $90 = (__ZN11TByteStream14GetValue_DWORDERj($89,$dwBitMask)|0);
 $nError = $90;
 $91 = $nError;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $nError;
  $0 = $93;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 } else {
  $94 = ((($5)) + 536|0);
  $95 = HEAP32[$dwBitMask>>2]|0;
  $96 = (__ZN9TStruct1011sub_1957800Ej($94,$95)|0);
  $0 = $96;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function __ZN20TFileNameDatabasePtr11SetDatabaseEP17TFileNameDatabase($this,$pNewDB) {
 $this = $this|0;
 $pNewDB = $pNewDB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $this;
 $2 = $pNewDB;
 $5 = $1;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$5>>2]|0;
  $9 = $2;
  $10 = ($8|0)==($9|0);
  if ($10) {
   $0 = 22;
   $22 = $0;
   STACKTOP = sp;return ($22|0);
  }
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   $13 = HEAP32[$5>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    __THREW__ = 0;
    invoke_vi(90,($13|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch_2()|0;
     $18 = tempRet0;
     $3 = $17;
     $4 = $18;
     __ZdlPv($13);
     $19 = $3;
     $20 = $4;
     ___resumeException($19|0);
     // unreachable;
    } else {
     __ZdlPv($13);
     break;
    }
   }
  }
 } while(0);
 $21 = $2;
 HEAP32[$5>>2] = $21;
 $0 = 0;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN17TFileNameDatabase23LoadFromStream_ExchangeER11TByteStream($this,$InStream) {
 $this = $this|0;
 $InStream = $InStream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Pointer = 0, $TempDatabase = 0, $dwSignature = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $TempDatabase = sp + 24|0;
 $Pointer = sp + 20|0;
 $1 = $this;
 $2 = $InStream;
 $6 = $1;
 __ZN17TFileNameDatabaseC2Ev($TempDatabase);
 $7 = $2;
 __THREW__ = 0;
 $8 = (invoke_iiii(91,($7|0),4,($Pointer|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $nError = $8;
  $11 = $nError;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $nError;
   $0 = $13;
   $5 = 1;
   __ZN17TFileNameDatabaseD2Ev($TempDatabase);
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
  $18 = HEAP32[$Pointer>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $dwSignature = $19;
  $20 = $dwSignature;
  $21 = ($20|0)!=(5390669);
  if ($21) {
   $0 = 1000;
   $5 = 1;
   __ZN17TFileNameDatabaseD2Ev($TempDatabase);
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
  $22 = $2;
  __THREW__ = 0;
  $23 = (invoke_iii(92,($TempDatabase|0),($22|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $nError = $23;
   $26 = $nError;
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $nError;
    $0 = $28;
    $5 = 1;
    __ZN17TFileNameDatabaseD2Ev($TempDatabase);
    $35 = $0;
    STACKTOP = sp;return ($35|0);
   }
   $29 = ((($6)) + 552|0);
   $30 = $2;
   __THREW__ = 0;
   invoke_vii(93,($29|0),($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    __THREW__ = 0;
    invoke_vii(94,($6|0),($TempDatabase|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if (!($34)) {
     $0 = 0;
     $5 = 1;
     __ZN17TFileNameDatabaseD2Ev($TempDatabase);
     $35 = $0;
     STACKTOP = sp;return ($35|0);
    }
   }
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $3 = $14;
 $4 = $15;
 __THREW__ = 0;
 invoke_vi(90,($TempDatabase|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $38 = ___cxa_find_matching_catch_3(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $3;
  $37 = $4;
  ___resumeException($36|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN20TFileNameDatabasePtrC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN20TFileNameDatabasePtrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(90,($4|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZdlPv($4);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 }
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN20TFileNameDatabasePtr18FindFileInDatabaseEP15TMndxFindResult($this,$pStruct1C) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $1;
 $nError = 0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 22;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $6 = $2;
 $7 = (__ZN15TMndxFindResult14CreateStruct40Ev($6)|0);
 $nError = $7;
 $8 = $nError;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $nError;
  $0 = $10;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = $2;
 $13 = (__ZN17TFileNameDatabase18FindFileInDatabaseEP15TMndxFindResult($11,$12)|0);
 if (!($13)) {
  $nError = 2;
 }
 $14 = $2;
 __ZN15TMndxFindResult12FreeStruct40Ev($14);
 $15 = $nError;
 $0 = $15;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __ZN20TFileNameDatabasePtr11sub_1956CE0EP15TMndxFindResultPb($this,$pStruct1C,$pbFindResult) {
 $this = $this|0;
 $pStruct1C = $pStruct1C|0;
 $pbFindResult = $pbFindResult|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $nError = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $this;
 $2 = $pStruct1C;
 $3 = $pbFindResult;
 $4 = $1;
 $nError = 0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 22;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $7 = $2;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $2;
  $12 = (__ZN15TMndxFindResult14CreateStruct40Ev($11)|0);
  $nError = $12;
  $13 = $nError;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $nError;
   $0 = $15;
   $22 = $0;
   STACKTOP = sp;return ($22|0);
  }
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = $2;
 $18 = (__ZN17TFileNameDatabase11sub_1959460EP15TMndxFindResult($16,$17)|0);
 $19 = $3;
 $20 = $18&1;
 HEAP8[$19>>0] = $20;
 $21 = $nError;
 $0 = $21;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN20TFileNameDatabasePtr16GetFileNameCountEPj($this,$PtrFileNameCount) {
 $this = $this|0;
 $PtrFileNameCount = $PtrFileNameCount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $this;
 $2 = $PtrFileNameCount;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 22;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 104|0);
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  HEAP32[$10>>2] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN20TFileNameDatabasePtr14CreateDatabaseEPhj($this,$pbMarData,$cbMarData) {
 $this = $this|0;
 $pbMarData = $pbMarData|0;
 $cbMarData = $cbMarData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ByteStream = 0, $nError = 0, $or$cond = 0, $pDatabase = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $ByteStream = sp + 16|0;
 $1 = $this;
 $2 = $pbMarData;
 $3 = $cbMarData;
 $6 = $1;
 __ZN11TByteStreamC2Ev($ByteStream);
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $9 = $3;
 $10 = ($9|0)!=(0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $0 = 22;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $11 = (__Znwj(576)|0);
 __THREW__ = 0;
 invoke_vi(89,($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $4 = $16;
  $5 = $17;
  __ZdlPv($11);
  $18 = $4;
  $19 = $5;
  ___resumeException($18|0);
  // unreachable;
 }
 $pDatabase = $11;
 $14 = $pDatabase;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $0 = 12;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $20 = $2;
 $21 = $3;
 $22 = (__ZN11TByteStream13SetByteBufferEPhj($ByteStream,$20,$21)|0);
 $nError = $22;
 $23 = $nError;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $nError;
  $0 = $25;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $26 = $pDatabase;
 $27 = (__ZN17TFileNameDatabase23LoadFromStream_ExchangeER11TByteStream($26,$ByteStream)|0);
 $nError = $27;
 $28 = $nError;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $nError;
  $0 = $30;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $31 = $pDatabase;
  HEAP32[$6>>2] = $31;
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __Z15FindMndxPackageP17TRootHandler_MNDXPKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $nLength = 0, $nMaxLength = 0, $pMatching = 0, $pPackage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pRootHandler;
 $1 = $szFileName;
 $pMatching = 0;
 $nMaxLength = 0;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $nLength = $3;
 $4 = $0;
 $5 = ((($4)) + 116|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((22087|0),(21902|0),2936,(22119|0));
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 116|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $pPackage = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $0;
  $14 = ((($13)) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($12>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $pPackage;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $pPackage;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $nLength;
   $26 = ($24>>>0)<($25>>>0);
   if ($26) {
    $27 = $pPackage;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $nMaxLength;
    $31 = ($29>>>0)>($30>>>0);
    if ($31) {
     $32 = $1;
     $33 = $pPackage;
     $34 = HEAP32[$33>>2]|0;
     $35 = $pPackage;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (_strncmp($32,$34,$37)|0);
     $39 = ($38|0)!=(0);
     if (!($39)) {
      $40 = $pPackage;
      $pMatching = $40;
      $41 = $pPackage;
      $42 = ((($41)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $nMaxLength = $43;
     }
    }
   }
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
  $46 = $pPackage;
  $47 = ((($46)) + 8|0);
  $pPackage = $47;
 }
 $48 = $pMatching;
 STACKTOP = sp;return ($48|0);
}
function __Z14SearchMndxInfoP17TRootHandler_MNDXPKcjPP21_CASC_ROOT_ENTRY_MNDX($pRootHandler,$szFileName,$dwPackage,$ppRootEntry) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 $dwPackage = $dwPackage|0;
 $ppRootEntry = $ppRootEntry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $Struct1C = 0, $pMndxInfo = 0, $pRootEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $Struct1C = sp + 12|0;
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $dwPackage;
 $4 = $ppRootEntry;
 $8 = $1;
 $9 = ((($8)) + 32|0);
 $pMndxInfo = $9;
 __ZN15TMndxFindResultC2Ev($Struct1C);
 $10 = $pMndxInfo;
 $11 = ((($10)) + 72|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 do {
  if ($13) {
   $14 = $2;
   $15 = $2;
   __THREW__ = 0;
   $16 = (invoke_ii(95,($15|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __THREW__ = 0;
    (invoke_iiii(96,($Struct1C|0),($14|0),($16|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $21 = $pMndxInfo;
     $22 = ((($21)) + 64|0);
     $23 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     $24 = (invoke_iii(97,($23|0),($Struct1C|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      $27 = ($24|0)!=(0);
      if ($27) {
       $0 = 2;
       $7 = 1;
       __ZN15TMndxFindResultD2Ev($Struct1C);
       $60 = $0;
       STACKTOP = sp;return ($60|0);
      }
      $32 = ((($Struct1C)) + 20|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $pMndxInfo;
      $35 = ((($34)) + 52|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($33>>>0)<($36>>>0);
      if (!($37)) {
       break;
      }
      $38 = ((($Struct1C)) + 20|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $1;
      $41 = ((($40)) + 108|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($42) + ($39<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      $pRootEntry = $44;
      while(1) {
       $45 = $pRootEntry;
       $46 = HEAP32[$45>>2]|0;
       $47 = $46 & 16777215;
       $48 = $3;
       $49 = ($47|0)!=($48|0);
       if (!($49)) {
        break;
       }
       $50 = $pRootEntry;
       $51 = HEAP32[$50>>2]|0;
       $52 = $51 & -2147483648;
       $53 = ($52|0)!=(0);
       if ($53) {
        label = 12;
        break;
       }
       $54 = $pRootEntry;
       $55 = ((($54)) + 24|0);
       $pRootEntry = $55;
      }
      if ((label|0) == 12) {
       $0 = 2;
       $7 = 1;
       __ZN15TMndxFindResultD2Ev($Struct1C);
       $60 = $0;
       STACKTOP = sp;return ($60|0);
      }
      $56 = $4;
      $57 = ($56|0)!=(0|0);
      if ($57) {
       $58 = $pRootEntry;
       $59 = $4;
       HEAP32[$59>>2] = $58;
      }
      $0 = 0;
      $7 = 1;
      __ZN15TMndxFindResultD2Ev($Struct1C);
      $60 = $0;
      STACKTOP = sp;return ($60|0);
     }
    }
   }
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   $5 = $28;
   $6 = $29;
   __THREW__ = 0;
   invoke_vi(98,($Struct1C|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $63 = ___cxa_find_matching_catch_3(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   } else {
    $61 = $5;
    $62 = $6;
    ___resumeException($61|0);
    // unreachable;
   }
  }
 } while(0);
 $0 = 2;
 $7 = 1;
 __ZN15TMndxFindResultD2Ev($Struct1C);
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function __Z22RootHandler_CreateMNDXP13_TCascStoragePhj($hs,$pbRootFile,$cbRootFile) {
 $hs = $hs|0;
 $pbRootFile = $pbRootFile|0;
 $cbRootFile = $cbRootFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FileNameCount = 0, $MarInfo = 0, $ValidEntryCount = 0, $cbToAllocate = 0, $dwFilePointer = 0, $i = 0, $nError = 0, $nIndex1 = 0, $pDbPtr = 0, $pMarFile = 0, $pMndxHeader = 0;
 var $pMndxInfo = 0, $pRootEntry = 0, $pRootHandler = 0, $pbRootFileEnd = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $MarInfo = sp + 44|0;
 $FileNameCount = sp + 12|0;
 $1 = $hs;
 $2 = $pbRootFile;
 $3 = $cbRootFile;
 $4 = $2;
 $pMndxHeader = $4;
 $5 = $2;
 $6 = $3;
 $7 = (($5) + ($6)|0);
 $pbRootFileEnd = $7;
 $dwFilePointer = 0;
 $nError = 0;
 $8 = $pMndxHeader;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(1480871501);
 if (!($10)) {
  $11 = $pMndxHeader;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)>(2);
  if (!($14)) {
   $15 = $pMndxHeader;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<(1);
   if (!($18)) {
    $19 = (_malloc(120)|0);
    $pRootHandler = $19;
    $20 = $1;
    $21 = ((($20)) + 1840|0);
    HEAP32[$21>>2] = $19;
    $22 = $pRootHandler;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $0 = 12;
     $288 = $0;
     STACKTOP = sp;return ($288|0);
    }
    $24 = $pRootHandler;
    dest=$24; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $25 = $pRootHandler;
    HEAP32[$25>>2] = 99;
    $26 = $pRootHandler;
    $27 = ((($26)) + 4|0);
    HEAP32[$27>>2] = 100;
    $28 = $pRootHandler;
    $29 = ((($28)) + 8|0);
    HEAP32[$29>>2] = 101;
    $30 = $pRootHandler;
    $31 = ((($30)) + 12|0);
    HEAP32[$31>>2] = 102;
    $32 = $pRootHandler;
    $33 = ((($32)) + 20|0);
    HEAP32[$33>>2] = 103;
    $34 = $pRootHandler;
    $35 = ((($34)) + 24|0);
    HEAP32[$35>>2] = 104;
    $36 = $pRootHandler;
    $37 = ((($36)) + 32|0);
    $pMndxInfo = $37;
    $38 = $pRootHandler;
    $39 = ((($38)) + 28|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 | 1;
    HEAP32[$39>>2] = $41;
    $42 = $pMndxHeader;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $pMndxInfo;
    $46 = ((($45)) + 16|0);
    HEAP32[$46>>2] = $44;
    $47 = $pMndxHeader;
    $48 = ((($47)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $pMndxInfo;
    $51 = ((($50)) + 20|0);
    HEAP32[$51>>2] = $49;
    $52 = $dwFilePointer;
    $53 = (($52) + 12)|0;
    $dwFilePointer = $53;
    $54 = $pMndxInfo;
    $55 = ((($54)) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(2);
    do {
     if ($57) {
      $58 = $2;
      $59 = $dwFilePointer;
      $60 = (($58) + ($59)|0);
      $61 = $pbRootFileEnd;
      $62 = $pMndxInfo;
      $63 = ((($62)) + 24|0);
      $64 = (__ZL12RootFileReadPhS_Pvj($60,$61,$63,8)|0);
      if ($64) {
       $65 = $dwFilePointer;
       $66 = (($65) + 8)|0;
       $dwFilePointer = $66;
       break;
      }
      $0 = 1004;
      $288 = $0;
      STACKTOP = sp;return ($288|0);
     }
    } while(0);
    $67 = $2;
    $68 = $dwFilePointer;
    $69 = (($67) + ($68)|0);
    $70 = $pbRootFileEnd;
    $71 = $pMndxInfo;
    $72 = ((($71)) + 32|0);
    $73 = (__ZL12RootFileReadPhS_Pvj($69,$70,$72,28)|0);
    if (!($73)) {
     $0 = 1004;
     $288 = $0;
     STACKTOP = sp;return ($288|0);
    }
    $74 = $pMndxInfo;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76>>>0)>(3);
    if (!($77)) {
     $78 = $pMndxInfo;
     $79 = ((($78)) + 40|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)!=(20);
     if (!($81)) {
      $i = 0;
      while(1) {
       $82 = $i;
       $83 = $pMndxInfo;
       $84 = ((($83)) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($82>>>0)<($85>>>0);
       if (!($86)) {
        break;
       }
       $87 = $pMndxInfo;
       $88 = ((($87)) + 32|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $pMndxInfo;
       $91 = ((($90)) + 40|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $i;
       $94 = Math_imul($92, $93)|0;
       $95 = (($89) + ($94))|0;
       $dwFilePointer = $95;
       $96 = $2;
       $97 = $dwFilePointer;
       $98 = (($96) + ($97)|0);
       $99 = $pbRootFileEnd;
       $100 = (__ZL12RootFileReadPhS_Pvj($98,$99,$MarInfo,20)|0);
       if (!($100)) {
        label = 19;
        break;
       }
       $101 = (_malloc(12)|0);
       $pMarFile = $101;
       $102 = $pMarFile;
       $103 = ($102|0)==(0|0);
       if ($103) {
        label = 21;
        break;
       }
       $104 = $pMarFile;
       HEAP32[$104>>2] = 0;
       $105 = ((($MarInfo)) + 4|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = $106;
       $108 = (_malloc($107)|0);
       $109 = $pMarFile;
       $110 = ((($109)) + 4|0);
       HEAP32[$110>>2] = $108;
       $111 = ((($MarInfo)) + 4|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $pMarFile;
       $114 = ((($113)) + 8|0);
       HEAP32[$114>>2] = $112;
       $115 = $pMarFile;
       $116 = ((($115)) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($117|0)==(0|0);
       if ($118) {
        label = 23;
        break;
       }
       $119 = $2;
       $120 = ((($MarInfo)) + 12|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (($119) + ($121)|0);
       $123 = $pbRootFileEnd;
       $124 = $pMarFile;
       $125 = ((($124)) + 4|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = $pMarFile;
       $128 = ((($127)) + 8|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = (__ZL12RootFileReadPhS_Pvj($122,$123,$126,$129)|0);
       if (!($130)) {
        label = 25;
        break;
       }
       $131 = $pMarFile;
       __ZL23MAR_FILE_CreateDatabaseP9_MAR_FILE($131);
       $132 = $i;
       $133 = ($132|0)==(0);
       if ($133) {
        $134 = $pMarFile;
        $135 = $pMndxInfo;
        $136 = ((($135)) + 60|0);
        HEAP32[$136>>2] = $134;
       }
       $137 = $i;
       $138 = ($137|0)==(1);
       if ($138) {
        $139 = $pMarFile;
        $140 = $pMndxInfo;
        $141 = ((($140)) + 64|0);
        HEAP32[$141>>2] = $139;
       }
       $142 = $i;
       $143 = ($142|0)==(2);
       if ($143) {
        $144 = $pMarFile;
        $145 = $pMndxInfo;
        $146 = ((($145)) + 68|0);
        HEAP32[$146>>2] = $144;
       }
       $147 = $i;
       $148 = (($147) + 1)|0;
       $i = $148;
      }
      if ((label|0) == 19) {
       $0 = 1004;
       $288 = $0;
       STACKTOP = sp;return ($288|0);
      }
      else if ((label|0) == 21) {
       $nError = 12;
      }
      else if ((label|0) == 23) {
       $nError = 12;
      }
      else if ((label|0) == 25) {
       $nError = 1004;
      }
      $149 = $nError;
      $150 = ($149|0)==(0);
      if ($150) {
       $151 = $pMndxInfo;
       $152 = ((($151)) + 60|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        label = 37;
       } else {
        $155 = $pMndxInfo;
        $156 = ((($155)) + 64|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         label = 37;
        } else {
         $159 = $pMndxInfo;
         $160 = ((($159)) + 68|0);
         $161 = HEAP32[$160>>2]|0;
         $162 = ($161|0)==(0|0);
         if ($162) {
          label = 37;
         }
        }
       }
       if ((label|0) == 37) {
        $nError = 1000;
       }
       $163 = $pMndxInfo;
       $164 = ((($163)) + 56|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)!=(24);
       if ($166) {
        $nError = 1000;
       }
      }
      $167 = $nError;
      $168 = ($167|0)==(0);
      do {
       if ($168) {
        $169 = $pMndxInfo;
        $170 = ((($169)) + 64|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = HEAP32[$171>>2]|0;
        $pDbPtr = $172;
        $173 = $pDbPtr;
        $174 = (__ZN20TFileNameDatabasePtr16GetFileNameCountEPj($173,$FileNameCount)|0);
        $nError = $174;
        $175 = $nError;
        $176 = ($175|0)==(0);
        if ($176) {
         $177 = HEAP32[$FileNameCount>>2]|0;
         $178 = $pMndxInfo;
         $179 = ((($178)) + 52|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($177|0)==($180|0);
         if ($181) {
          $182 = $pMndxInfo;
          $183 = ((($182)) + 48|0);
          $184 = HEAP32[$183>>2]|0;
          $185 = $pMndxInfo;
          $186 = ((($185)) + 56|0);
          $187 = HEAP32[$186>>2]|0;
          $188 = Math_imul($184, $187)|0;
          $cbToAllocate = $188;
          $189 = $cbToAllocate;
          $190 = $189;
          $191 = (_malloc($190)|0);
          $192 = $pRootHandler;
          $193 = ((($192)) + 112|0);
          HEAP32[$193>>2] = $191;
          $194 = $pRootHandler;
          $195 = ((($194)) + 112|0);
          $196 = HEAP32[$195>>2]|0;
          $197 = ($196|0)!=(0|0);
          if (!($197)) {
           $nError = 12;
           break;
          }
          $198 = $2;
          $199 = $pMndxInfo;
          $200 = ((($199)) + 44|0);
          $201 = HEAP32[$200>>2]|0;
          $202 = (($198) + ($201)|0);
          $203 = $pbRootFileEnd;
          $204 = $pRootHandler;
          $205 = ((($204)) + 112|0);
          $206 = HEAP32[$205>>2]|0;
          $207 = $cbToAllocate;
          $208 = (__ZL12RootFileReadPhS_Pvj($202,$203,$206,$207)|0);
          if ($208) {
           break;
          }
          $nError = 1004;
          break;
         }
        }
        $nError = 1004;
       }
      } while(0);
      $209 = $nError;
      $210 = ($209|0)==(0);
      do {
       if ($210) {
        $211 = $pMndxInfo;
        $212 = ((($211)) + 52|0);
        $213 = HEAP32[$212>>2]|0;
        $214 = $pMndxInfo;
        $215 = ((($214)) + 48|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = ($213>>>0)<=($216>>>0);
        if (!($217)) {
         ___assert_fail((22135|0),(21902|0),3281,(22194|0));
         // unreachable;
        }
        $218 = $pMndxInfo;
        $219 = ((($218)) + 52|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = (($220) + 1)|0;
        $222 = $221<<2;
        $223 = (_malloc($222)|0);
        $224 = $pRootHandler;
        $225 = ((($224)) + 108|0);
        HEAP32[$225>>2] = $223;
        $226 = $pRootHandler;
        $227 = ((($226)) + 108|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = ($228|0)!=(0|0);
        if (!($229)) {
         $nError = 12;
         break;
        }
        $230 = $pRootHandler;
        $231 = ((($230)) + 112|0);
        $232 = HEAP32[$231>>2]|0;
        $pRootEntry = $232;
        $ValidEntryCount = 1;
        $nIndex1 = 0;
        $233 = $pRootHandler;
        $234 = ((($233)) + 112|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = $nIndex1;
        $237 = (($236) + 1)|0;
        $nIndex1 = $237;
        $238 = $pRootHandler;
        $239 = ((($238)) + 108|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = (($240) + ($236<<2)|0);
        HEAP32[$241>>2] = $235;
        $i = 0;
        while(1) {
         $242 = $i;
         $243 = $pMndxInfo;
         $244 = ((($243)) + 48|0);
         $245 = HEAP32[$244>>2]|0;
         $246 = ($242>>>0)<($245>>>0);
         if (!($246)) {
          break;
         }
         $247 = $ValidEntryCount;
         $248 = $pMndxInfo;
         $249 = ((($248)) + 52|0);
         $250 = HEAP32[$249>>2]|0;
         $251 = ($247>>>0)>($250>>>0);
         if ($251) {
          break;
         }
         $252 = $pRootEntry;
         $253 = HEAP32[$252>>2]|0;
         $254 = $253 & -2147483648;
         $255 = ($254|0)!=(0);
         if ($255) {
          $256 = $pRootEntry;
          $257 = ((($256)) + 24|0);
          $258 = $nIndex1;
          $259 = (($258) + 1)|0;
          $nIndex1 = $259;
          $260 = $pRootHandler;
          $261 = ((($260)) + 108|0);
          $262 = HEAP32[$261>>2]|0;
          $263 = (($262) + ($258<<2)|0);
          HEAP32[$263>>2] = $257;
          $264 = $ValidEntryCount;
          $265 = (($264) + 1)|0;
          $ValidEntryCount = $265;
         }
         $266 = $i;
         $267 = (($266) + 1)|0;
         $i = $267;
         $268 = $pRootEntry;
         $269 = ((($268)) + 24|0);
         $pRootEntry = $269;
        }
        $270 = $ValidEntryCount;
        $271 = (($270) - 1)|0;
        $272 = $pMndxInfo;
        $273 = ((($272)) + 52|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = ($271|0)!=($274|0);
        if ($275) {
         $nError = 1000;
        }
       }
      } while(0);
      $276 = $nError;
      $277 = ($276|0)==(0);
      if ($277) {
       $278 = $pMndxInfo;
       $279 = $pRootHandler;
       $280 = ((($279)) + 116|0);
       $281 = (__ZL16LoadPackageNamesP15_CASC_MNDX_INFOPP19_CASC_MNDX_PACKAGES($278,$280)|0);
       $nError = $281;
       $282 = $nError;
       $283 = ($282|0)==(0);
       $284 = $pMndxInfo;
       $285 = ((($284)) + 72|0);
       $286 = $283&1;
       HEAP8[$285>>0] = $286;
      }
      $287 = $nError;
      $0 = $287;
      $288 = $0;
      STACKTOP = sp;return ($288|0);
     }
    }
    $0 = 1004;
    $288 = $0;
    STACKTOP = sp;return ($288|0);
   }
  }
 }
 $0 = 1000;
 $288 = $0;
 STACKTOP = sp;return ($288|0);
}
function __ZN9TStruct40D2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 __THREW__ = 0;
 invoke_vi(64,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN13TGenericArrayD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(64,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_3(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN12TSparseArrayD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 80|0);
 __THREW__ = 0;
 invoke_vi(64,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $13 = ___cxa_find_matching_catch_2()|0;
   $14 = tempRet0;
   $1 = $13;
   $2 = $14;
   $15 = ((($3)) + 56|0);
   __THREW__ = 0;
   invoke_vi(64,($15|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $7 = ((($3)) + 56|0);
   __THREW__ = 0;
   invoke_vi(64,($7|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    $1 = $18;
    $2 = $19;
    label = 8;
    break;
   }
   $10 = ((($3)) + 32|0);
   __THREW__ = 0;
   invoke_vi(64,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    $1 = $20;
    $2 = $21;
    break;
   } else {
    __ZN13TGenericArrayD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $22 = ((($3)) + 32|0);
  __THREW__ = 0;
  invoke_vi(64,($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $29 = ___cxa_find_matching_catch_3(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(64,($3|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN12TSparseArray13IsItemPresentEj($this,$ItemIndex) {
 $this = $this|0;
 $ItemIndex = $ItemIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $ItemIndex;
 $2 = $0;
 $3 = $1;
 $4 = $3 >>> 5;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $9 & 31;
 $11 = 1 << $10;
 $12 = $8 & $11;
 STACKTOP = sp;return ($12|0);
}
function __Z20IS_SINGLE_CHAR_MATCHR13TGenericArrayj($Table,$ItemIndex) {
 $Table = $Table|0;
 $ItemIndex = $ItemIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $Table;
 $1 = $ItemIndex;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($2*12)|0)|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -256;
 $10 = ($9|0)==(-256);
 STACKTOP = sp;return ($10|0);
}
function __ZN17TFileNameDatabase23GetNameFragmentOffsetExEjj($this,$LoBitsIndex,$HiBitsIndex) {
 $this = $this|0;
 $LoBitsIndex = $LoBitsIndex|0;
 $HiBitsIndex = $HiBitsIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $LoBitsIndex;
 $2 = $HiBitsIndex;
 $3 = $0;
 $4 = ((($3)) + 336|0);
 $5 = $2;
 $6 = (__ZN14TBitEntryArray11GetBitEntryEj($4,$5)|0);
 $7 = $6 << 8;
 $8 = $1;
 $9 = ((($3)) + 312|0);
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $7 | $14;
 STACKTOP = sp;return ($15|0);
}
function __ZN17TFileNameDatabase21GetNameFragmentOffsetEj($this,$LoBitsIndex) {
 $this = $this|0;
 $LoBitsIndex = $LoBitsIndex|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $1 = $LoBitsIndex;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 208|0);
 $5 = $1;
 $6 = (__ZN12TSparseArray12GetItemValueEj($4,$5)|0);
 $7 = (__ZN17TFileNameDatabase23GetNameFragmentOffsetExEjj($2,$3,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN17TFileNameDatabaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 504|0);
 __THREW__ = 0;
 invoke_vi(64,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   $1 = $25;
   $2 = $26;
   $27 = ((($3)) + 500|0);
   __THREW__ = 0;
   invoke_vi(86,($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    label = 12;
   }
  } else {
   $7 = ((($3)) + 500|0);
   __THREW__ = 0;
   invoke_vi(86,($7|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $1 = $30;
    $2 = $31;
    label = 12;
    break;
   }
   $10 = ((($3)) + 372|0);
   __THREW__ = 0;
   invoke_vi(79,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    $1 = $32;
    $2 = $33;
    label = 14;
    break;
   }
   $13 = ((($3)) + 336|0);
   __THREW__ = 0;
   invoke_vi(71,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    $1 = $37;
    $2 = $38;
    label = 16;
    break;
   }
   $16 = ((($3)) + 312|0);
   __THREW__ = 0;
   invoke_vi(64,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    $1 = $42;
    $2 = $43;
    label = 18;
    break;
   }
   $19 = ((($3)) + 208|0);
   __THREW__ = 0;
   invoke_vi(75,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    $1 = $47;
    $2 = $48;
    label = 20;
    break;
   }
   $22 = ((($3)) + 104|0);
   __THREW__ = 0;
   invoke_vi(75,($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $52 = ___cxa_find_matching_catch_2()|0;
    $53 = tempRet0;
    $1 = $52;
    $2 = $53;
    label = 21;
    break;
   } else {
    __ZN12TSparseArrayD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $34 = ((($3)) + 372|0);
  __THREW__ = 0;
  invoke_vi(79,($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $39 = ((($3)) + 336|0);
  __THREW__ = 0;
  invoke_vi(71,($39|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if (!($41)) {
   label = 16;
  }
 }
 if ((label|0) == 16) {
  $44 = ((($3)) + 312|0);
  __THREW__ = 0;
  invoke_vi(64,($44|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if (!($46)) {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $49 = ((($3)) + 208|0);
  __THREW__ = 0;
  invoke_vi(75,($49|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if (!($51)) {
   label = 20;
  }
 }
 if ((label|0) == 20) {
  $54 = ((($3)) + 104|0);
  __THREW__ = 0;
  invoke_vi(75,($54|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if (!($56)) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  __THREW__ = 0;
  invoke_vi(75,($3|0));
  $57 = __THREW__; __THREW__ = 0;
  $58 = $57&1;
  if (!($58)) {
   $59 = $1;
   $60 = $2;
   ___resumeException($59|0);
   // unreachable;
  }
 }
 $61 = ___cxa_find_matching_catch_3(0|0)|0;
 $62 = tempRet0;
 ___clang_call_terminate($61);
 // unreachable;
}
function __ZL19MAR_FILE_SearchFileP9_MAR_FILEP15TMndxFindResult($pMarFile,$pStruct1C) {
 $pMarFile = $pMarFile|0;
 $pStruct1C = $pStruct1C|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pMarFile;
 $1 = $pStruct1C;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN20TFileNameDatabasePtr18FindFileInDatabaseEP15TMndxFindResult($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZL18MndxHandler_InsertP17TRootHandler_MNDXPKcPh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return 95;
}
function __ZL18MndxHandler_SearchP17TRootHandler_MNDXP12_TCascSearchPjS3_S3_($pRootHandler,$pSearch,$PtrFileSize,$0,$1) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 $PtrFileSize = $PtrFileSize|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bFindResult = 0, $pMarFile = 0, $pMndxInfo = 0, $pStruct1C = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $bFindResult = sp + 44|0;
 $3 = $pRootHandler;
 $4 = $pSearch;
 $5 = $PtrFileSize;
 $6 = $0;
 $7 = $1;
 $pStruct1C = 0;
 $10 = $3;
 $11 = ((($10)) + 32|0);
 $pMndxInfo = $11;
 $12 = $pMndxInfo;
 $13 = ((($12)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $pMarFile = $14;
 HEAP8[$bFindResult>>0] = 0;
 $15 = $4;
 $16 = ((($15)) + 1044|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 do {
  if ($18) {
   $19 = (__Znwj(28)|0);
   __THREW__ = 0;
   invoke_vi(105,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $24 = ___cxa_find_matching_catch_2()|0;
    $25 = tempRet0;
    $8 = $24;
    $9 = $25;
    __ZdlPv($19);
    $26 = $8;
    $27 = $9;
    ___resumeException($26|0);
    // unreachable;
   }
   $pStruct1C = $19;
   $22 = $pStruct1C;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $28 = $pStruct1C;
    (__ZN15TMndxFindResult13SetSearchPathEPKcj($28,27256,0)|0);
    $29 = $pStruct1C;
    $30 = $4;
    $31 = ((($30)) + 1044|0);
    HEAP32[$31>>2] = $29;
    break;
   }
   $2 = 0;
   $51 = $2;
   STACKTOP = sp;return ($51|0);
  }
 } while(0);
 $32 = $4;
 $33 = ((($32)) + 1044|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((22374|0),(21902|0),3069,(22404|0));
  // unreachable;
 }
 $36 = $4;
 $37 = ((($36)) + 1044|0);
 $38 = HEAP32[$37>>2]|0;
 $pStruct1C = $38;
 $39 = $pMarFile;
 $40 = HEAP32[$39>>2]|0;
 $41 = $pStruct1C;
 (__ZN20TFileNameDatabasePtr11sub_1956CE0EP15TMndxFindResultPb($40,$41,$bFindResult)|0);
 $42 = HEAP8[$bFindResult>>0]|0;
 $43 = $42&1;
 $44 = $43&1;
 $45 = ($44|0)==(0);
 if ($45) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 } else {
  $46 = $3;
  $47 = $4;
  $48 = $pStruct1C;
  $49 = $5;
  $50 = (__ZL12FillFindDataP17TRootHandler_MNDXP12_TCascSearchP15TMndxFindResultPj($46,$47,$48,$49)|0);
  $2 = $50;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function __ZL21MndxHandler_EndSearchP17TRootHandler_MNDXP12_TCascSearch($0,$pSearch) {
 $0 = $0|0;
 $pSearch = $pSearch|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $pSearch;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $2;
   $8 = ((($7)) + 1044|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    __THREW__ = 0;
    invoke_vi(98,($9|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     $3 = $13;
     $4 = $14;
     __ZdlPv($9);
     $15 = $3;
     $16 = $4;
     ___resumeException($15|0);
     // unreachable;
    } else {
     __ZdlPv($9);
     break;
    }
   }
  }
 } while(0);
 $17 = $2;
 $18 = ((($17)) + 1044|0);
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL18MndxHandler_GetKeyP17TRootHandler_MNDXPKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $or$cond = 0, $pPackage = 0;
 var $pRootEntry = 0, $szNormName = 0, $szStrippedName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $pRootEntry = sp + 12|0;
 $szNormName = sp + 28|0;
 $1 = $pRootHandler;
 $2 = $szFileName;
 HEAP32[$pRootEntry>>2] = 0;
 $3 = $2;
 (__Z28NormalizeFileName_LowerSlashPcPKcj($szNormName,$3,1024)|0);
 $4 = $1;
 $5 = (__Z15FindMndxPackageP17TRootHandler_MNDXPKc($4,$szNormName)|0);
 $pPackage = $5;
 $6 = $pPackage;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $8 = $pPackage;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($szNormName) + ($10)|0);
 $szStrippedName = $11;
 while(1) {
  $12 = $szStrippedName;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(47);
  if (!($15)) {
   break;
  }
  $16 = $szStrippedName;
  $17 = ((($16)) + 1|0);
  $szStrippedName = $17;
 }
 $18 = $1;
 $19 = $szStrippedName;
 $20 = $pPackage;
 $21 = $1;
 $22 = ((($21)) + 116|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 16|0);
 $25 = $20;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 8)&-1;
 $29 = (__Z14SearchMndxInfoP17TRootHandler_MNDXPKcjPP21_CASC_ROOT_ENTRY_MNDX($18,$19,$28,$pRootEntry)|0);
 $nError = $29;
 $30 = $nError;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[$pRootEntry>>2]|0;
 $33 = ($32|0)==(0|0);
 $or$cond = $31 | $33;
 if ($or$cond) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $34 = HEAP32[$pRootEntry>>2]|0;
  $35 = ((($34)) + 4|0);
  $0 = $35;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZL17MndxHandler_CloseP17TRootHandler_MNDX($pRootHandler) {
 $pRootHandler = $pRootHandler|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 32|0);
  $8 = ((($7)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  __ZL19MAR_FILE_DestructorP9_MAR_FILE($9);
 }
 $10 = $0;
 $11 = ((($10)) + 32|0);
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 32|0);
  $17 = ((($16)) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  __ZL19MAR_FILE_DestructorP9_MAR_FILE($18);
 }
 $19 = $0;
 $20 = ((($19)) + 32|0);
 $21 = ((($20)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $0;
  $25 = ((($24)) + 32|0);
  $26 = ((($25)) + 68|0);
  $27 = HEAP32[$26>>2]|0;
  __ZL19MAR_FILE_DestructorP9_MAR_FILE($27);
 }
 $28 = $0;
 $29 = ((($28)) + 108|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $0;
  $33 = ((($32)) + 108|0);
  $34 = HEAP32[$33>>2]|0;
  _free($34);
 }
 $35 = $0;
 $36 = ((($35)) + 112|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $0;
  $40 = ((($39)) + 112|0);
  $41 = HEAP32[$40>>2]|0;
  _free($41);
 }
 $42 = $0;
 $43 = ((($42)) + 116|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  $49 = $0;
  _free($49);
  STACKTOP = sp;return;
 }
 $46 = $0;
 $47 = ((($46)) + 116|0);
 $48 = HEAP32[$47>>2]|0;
 _free($48);
 $49 = $0;
 _free($49);
 STACKTOP = sp;return;
}
function __ZL21MndxHandler_GetFileIdP17TRootHandler_MNDXPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function __ZL12RootFileReadPhS_Pvj($pbFilePointer,$pbFileEnd,$pvBuffer,$dwBytesToRead) {
 $pbFilePointer = $pbFilePointer|0;
 $pbFileEnd = $pbFileEnd|0;
 $pvBuffer = $pvBuffer|0;
 $dwBytesToRead = $dwBytesToRead|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 16|0;
 $1 = $pbFilePointer;
 $2 = $pbFileEnd;
 $3 = $pvBuffer;
 $4 = $dwBytesToRead;
 $5 = $1;
 $6 = $2;
 $7 = ($5>>>0)>($6>>>0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = $1;
   $10 = $8;
   $11 = $9;
   $12 = (($10) - ($11))|0;
   $13 = $4;
   $14 = ($12>>>0)<($13>>>0);
   if ($14) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    $15 = $3;
    $16 = $1;
    $17 = $4;
    _memcpy(($15|0),($16|0),($17|0))|0;
    $$expand_i1_val4 = 1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function __ZL23MAR_FILE_CreateDatabaseP9_MAR_FILE($pMarFile) {
 $pMarFile = $pMarFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pMarFile;
 $3 = (__Znwj(4)|0);
 __THREW__ = 0;
 invoke_vi(83,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  $1 = $18;
  $2 = $19;
  __ZdlPv($3);
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
 $6 = $0;
 HEAP32[$6>>2] = $3;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 (__ZN20TFileNameDatabasePtr14CreateDatabaseEPhj($11,$14,$17)|0);
 STACKTOP = sp;return;
}
function __ZL16LoadPackageNamesP15_CASC_MNDX_INFOPP19_CASC_MNDX_PACKAGES($pMndxInfo,$ppPackages) {
 $pMndxInfo = $pMndxInfo|0;
 $ppPackages = $ppPackages|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Struct1C = 0, $bFindResult = 0, $pMarFile = 0, $pPackages = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $Struct1C = sp + 20|0;
 $bFindResult = sp + 60|0;
 $1 = $pMndxInfo;
 $2 = $ppPackages;
 __ZN15TMndxFindResultC2Ev($Struct1C);
 $pPackages = 0;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $13 = $1;
   $14 = ((($13)) + 60|0);
   $15 = HEAP32[$14>>2]|0;
   $pMarFile = $15;
   __THREW__ = 0;
   (invoke_iiii(96,($Struct1C|0),(27256|0),0)|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iii(107,16,4096)|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $pPackages = $18;
     $21 = $pPackages;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $0 = 12;
      $5 = 1;
      __ZN15TMndxFindResultD2Ev($Struct1C);
      $47 = $0;
      STACKTOP = sp;return ($47|0);
     }
     while(1) {
      HEAP8[$bFindResult>>0] = 0;
      $23 = $pMarFile;
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      (invoke_iiii(108,($24|0),($Struct1C|0),($bFindResult|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L1;
      }
      $27 = HEAP8[$bFindResult>>0]|0;
      $28 = $27&1;
      $29 = $28&1;
      $30 = ($29|0)==(0);
      if ($30) {
       break;
      }
      $31 = $pPackages;
      $32 = ((($Struct1C)) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($Struct1C)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($Struct1C)) + 20|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iiiii(109,($31|0),($33|0),($35|0),($37|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break L1;
      }
      $pPackages = $38;
      $41 = $pPackages;
      $42 = ($41|0)==(0|0);
      if ($42) {
       label = 12;
       break;
      }
     }
     if ((label|0) == 12) {
      $0 = 12;
      $5 = 1;
      __ZN15TMndxFindResultD2Ev($Struct1C);
      $47 = $0;
      STACKTOP = sp;return ($47|0);
     }
     $43 = $2;
     $44 = ($43|0)!=(0|0);
     if ($44) {
      $45 = $pPackages;
      $46 = $2;
      HEAP32[$46>>2] = $45;
     }
     $0 = 0;
     $5 = 1;
     __ZN15TMndxFindResultD2Ev($Struct1C);
     $47 = $0;
     STACKTOP = sp;return ($47|0);
    }
   }
  } else {
   __THREW__ = 0;
   invoke_viiii(106,(22217|0),(21902|0),2883,(22235|0));
   $8 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch_2()|0;
 $10 = tempRet0;
 $3 = $9;
 $4 = $10;
 __THREW__ = 0;
 invoke_vi(98,($Struct1C|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $50 = ___cxa_find_matching_catch_3(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 } else {
  $48 = $3;
  $49 = $4;
  ___resumeException($48|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZL16AllocatePackagesjj($nNameEntries,$nNameBufferMax) {
 $nNameEntries = $nNameEntries|0;
 $nNameBufferMax = $nNameBufferMax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cbToAllocate = 0, $pPackages = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $nNameEntries;
 $1 = $nNameBufferMax;
 $2 = $0;
 $3 = $2<<3;
 $4 = (24 + ($3))|0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $cbToAllocate = $6;
 $7 = $cbToAllocate;
 $8 = $7;
 $9 = (_malloc($8)|0);
 $pPackages = $9;
 $10 = $pPackages;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $27 = $pPackages;
  STACKTOP = sp;return ($27|0);
 }
 $12 = $pPackages;
 $13 = $cbToAllocate;
 _memset(($12|0),0,($13|0))|0;
 $14 = $0;
 $15 = $pPackages;
 $16 = ((($15)) + 16|0);
 $17 = (($16) + ($14<<3)|0);
 $18 = $pPackages;
 HEAP32[$18>>2] = $17;
 $19 = $0;
 $20 = $pPackages;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $pPackages;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = 0;
 $24 = $1;
 $25 = $pPackages;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $pPackages;
 STACKTOP = sp;return ($27|0);
}
function __ZL19InsertToPackageListP19_CASC_MNDX_PACKAGESPKcjj($pPackages,$szFileName,$cchFileName,$nPackageIndex) {
 $pPackages = $pPackages|0;
 $szFileName = $szFileName|0;
 $cchFileName = $cchFileName|0;
 $nPackageIndex = $nPackageIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cbToAllocate = 0, $i = 0, $nNewNameBufferMax = 0, $nNewNameEntries = 0, $pOldPackages = 0;
 var $szNameBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $pPackages;
 $2 = $szFileName;
 $3 = $cchFileName;
 $4 = $nPackageIndex;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $nNewNameEntries = $7;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $nNewNameBufferMax = $10;
 while(1) {
  $11 = $4;
  $12 = $nNewNameEntries;
  $13 = ($11>>>0)>=($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $nNewNameEntries;
  $15 = (($14) + 16)|0;
  $nNewNameEntries = $15;
 }
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($18) + ($19))|0;
 $21 = (($20) + 1)|0;
 $22 = $nNewNameBufferMax;
 $23 = ($21>>>0)>($22>>>0);
 if ($23) {
  $24 = $nNewNameBufferMax;
  $25 = (($24) + 4096)|0;
  $nNewNameBufferMax = $25;
 }
 $26 = $nNewNameEntries;
 $27 = $1;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26>>>0)>($29>>>0);
 if ($30) {
  label = 8;
 } else {
  $31 = $nNewNameBufferMax;
  $32 = $1;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31>>>0)>($34>>>0);
  if ($35) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $36 = $1;
  $pOldPackages = $36;
  $37 = $nNewNameEntries;
  $38 = $37<<3;
  $39 = (24 + ($38))|0;
  $40 = $nNewNameBufferMax;
  $41 = (($39) + ($40))|0;
  $cbToAllocate = $41;
  $42 = $cbToAllocate;
  $43 = $42;
  $44 = (_malloc($43)|0);
  $1 = $44;
  $45 = $1;
  $46 = ($45|0)==(0|0);
  if ($46) {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  $47 = $1;
  $48 = $cbToAllocate;
  _memset(($47|0),0,($48|0))|0;
  $49 = $nNewNameEntries;
  $50 = $1;
  $51 = ((($50)) + 16|0);
  $52 = (($51) + ($49<<3)|0);
  $szNameBuffer = $52;
  $53 = $1;
  HEAP32[$53>>2] = $52;
  $54 = $1;
  $55 = HEAP32[$54>>2]|0;
  $56 = $pOldPackages;
  $57 = HEAP32[$56>>2]|0;
  $58 = $pOldPackages;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  _memcpy(($55|0),($57|0),($60|0))|0;
  $i = 0;
  while(1) {
   $61 = $i;
   $62 = $pOldPackages;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($61>>>0)<($64>>>0);
   if (!($65)) {
    break;
   }
   $66 = $i;
   $67 = $pOldPackages;
   $68 = ((($67)) + 16|0);
   $69 = (($68) + ($66<<3)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $72 = $1;
    $73 = HEAP32[$72>>2]|0;
    $74 = $i;
    $75 = $pOldPackages;
    $76 = ((($75)) + 16|0);
    $77 = (($76) + ($74<<3)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $pOldPackages;
    $80 = HEAP32[$79>>2]|0;
    $81 = $78;
    $82 = $80;
    $83 = (($81) - ($82))|0;
    $84 = (($73) + ($83)|0);
    $85 = $i;
    $86 = $1;
    $87 = ((($86)) + 16|0);
    $88 = (($87) + ($85<<3)|0);
    HEAP32[$88>>2] = $84;
    $89 = $i;
    $90 = $pOldPackages;
    $91 = ((($90)) + 16|0);
    $92 = (($91) + ($89<<3)|0);
    $93 = ((($92)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $i;
    $96 = $1;
    $97 = ((($96)) + 16|0);
    $98 = (($97) + ($95<<3)|0);
    $99 = ((($98)) + 4|0);
    HEAP32[$99>>2] = $94;
   }
   $100 = $i;
   $101 = (($100) + 1)|0;
   $i = $101;
  }
  $102 = $nNewNameEntries;
  $103 = $1;
  $104 = ((($103)) + 4|0);
  HEAP32[$104>>2] = $102;
  $105 = $pOldPackages;
  $106 = ((($105)) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $1;
  $109 = ((($108)) + 8|0);
  HEAP32[$109>>2] = $107;
  $110 = $nNewNameBufferMax;
  $111 = $1;
  $112 = ((($111)) + 12|0);
  HEAP32[$112>>2] = $110;
  $113 = $pOldPackages;
  _free($113);
 }
 $114 = $4;
 $115 = $1;
 $116 = ((($115)) + 16|0);
 $117 = (($116) + ($114<<3)|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  ___assert_fail((22252|0),(21902|0),2864,(22306|0));
  // unreachable;
 }
 $120 = $4;
 $121 = $1;
 $122 = ((($121)) + 16|0);
 $123 = (($122) + ($120<<3)|0);
 $124 = ((($123)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)==(0);
 if (!($126)) {
  ___assert_fail((22326|0),(21902|0),2865,(22306|0));
  // unreachable;
 }
 $127 = $1;
 $128 = HEAP32[$127>>2]|0;
 $129 = $1;
 $130 = ((($129)) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($128) + ($131)|0);
 $szNameBuffer = $132;
 $133 = $szNameBuffer;
 $134 = $4;
 $135 = $1;
 $136 = ((($135)) + 16|0);
 $137 = (($136) + ($134<<3)|0);
 HEAP32[$137>>2] = $133;
 $138 = $3;
 $139 = $4;
 $140 = $1;
 $141 = ((($140)) + 16|0);
 $142 = (($141) + ($139<<3)|0);
 $143 = ((($142)) + 4|0);
 HEAP32[$143>>2] = $138;
 $144 = $szNameBuffer;
 $145 = $2;
 $146 = $3;
 _memcpy(($144|0),($145|0),($146|0))|0;
 $147 = $3;
 $148 = (($147) + 1)|0;
 $149 = $1;
 $150 = ((($149)) + 8|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + ($148))|0;
 HEAP32[$150>>2] = $152;
 $153 = $1;
 $0 = $153;
 $154 = $0;
 STACKTOP = sp;return ($154|0);
}
function __ZL19MAR_FILE_DestructorP9_MAR_FILE($pMarFile) {
 $pMarFile = $pMarFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pMarFile;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    __THREW__ = 0;
    invoke_vi(86,($9|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     $1 = $13;
     $2 = $14;
     __ZdlPv($9);
     $15 = $1;
     $16 = $2;
     ___resumeException($15|0);
     // unreachable;
    } else {
     __ZdlPv($9);
     break;
    }
   }
  }
 } while(0);
 $17 = $0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $0;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
 }
 $24 = $0;
 _free($24);
 STACKTOP = sp;return;
}
function __ZL12FillFindDataP17TRootHandler_MNDXP12_TCascSearchP15TMndxFindResultPj($pRootHandler,$pSearch,$pStruct1C,$PtrFileSize) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 $pStruct1C = $pStruct1C|0;
 $PtrFileSize = $PtrFileSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $nError = 0, $pPackage = 0, $pRootEntry = 0, $szStrippedName = 0, $szStrippedPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $pRootEntry = sp + 12|0;
 $szStrippedName = sp + 36|0;
 $1 = $pRootHandler;
 $2 = $pSearch;
 $3 = $pStruct1C;
 $4 = $PtrFileSize;
 HEAP32[$pRootEntry>>2] = 0;
 $5 = $3;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<(1024);
 if (!($8)) {
  ___assert_fail((22423|0),(21902|0),3013,(22458|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ((($9)) + 20|0);
 $11 = $3;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 _memcpy(($10|0),($13|0),($16|0))|0;
 $17 = $3;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 20|0);
 $22 = (($21) + ($19)|0);
 HEAP8[$22>>0] = 0;
 $23 = $1;
 $24 = $2;
 $25 = ((($24)) + 20|0);
 $26 = (__Z15FindMndxPackageP17TRootHandler_MNDXPKc($23,$25)|0);
 $pPackage = $26;
 $27 = $pPackage;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $29 = $2;
 $30 = ((($29)) + 20|0);
 $31 = $pPackage;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($30) + ($33)|0);
 $szStrippedPtr = $34;
 while(1) {
  $35 = $szStrippedPtr;
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = ($37|0)==(47);
  if (!($38)) {
   break;
  }
  $39 = $szStrippedPtr;
  $40 = ((($39)) + 1|0);
  $szStrippedPtr = $40;
 }
 $41 = $szStrippedPtr;
 (__Z28NormalizeFileName_LowerSlashPcPKcj($szStrippedName,$41,1024)|0);
 $42 = $1;
 $43 = $pPackage;
 $44 = $1;
 $45 = ((($44)) + 116|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 16|0);
 $48 = $43;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (__Z14SearchMndxInfoP17TRootHandler_MNDXPKcjPP21_CASC_ROOT_ENTRY_MNDX($42,$szStrippedName,$51,$pRootEntry)|0);
 $nError = $52;
 $53 = $nError;
 $54 = ($53|0)!=(0);
 if ($54) {
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $55 = $4;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = HEAP32[$pRootEntry>>2]|0;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $4;
  HEAP32[$60>>2] = $59;
 }
 $61 = HEAP32[$pRootEntry>>2]|0;
 $62 = ((($61)) + 4|0);
 $0 = $62;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function __ZN14TBitEntryArray11GetBitEntryEj($this,$EntryIndex) {
 $this = $this|0;
 $EntryIndex = $EntryIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwEndBit = 0, $dwItemIndex = 0, $dwResult = 0, $dwStartBit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $this;
 $1 = $EntryIndex;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($3, $5)|0;
 $7 = $6 >>> 5;
 $dwItemIndex = $7;
 $8 = $1;
 $9 = ((($2)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = $11 & 31;
 $dwStartBit = $12;
 $13 = $dwStartBit;
 $14 = ((($2)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + ($15))|0;
 $dwEndBit = $16;
 $17 = $dwEndBit;
 $18 = ($17>>>0)>(32);
 $19 = $dwItemIndex;
 if ($18) {
  $20 = (($19) + 1)|0;
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $dwStartBit;
  $26 = (32 - ($25))|0;
  $27 = $24 << $26;
  $28 = $dwItemIndex;
  $29 = ((($2)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($28<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $dwStartBit;
  $34 = $32 >>> $33;
  $35 = $27 | $34;
  $dwResult = $35;
  $42 = $dwResult;
  $43 = ((($2)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $42 & $44;
  STACKTOP = sp;return ($45|0);
 } else {
  $36 = ((($2)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($19<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $dwStartBit;
  $41 = $39 >>> $40;
  $dwResult = $41;
  $42 = $dwResult;
  $43 = ((($2)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $42 & $44;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __Z27RootHandler_CreateOverwatchP13_TCascStoragePhj($hs,$pbRootFile,$cbRootFile) {
 $hs = $hs|0;
 $pbRootFile = $pbRootFile|0;
 $cbRootFile = $cbRootFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $EncodingKey = 0, $KeyBuffer = 0, $dwFileCountMax = 0, $nError = 0, $nFileNameIndex = 0;
 var $nLength = 0, $pRootHandler = 0, $pTextFile = 0, $szFileName = 0, $szOneLine = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1616|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1616|0);
 $KeyBuffer = sp + 1592|0;
 $EncodingKey = sp + 24|0;
 $szOneLine = sp + 1080|0;
 $szFileName = sp + 52|0;
 $nFileNameIndex = sp + 4|0;
 $1 = $hs;
 $2 = $pbRootFile;
 $3 = $cbRootFile;
 HEAP32[$EncodingKey>>2] = $KeyBuffer;
 $4 = ((($EncodingKey)) + 4|0);
 HEAP32[$4>>2] = 16;
 $5 = $1;
 $6 = ((($5)) + 1820|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $dwFileCountMax = $8;
 $nError = 0;
 $9 = (_malloc(68)|0);
 $pRootHandler = $9;
 $10 = $1;
 $11 = ((($10)) + 1840|0);
 HEAP32[$11>>2] = $9;
 $12 = $pRootHandler;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $0 = 12;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $14 = $pRootHandler;
 dest=$14; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = $pRootHandler;
 HEAP32[$15>>2] = 110;
 $16 = $pRootHandler;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 111;
 $18 = $pRootHandler;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = 112;
 $20 = $pRootHandler;
 $21 = ((($20)) + 12|0);
 HEAP32[$21>>2] = 113;
 $22 = $pRootHandler;
 $23 = ((($22)) + 20|0);
 HEAP32[$23>>2] = 114;
 $24 = $pRootHandler;
 $25 = ((($24)) + 24|0);
 HEAP32[$25>>2] = 115;
 $26 = $pRootHandler;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 | 1;
 HEAP32[$27>>2] = $29;
 $30 = $pRootHandler;
 $31 = ((($30)) + 32|0);
 $32 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($31,32,65536)|0);
 $nError = $32;
 $33 = $nError;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $nError;
  $0 = $35;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $36 = $pRootHandler;
 $37 = ((($36)) + 48|0);
 $38 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($37,1,65536)|0);
 $nError = $38;
 $39 = $nError;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $nError;
  $0 = $41;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $42 = $dwFileCountMax;
 $43 = (__Z10Map_Createjjj($42,8,16)|0);
 $44 = $pRootHandler;
 $45 = ((($44)) + 64|0);
 HEAP32[$45>>2] = $43;
 $46 = $pRootHandler;
 $47 = ((($46)) + 64|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if ($49) {
  $0 = 12;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $50 = $2;
 $51 = $3;
 $52 = (__Z19ListFile_FromBufferPhj($50,$51)|0);
 $pTextFile = $52;
 $53 = $pTextFile;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $pTextFile;
  $56 = (__Z20ListFile_GetNextLinePvPcj($55,$szOneLine,511)|0);
  $nLength = $56;
  $57 = $nLength;
  $58 = (($szOneLine) + ($57)|0);
  $59 = (__Z20GetRootVariableIndexPKcS0_S0_Pi($szOneLine,$58,22471,$nFileNameIndex)|0);
  $nError = $59;
  $60 = $nError;
  $61 = ($60|0)==(0);
  L19: do {
   if ($61) {
    while(1) {
     $62 = $pTextFile;
     $63 = (__Z20ListFile_GetNextLinePvPcj($62,$szOneLine,511)|0);
     $nLength = $63;
     $64 = ($63>>>0)>(0);
     if (!($64)) {
      break L19;
     }
     $65 = $nLength;
     $66 = (($szOneLine) + ($65)|0);
     $67 = HEAP32[$nFileNameIndex>>2]|0;
     $68 = (__Z17ParseRootFileLinePKcS0_iP10_QUERY_KEYPcj($szOneLine,$66,$67,$EncodingKey,$szFileName,1024)|0);
     $nError = $68;
     $69 = $nError;
     $70 = ($69|0)==(0);
     if (!($70)) {
      continue;
     }
     $71 = $pRootHandler;
     (__ZL15InsertFileEntryP16TRootHandler_OvrPKcPh($71,$szFileName,$KeyBuffer)|0);
    }
   }
  } while(0);
  $72 = $pTextFile;
  __Z13ListFile_FreePv($72);
 }
 $73 = $nError;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZL17OvrHandler_InsertP16TRootHandler_OvrPKcPh($pRootHandler,$szFileName,$pbEncodingKey) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 $pbEncodingKey = $pbEncodingKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $szFileName;
 $2 = $pbEncodingKey;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZL15InsertFileEntryP16TRootHandler_OvrPKcPh($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL17OvrHandler_SearchP16TRootHandler_OvrP12_TCascSearchPjS3_S3_($pRootHandler,$pSearch,$0,$1,$2) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pFileEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $pRootHandler;
 $5 = $pSearch;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $5;
 $10 = ((($9)) + 1048|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 32|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($11>>>0)<($15>>>0);
 if ($16) {
  $17 = $4;
  $18 = ((($17)) + 32|0);
  $19 = $5;
  $20 = ((($19)) + 1048|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($18,$21)|0);
  $pFileEntry = $22;
  $23 = $5;
  $24 = ((($23)) + 20|0);
  $25 = $4;
  $26 = ((($25)) + 48|0);
  $27 = $pFileEntry;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (__Z12Array_ItemAtP14_DYNAMIC_ARRAYj($26,$29)|0);
  (_strcpy($24,$30)|0);
  $31 = $5;
  $32 = ((($31)) + 1048|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $pFileEntry;
  $3 = $35;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 } else {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZL20OvrHandler_EndSearchP16TRootHandler_OvrP12_TCascSearch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZL17OvrHandler_GetKeyP16TRootHandler_OvrPKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FileNameHash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $FileNameHash = sp;
 $0 = $pRootHandler;
 $1 = $szFileName;
 $2 = $1;
 $3 = (__Z16CalcFileNameHashPKc($2)|0);
 $4 = tempRet0;
 $5 = $FileNameHash;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = $0;
 $10 = ((($9)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($11,$FileNameHash,0)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZL16OvrHandler_CloseP16TRootHandler_Ovr($pRootHandler) {
 $pRootHandler = $pRootHandler|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 64|0);
  $9 = HEAP32[$8>>2]|0;
  __Z8Map_FreeP9_CASC_MAP($9);
 }
 $10 = $0;
 $11 = ((($10)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 32|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($13);
 $14 = $0;
 $15 = ((($14)) + 48|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($15);
 $16 = $0;
 _free($16);
 STACKTOP = sp;return;
}
function __ZL20OvrHandler_GetFileIdP16TRootHandler_OvrPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function __ZL15InsertFileEntryP16TRootHandler_OvrPKcPh($pRootHandler,$szFileName,$pbEncodingKey) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 $pbEncodingKey = $pbEncodingKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nLength = 0, $pFileEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $pbEncodingKey;
 $4 = $2;
 $5 = (_strlen($4)|0);
 $nLength = $5;
 $6 = $1;
 $7 = ((($6)) + 48|0);
 $8 = $2;
 $9 = $nLength;
 $10 = (($9) + 1)|0;
 $11 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($7,$8,$10)|0);
 $2 = $11;
 $12 = $2;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $0 = 12;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $14 = $1;
 $15 = ((($14)) + 32|0);
 $16 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($15,0,1)|0);
 $pFileEntry = $16;
 $17 = $pFileEntry;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = 12;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $19 = $pFileEntry;
 $20 = $3;
 dest=$19; src=$20; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $21 = $2;
 $22 = (__Z16CalcFileNameHashPKc($21)|0);
 $23 = tempRet0;
 $24 = $pFileEntry;
 $25 = ((($24)) + 16|0);
 $26 = $25;
 $27 = $26;
 HEAP32[$27>>2] = $22;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $23;
 $30 = $1;
 $31 = ((($30)) + 48|0);
 $32 = $2;
 $33 = (__Z13Array_IndexOfP14_DYNAMIC_ARRAYPKv($31,$32)|0);
 $34 = $pFileEntry;
 $35 = ((($34)) + 24|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = ((($36)) + 64|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $pFileEntry;
 $40 = ((($39)) + 16|0);
 $41 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($38,$40,0)|0);
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  ___assert_fail((22914|0),(22480|0),64,(22553|0));
  // unreachable;
 }
 $43 = $1;
 $44 = ((($43)) + 64|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $pFileEntry;
 $47 = $pFileEntry;
 $48 = ((($47)) + 16|0);
 (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($45,$46,$48)|0);
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function __Z13FindRootEntryR14_DYNAMIC_ARRAYj($FileTable,$FileDataId) {
 $FileTable = $FileTable|0;
 $FileDataId = $FileDataId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nResult = 0, $pEndEntry = 0;
 var $pMidlEntry = 0, $pStartEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $FileTable;
 $2 = $FileDataId;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $pStartEntry = $4;
 $5 = $pStartEntry;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) + ($8<<2)|0);
 $10 = ((($9)) + -4|0);
 $pEndEntry = $10;
 while(1) {
  $11 = $pStartEntry;
  $12 = $pEndEntry;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   label = 8;
   break;
  }
  $14 = $pStartEntry;
  $15 = $pEndEntry;
  $16 = $pStartEntry;
  $17 = $15;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 4)&-1;
  $21 = (($20|0) / 2)&-1;
  $22 = (($14) + ($21<<2)|0);
  $pMidlEntry = $22;
  $23 = $2;
  $24 = $pMidlEntry;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($23) - ($27))|0;
  $nResult = $28;
  $29 = $nResult;
  $30 = ($29|0)==(0);
  if ($30) {
   label = 4;
   break;
  }
  $33 = $nResult;
  $34 = ($33|0)<(0);
  $35 = $pMidlEntry;
  if ($34) {
   $pEndEntry = $35;
   continue;
  } else {
   $36 = ((($35)) + 4|0);
   $pStartEntry = $36;
   continue;
  }
 }
 if ((label|0) == 4) {
  $31 = $pMidlEntry;
  $32 = HEAP32[$31>>2]|0;
  $0 = $32;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function __Z13FindRootEntryP9_CASC_MAPPKcPj($pRootMap,$szFileName,$PtrTableIndex) {
 $pRootMap = $pRootMap|0;
 $szFileName = $szFileName|0;
 $PtrTableIndex = $PtrTableIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $FileNameHash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $FileNameHash = sp;
 $0 = $pRootMap;
 $1 = $szFileName;
 $2 = $PtrTableIndex;
 $3 = $1;
 $4 = (__Z16CalcFileNameHashPKc($3)|0);
 $5 = tempRet0;
 $6 = $FileNameHash;
 $7 = $6;
 HEAP32[$7>>2] = $4;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $0;
 $11 = $2;
 $12 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($10,$FileNameHash,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __Z17VerifyLocaleBlockP16_CASC_ROOT_BLOCKPhS1_($pBlockInfo,$pbFilePointer,$pbFileEnd) {
 $pBlockInfo = $pBlockInfo|0;
 $pbFilePointer = $pbFilePointer|0;
 $pbFileEnd = $pbFileEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $pBlockInfo;
 $2 = $pbFilePointer;
 $3 = $pbFileEnd;
 $4 = $2;
 $5 = $1;
 HEAP32[$5>>2] = $4;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $2 = $8;
 $9 = $2;
 $10 = $3;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $12 = $2;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20<<2)|0);
 $2 = $21;
 $22 = $2;
 $23 = $3;
 $24 = ($22>>>0)>($23>>>0);
 if ($24) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $25 = $2;
 $26 = $1;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = $25;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $1;
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($30) + (($33*24)|0)|0);
 $2 = $34;
 $35 = $2;
 $36 = $3;
 $37 = ($35>>>0)>($36>>>0);
 if ($37) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else {
  $38 = $2;
  $0 = $38;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __Z22RootHandler_CreateWoW6P13_TCascStoragePhjj($hs,$pbRootFile,$cbRootFile,$dwLocaleMask) {
 $hs = $hs|0;
 $pbRootFile = $pbRootFile|0;
 $cbRootFile = $cbRootFile|0;
 $dwLocaleMask = $dwLocaleMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $nError = 0, $or$cond = 0, $pRootHandler = 0;
 var $pbRootFileEnd = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $hs;
 $2 = $pbRootFile;
 $3 = $cbRootFile;
 $4 = $dwLocaleMask;
 $5 = $2;
 $6 = $3;
 $7 = (($5) + ($6)|0);
 $pbRootFileEnd = $7;
 $8 = $2;
 $9 = ($8|0)==(0|0);
 $10 = $3;
 $11 = ($10>>>0)<=(4);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $nError = 1004;
 }
 $12 = (_malloc(72)|0);
 $pRootHandler = $12;
 $13 = $1;
 $14 = ((($13)) + 1840|0);
 HEAP32[$14>>2] = $12;
 $15 = $pRootHandler;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $0 = 12;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $17 = $pRootHandler;
 dest=$17; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $18 = $pRootHandler;
 HEAP32[$18>>2] = 116;
 $19 = $pRootHandler;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 117;
 $21 = $pRootHandler;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = 118;
 $23 = $pRootHandler;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = 119;
 $25 = $pRootHandler;
 $26 = ((($25)) + 20|0);
 HEAP32[$26>>2] = 120;
 $27 = $pRootHandler;
 $28 = ((($27)) + 24|0);
 HEAP32[$28>>2] = 121;
 $29 = $pRootHandler;
 $30 = $2;
 $31 = $pbRootFileEnd;
 $32 = $4;
 (__ZL16ParseWowRootFileP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_j($29,122,$30,$31,$32)|0);
 $33 = $pRootHandler;
 $34 = ((($33)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 32)|0;
 HEAP32[$34>>2] = $36;
 $37 = $pRootHandler;
 $38 = ((($37)) + 32|0);
 $39 = $pRootHandler;
 $40 = ((($39)) + 68|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($38,32,$41)|0);
 $nError = $42;
 $43 = $nError;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $nError;
  $0 = $45;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $46 = $pRootHandler;
 $47 = ((($46)) + 48|0);
 $48 = $pRootHandler;
 $49 = ((($48)) + 68|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__Z13Array_Create_P14_DYNAMIC_ARRAYjj($47,4,$50)|0);
 $nError = $51;
 $52 = $nError;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $nError;
  $0 = $54;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $55 = $pRootHandler;
 $56 = ((($55)) + 68|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (__Z10Map_Createjjj($57,8,16)|0);
 $59 = $pRootHandler;
 $60 = ((($59)) + 64|0);
 HEAP32[$60>>2] = $58;
 $61 = $pRootHandler;
 $62 = ((($61)) + 64|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $0 = 12;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 } else {
  $65 = $pRootHandler;
  $66 = $2;
  $67 = $pbRootFileEnd;
  $68 = $4;
  (__ZL16ParseWowRootFileP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_j($65,123,$66,$67,$68)|0);
  $69 = $pRootHandler;
  $70 = ((($69)) + 48|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $pRootHandler;
  $73 = ((($72)) + 48|0);
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  _qsort_pointer_array($71,$75,124,0);
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function __ZL17WowHandler_InsertP17TRootHandler_WoW6PKcPh($pRootHandler,$szFileName,$pbEncodingKey) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 $pbEncodingKey = $pbEncodingKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $FileDataId = 0, $pFileEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $pFileEntry = sp + 4|0;
 $1 = $pRootHandler;
 $2 = $szFileName;
 $3 = $pbEncodingKey;
 $FileDataId = 0;
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = ((($8)) + 32|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7>>>0)>=($11>>>0);
 if ($12) {
  $0 = 12;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $13 = $1;
 $14 = ((($13)) + 48|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = ((($17)) + 48|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($16>>>0)>=($20>>>0);
 if ($21) {
  $0 = 12;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $22 = $1;
 $23 = ((($22)) + 32|0);
 $24 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($23,0,1)|0);
 HEAP32[$pFileEntry>>2] = $24;
 $25 = HEAP32[$pFileEntry>>2]|0;
 $26 = ($25|0)!=(0|0);
 do {
  if ($26) {
   $27 = $1;
   $28 = ((($27)) + 48|0);
   (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($28,$pFileEntry,1)|0);
   $29 = $1;
   $30 = ((($29)) + 32|0);
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32>>>0)>(1);
   if ($33) {
    $34 = HEAP32[$pFileEntry>>2]|0;
    $35 = ((($34)) + -32|0);
    $36 = ((($35)) + 24|0);
    $37 = HEAP32[$36>>2]|0;
    $FileDataId = $37;
   }
   $38 = HEAP32[$pFileEntry>>2]|0;
   $39 = $3;
   dest=$38; src=$39; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $40 = $2;
   $41 = (__Z16CalcFileNameHashPKc($40)|0);
   $42 = tempRet0;
   $43 = HEAP32[$pFileEntry>>2]|0;
   $44 = ((($43)) + 16|0);
   $45 = $44;
   $46 = $45;
   HEAP32[$46>>2] = $41;
   $47 = (($45) + 4)|0;
   $48 = $47;
   HEAP32[$48>>2] = $42;
   $49 = $FileDataId;
   $50 = (($49) + 1)|0;
   $51 = HEAP32[$pFileEntry>>2]|0;
   $52 = ((($51)) + 24|0);
   HEAP32[$52>>2] = $50;
   $53 = HEAP32[$pFileEntry>>2]|0;
   $54 = ((($53)) + 28|0);
   HEAP32[$54>>2] = -1;
   $55 = $1;
   $56 = ((($55)) + 64|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$pFileEntry>>2]|0;
   $59 = ((($58)) + 16|0);
   $60 = (__Z14Map_FindObjectP9_CASC_MAPPvPj($57,$59,0)|0);
   $61 = ($60|0)==(0|0);
   if ($61) {
    $62 = $1;
    $63 = ((($62)) + 64|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = HEAP32[$pFileEntry>>2]|0;
    $66 = HEAP32[$pFileEntry>>2]|0;
    $67 = ((($66)) + 16|0);
    (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($64,$65,$67)|0);
    break;
   } else {
    ___assert_fail((22914|0),(22611|0),380,(22994|0));
    // unreachable;
   }
  }
 } while(0);
 $0 = 0;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function __ZL17WowHandler_SearchP17TRootHandler_WoW6P12_TCascSearchPjS3_S3_($pRootHandler,$pSearch,$0,$PtrLocaleFlags,$PtrFileDataId) {
 $pRootHandler = $pRootHandler|0;
 $pSearch = $pSearch|0;
 $0 = $0|0;
 $PtrLocaleFlags = $PtrLocaleFlags|0;
 $PtrFileDataId = $PtrFileDataId|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pFileEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $pRootHandler;
 $3 = $pSearch;
 $4 = $0;
 $5 = $PtrLocaleFlags;
 $6 = $PtrFileDataId;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 L1: do {
  if ($10) {
   while(1) {
    $11 = $3;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $3;
    $15 = ((($14)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $3;
    $18 = ((($17)) + 20|0);
    $19 = (__Z16ListFile_GetNextPvPKcPcj($13,$16,$18,1024)|0);
    $20 = ($19|0)!=(0);
    if (!($20)) {
     break L1;
    }
    $21 = $2;
    $22 = ((($21)) + 64|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $3;
    $25 = ((($24)) + 20|0);
    $26 = (__Z13FindRootEntryP9_CASC_MAPPKcPj($23,$25,0)|0);
    $pFileEntry = $26;
    $27 = $pFileEntry;
    $28 = ($27|0)!=(0|0);
    if ($28) {
     break;
    }
   }
   $29 = $5;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $pFileEntry;
    $32 = ((($31)) + 28|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $5;
    HEAP32[$34>>2] = $33;
   }
   $35 = $6;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $pFileEntry;
    $38 = ((($37)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $6;
    HEAP32[$40>>2] = $39;
   }
   $41 = $pFileEntry;
   $1 = $41;
   $42 = $1;
   STACKTOP = sp;return ($42|0);
  }
 } while(0);
 $1 = 0;
 $42 = $1;
 STACKTOP = sp;return ($42|0);
}
function __ZL20WowHandler_EndSearchP17TRootHandler_WoW6P12_TCascSearch($0,$pSearch) {
 $0 = $0|0;
 $pSearch = $pSearch|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $pSearch;
 $3 = $2;
 $4 = ((($3)) + 1044|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 1044|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 $10 = $2;
 $11 = ((($10)) + 1044|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL17WowHandler_GetKeyP17TRootHandler_WoW6PKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $FileDataId = 0, $FileDataIdLE = 0, $pFileEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $FileDataIdLE = sp + 16|0;
 $0 = $pRootHandler;
 $1 = $szFileName;
 $2 = $1;
 $3 = (__ZL16IsFileDataIdNamePKc($2)|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  (__Z21ConvertStringToBinaryPKcjPh($5,8,$FileDataIdLE)|0);
  $6 = (__Z23ConvertBytesToInteger_4Ph($FileDataIdLE)|0);
  $FileDataId = $6;
  $7 = $0;
  $8 = ((($7)) + 48|0);
  $9 = $FileDataId;
  $10 = (__Z13FindRootEntryR14_DYNAMIC_ARRAYj($8,$9)|0);
  $pFileEntry = $10;
  $16 = $pFileEntry;
  $17 = ($16|0)!=(0|0);
  $18 = $pFileEntry;
  $19 = $17 ? $18 : 0;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = $0;
  $12 = ((($11)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (__Z13FindRootEntryP9_CASC_MAPPKcPj($13,$14,0)|0);
  $pFileEntry = $15;
  $16 = $pFileEntry;
  $17 = ($16|0)!=(0|0);
  $18 = $pFileEntry;
  $19 = $17 ? $18 : 0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZL16WowHandler_CloseP17TRootHandler_WoW6($pRootHandler) {
 $pRootHandler = $pRootHandler|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 32|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($4);
 $5 = $0;
 $6 = ((($5)) + 48|0);
 __Z10Array_FreeP14_DYNAMIC_ARRAY($6);
 $7 = $0;
 $8 = ((($7)) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 __Z8Map_FreeP9_CASC_MAP($9);
 $10 = $0;
 _free($10);
 STACKTOP = sp;return;
}
function __ZL20WowHandler_GetFileIdP17TRootHandler_WoW6PKc($pRootHandler,$szFileName) {
 $pRootHandler = $pRootHandler|0;
 $szFileName = $szFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pFileEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $szFileName;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (__Z13FindRootEntryP9_CASC_MAPPKcPj($4,$5,0)|0);
 $pFileEntry = $6;
 $7 = $pFileEntry;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = $pFileEntry;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZL20ParseRoot_CountFilesP17TRootHandler_WoW6P16_CASC_ROOT_BLOCK($pRootHandler,$pRootBlock) {
 $pRootHandler = $pRootHandler|0;
 $pRootBlock = $pRootBlock|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $pRootHandler;
 $1 = $pRootBlock;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return 0;
}
function __ZL16ParseWowRootFileP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_j($pRootHandler,$pfnParseRoot,$pbRootFile,$pbRootFileEnd,$dwLocaleMask) {
 $pRootHandler = $pRootHandler|0;
 $pfnParseRoot = $pfnParseRoot|0;
 $pbRootFile = $pbRootFile|0;
 $pbRootFileEnd = $pbRootFileEnd|0;
 $dwLocaleMask = $dwLocaleMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pRootHandler;
 $1 = $pfnParseRoot;
 $2 = $pbRootFile;
 $3 = $pbRootFileEnd;
 $4 = $dwLocaleMask;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 (__ZL17ParseWowRootFile2P17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jh($5,$6,$7,$8,$9,0)|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 (__ZL17ParseWowRootFile2P17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jh($10,$11,$12,$13,$14,1)|0);
 STACKTOP = sp;return 0;
}
function __ZL24ParseRoot_AddRootEntriesP17TRootHandler_WoW6P16_CASC_ROOT_BLOCK($pRootHandler,$pRootBlock) {
 $pRootHandler = $pRootHandler|0;
 $pRootBlock = $pRootBlock|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dwFileDataId = 0, $i = 0, $pFileEntry = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $pFileEntry = sp + 8|0;
 $1 = $pRootHandler;
 $2 = $pRootBlock;
 $dwFileDataId = 0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((22569|0),(22611|0),188,(22685|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ((($7)) + 32|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  ___assert_fail((22710|0),(22611|0),189,(22685|0));
  // unreachable;
 }
 $12 = $1;
 $13 = ((($12)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((22752|0),(22611|0),190,(22685|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ((($16)) + 48|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  ___assert_fail((22806|0),(22611|0),191,(22685|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21>>>0)<($24>>>0);
  if (!($25)) {
   label = 18;
   break;
  }
  $26 = $1;
  $27 = ((($26)) + 32|0);
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = ((($30)) + 32|0);
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($29>>>0)>=($33>>>0);
  if ($34) {
   label = 12;
   break;
  }
  $35 = $1;
  $36 = ((($35)) + 32|0);
  $37 = (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($36,0,1)|0);
  HEAP32[$pFileEntry>>2] = $37;
  $38 = $1;
  $39 = ((($38)) + 48|0);
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $1;
  $43 = ((($42)) + 48|0);
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($41>>>0)>=($45>>>0);
  if ($46) {
   label = 14;
   break;
  }
  $47 = $1;
  $48 = ((($47)) + 48|0);
  (__Z12Array_InsertP14_DYNAMIC_ARRAYPKvj($48,$pFileEntry,1)|0);
  $49 = $i;
  $50 = $2;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + (($49*24)|0)|0);
  $54 = ((($53)) + 16|0);
  $55 = $54;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$pFileEntry>>2]|0;
  $62 = ((($61)) + 16|0);
  $63 = $62;
  $64 = $63;
  HEAP32[$64>>2] = $57;
  $65 = (($63) + 4)|0;
  $66 = $65;
  HEAP32[$66>>2] = $60;
  $67 = $dwFileDataId;
  $68 = $i;
  $69 = $2;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($68<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($67) + ($73))|0;
  $75 = HEAP32[$pFileEntry>>2]|0;
  $76 = ((($75)) + 24|0);
  HEAP32[$76>>2] = $74;
  $77 = $2;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP32[$pFileEntry>>2]|0;
  $82 = ((($81)) + 28|0);
  HEAP32[$82>>2] = $80;
  $83 = HEAP32[$pFileEntry>>2]|0;
  $84 = $i;
  $85 = $2;
  $86 = ((($85)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + (($84*24)|0)|0);
  dest=$83; src=$88; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $89 = $1;
  $90 = ((($89)) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[$pFileEntry>>2]|0;
  $93 = HEAP32[$pFileEntry>>2]|0;
  $94 = ((($93)) + 16|0);
  (__Z16Map_InsertObjectP9_CASC_MAPPvS1_($91,$92,$94)|0);
  $95 = HEAP32[$pFileEntry>>2]|0;
  $96 = ((($95)) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 1)|0;
  $99 = HEAP32[$pFileEntry>>2]|0;
  $100 = ((($99)) + 24|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($98>>>0)>($101>>>0);
  if (!($102)) {
   label = 16;
   break;
  }
  $103 = HEAP32[$pFileEntry>>2]|0;
  $104 = ((($103)) + 24|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 1)|0;
  $dwFileDataId = $106;
  $107 = HEAP32[$pFileEntry>>2]|0;
  $108 = ((($107)) + 32|0);
  HEAP32[$pFileEntry>>2] = $108;
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 if ((label|0) == 12) {
  $0 = 105;
  $111 = $0;
  STACKTOP = sp;return ($111|0);
 }
 else if ((label|0) == 14) {
  $0 = 105;
  $111 = $0;
  STACKTOP = sp;return ($111|0);
 }
 else if ((label|0) == 16) {
  ___assert_fail((22860|0),(22611|0),215,(22685|0));
  // unreachable;
 }
 else if ((label|0) == 18) {
  $0 = 0;
  $111 = $0;
  STACKTOP = sp;return ($111|0);
 }
 return (0)|0;
}
function __ZL17FileDataIdComparePKvS0_S0_($0,$pvFile1,$pvFile2) {
 $0 = $0|0;
 $pvFile1 = $pvFile1|0;
 $pvFile2 = $pvFile2|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $pvFile1;
 $3 = $pvFile2;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZL17ParseWowRootFile2P17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jh($pRootHandler,$pfnParseRoot,$pbRootFile,$pbRootFileEnd,$dwLocaleMask,$bAudioLocale) {
 $pRootHandler = $pRootHandler|0;
 $pfnParseRoot = $pfnParseRoot|0;
 $pbRootFile = $pbRootFile|0;
 $pbRootFileEnd = $pbRootFileEnd|0;
 $dwLocaleMask = $dwLocaleMask|0;
 $bAudioLocale = $bAudioLocale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = $pRootHandler;
 $1 = $pfnParseRoot;
 $2 = $pbRootFile;
 $3 = $pbRootFileEnd;
 $4 = $dwLocaleMask;
 $5 = $bAudioLocale;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 (__ZL24ParseWowRootFileInternalP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jhh($6,$7,$8,$9,$10,0,$11)|0);
 $12 = $4;
 $13 = ($12|0)==(512);
 if ($13) {
  $14 = $0;
  $15 = $1;
  $16 = $2;
  $17 = $3;
  $18 = $5;
  (__ZL24ParseWowRootFileInternalP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jhh($14,$15,$16,$17,2,0,$18)|0);
 }
 $19 = $4;
 $20 = ($19|0)==(65536);
 if (!($20)) {
  STACKTOP = sp;return 0;
 }
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $24 = $3;
 $25 = $5;
 (__ZL24ParseWowRootFileInternalP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jhh($21,$22,$23,$24,16384,0,$25)|0);
 STACKTOP = sp;return 0;
}
function __ZL24ParseWowRootFileInternalP17TRootHandler_WoW6PFiS0_P16_CASC_ROOT_BLOCKEPhS5_jhh($pRootHandler,$pfnParseRoot,$pbRootFile,$pbRootFileEnd,$dwLocaleMask,$bOverrideArchive,$bAudioLocale) {
 $pRootHandler = $pRootHandler|0;
 $pfnParseRoot = $pfnParseRoot|0;
 $pbRootFile = $pbRootFile|0;
 $pbRootFileEnd = $pbRootFileEnd|0;
 $dwLocaleMask = $dwLocaleMask|0;
 $bOverrideArchive = $bOverrideArchive|0;
 $bAudioLocale = $bAudioLocale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $RootBlock = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $RootBlock = sp;
 $0 = $pRootHandler;
 $1 = $pfnParseRoot;
 $2 = $pbRootFile;
 $3 = $pbRootFileEnd;
 $4 = $dwLocaleMask;
 $5 = $bOverrideArchive;
 $6 = $bAudioLocale;
 while(1) {
  $7 = $2;
  $8 = $3;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   label = 10;
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = (__Z17VerifyLocaleBlockP16_CASC_ROOT_BLOCKPhS1_($RootBlock,$10,$11)|0);
  $2 = $12;
  $13 = $2;
  $14 = ($13|0)==(0|0);
  if ($14) {
   label = 10;
   break;
  }
  $15 = HEAP32[$RootBlock>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 256;
  $19 = ($18|0)!=(0);
  if ($19) {
   continue;
  }
  $20 = HEAP32[$RootBlock>>2]|0;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 128;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $5;
   $26 = $25&255;
   $27 = ($26|0)==(0);
   if ($27) {
    continue;
   }
  }
  $28 = HEAP32[$RootBlock>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 >>> 31;
  $32 = $6;
  $33 = $32&255;
  $34 = ($31|0)!=($33|0);
  if ($34) {
   continue;
  }
  $35 = HEAP32[$RootBlock>>2]|0;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $4;
  $39 = $37 & $38;
  $40 = ($39|0)==(0);
  if ($40) {
   continue;
  }
  $41 = $1;
  $42 = $0;
  (FUNCTION_TABLE_iii[$41 & 127]($42,$RootBlock)|0);
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZL16IsFileDataIdNamePKc($szFileName) {
 $szFileName = $szFileName|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BinaryValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 8|0;
 $BinaryValue = sp + 4|0;
 $1 = $szFileName;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (13838 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(70);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (13838 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(73);
  if ($16) {
   $17 = $1;
   $18 = ((($17)) + 2|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = (13838 + ($20)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)==(76);
   if ($24) {
    $25 = $1;
    $26 = ((($25)) + 3|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = (13838 + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = ($31|0)==(69);
    if ($32) {
     $33 = $1;
     $34 = ((($33)) + 4|0);
     $35 = (__Z21ConvertStringToBinaryPKcjPh($34,8,$BinaryValue)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $37 = $1;
      $38 = ((($37)) + 12|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = $39 << 24 >> 24;
      $41 = ($40|0)==(0);
      if ($41) {
       $47 = 1;
      } else {
       $42 = $1;
       $43 = ((($42)) + 12|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = $44 << 24 >> 24;
       $46 = ($45|0)==(46);
       $47 = $46;
      }
      $$expand_i1_val = $47&1;
      HEAP8[$0>>0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $48 = $$pre_trunc&1;
      STACKTOP = sp;return ($48|0);
     }
    }
   }
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $48 = $$pre_trunc&1;
 STACKTOP = sp;return ($48|0);
}
function _md5_init($md) {
 $md = $md|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $md;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  _crypt_argchk(23012,23023,235);
 }
 $3 = $0;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = 1732584193;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = -271733879;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = -1732584194;
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = 271733878;
 $14 = $0;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = $0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return 0;
}
function _md5_process($md,$in,$inlen) {
 $md = $md|0;
 $in = $in|0;
 $inlen = $inlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $err = 0;
 var $n = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $md;
 $2 = $in;
 $3 = $inlen;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _crypt_argchk(23012,23023,252);
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  _crypt_argchk(23104,23023,252);
 }
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)>(64);
 if ($11) {
  $0 = 16;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 while(1) {
  $12 = $3;
  $13 = ($12>>>0)>(0);
  if (!($13)) {
   label = 19;
   break;
  }
  $14 = $1;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  $18 = $3;
  $19 = ($18>>>0)>=(64);
  $or$cond = $17 & $19;
  if ($or$cond) {
   $20 = $1;
   $21 = $2;
   $22 = (_md5_compress($20,$21)|0);
   $err = $22;
   $23 = ($22|0)!=(0);
   if ($23) {
    label = 10;
    break;
   }
   $25 = $1;
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (_i64Add(($28|0),($31|0),512,0)|0);
   $33 = tempRet0;
   $34 = $25;
   $35 = $34;
   HEAP32[$35>>2] = $32;
   $36 = (($34) + 4)|0;
   $37 = $36;
   HEAP32[$37>>2] = $33;
   $38 = $2;
   $39 = ((($38)) + 64|0);
   $2 = $39;
   $40 = $3;
   $41 = (($40) - 64)|0;
   $3 = $41;
   continue;
  }
  $42 = $3;
  $43 = $1;
  $44 = ((($43)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (64 - ($45))|0;
  $47 = ($42>>>0)<($46>>>0);
  if ($47) {
   $48 = $3;
   $53 = $48;
  } else {
   $49 = $1;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (64 - ($51))|0;
   $53 = $52;
  }
  $n = $53;
  $54 = $1;
  $55 = ((($54)) + 28|0);
  $56 = $1;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) + ($58)|0);
  $60 = $2;
  $61 = $n;
  _memcpy(($59|0),($60|0),($61|0))|0;
  $62 = $n;
  $63 = $1;
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62))|0;
  HEAP32[$64>>2] = $66;
  $67 = $n;
  $68 = $2;
  $69 = (($68) + ($67)|0);
  $2 = $69;
  $70 = $n;
  $71 = $3;
  $72 = (($71) - ($70))|0;
  $3 = $72;
  $73 = $1;
  $74 = ((($73)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(64);
  if (!($76)) {
   continue;
  }
  $77 = $1;
  $78 = $1;
  $79 = ((($78)) + 28|0);
  $80 = (_md5_compress($77,$79)|0);
  $err = $80;
  $81 = ($80|0)!=(0);
  if ($81) {
   label = 17;
   break;
  }
  $83 = $1;
  $84 = $83;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (_i64Add(($86|0),($89|0),512,0)|0);
  $91 = tempRet0;
  $92 = $83;
  $93 = $92;
  HEAP32[$93>>2] = $90;
  $94 = (($92) + 4)|0;
  $95 = $94;
  HEAP32[$95>>2] = $91;
  $96 = $1;
  $97 = ((($96)) + 24|0);
  HEAP32[$97>>2] = 0;
 }
 if ((label|0) == 10) {
  $24 = $err;
  $0 = $24;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 else if ((label|0) == 17) {
  $82 = $err;
  $0 = $82;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function _md5_done($md,$out) {
 $md = $md|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $md;
 $2 = $out;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  _crypt_argchk(23012,23023,264);
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  _crypt_argchk(23115,23023,265);
 }
 $7 = $1;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>=(64);
 if ($10) {
  $0 = 16;
  $236 = $0;
  STACKTOP = sp;return ($236|0);
 }
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<3;
 $15 = $1;
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_i64Add(($18|0),($21|0),($14|0),0)|0);
 $23 = tempRet0;
 $24 = $15;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = $1;
 $33 = ((($32)) + 28|0);
 $34 = (($33) + ($30)|0);
 HEAP8[$34>>0] = -128;
 $35 = $1;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37>>>0)>(56);
 if ($38) {
  while(1) {
   $39 = $1;
   $40 = ((($39)) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41>>>0)<(64);
   $43 = $1;
   if (!($42)) {
    break;
   }
   $44 = ((($43)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$44>>2] = $46;
   $47 = $1;
   $48 = ((($47)) + 28|0);
   $49 = (($48) + ($45)|0);
   HEAP8[$49>>0] = 0;
  }
  $50 = $1;
  $51 = ((($50)) + 28|0);
  (_md5_compress($43,$51)|0);
  $52 = $1;
  $53 = ((($52)) + 24|0);
  HEAP32[$53>>2] = 0;
 }
 while(1) {
  $54 = $1;
  $55 = ((($54)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56>>>0)<(56);
  $58 = $1;
  if (!($57)) {
   break;
  }
  $59 = ((($58)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[$59>>2] = $61;
  $62 = $1;
  $63 = ((($62)) + 28|0);
  $64 = (($63) + ($60)|0);
  HEAP8[$64>>0] = 0;
 }
 $65 = $58;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (_bitshift64Lshr(($67|0),($70|0),56)|0);
 $72 = tempRet0;
 $73 = $71 & 255;
 $74 = $73&255;
 $75 = $1;
 $76 = ((($75)) + 28|0);
 $77 = ((($76)) + 56|0);
 $78 = ((($77)) + 7|0);
 HEAP8[$78>>0] = $74;
 $79 = $1;
 $80 = $79;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (_bitshift64Lshr(($82|0),($85|0),48)|0);
 $87 = tempRet0;
 $88 = $86 & 255;
 $89 = $88&255;
 $90 = $1;
 $91 = ((($90)) + 28|0);
 $92 = ((($91)) + 56|0);
 $93 = ((($92)) + 6|0);
 HEAP8[$93>>0] = $89;
 $94 = $1;
 $95 = $94;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (_bitshift64Lshr(($97|0),($100|0),40)|0);
 $102 = tempRet0;
 $103 = $101 & 255;
 $104 = $103&255;
 $105 = $1;
 $106 = ((($105)) + 28|0);
 $107 = ((($106)) + 56|0);
 $108 = ((($107)) + 5|0);
 HEAP8[$108>>0] = $104;
 $109 = $1;
 $110 = $109;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($110) + 4)|0;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 255;
 $117 = $116&255;
 $118 = $1;
 $119 = ((($118)) + 28|0);
 $120 = ((($119)) + 56|0);
 $121 = ((($120)) + 4|0);
 HEAP8[$121>>0] = $117;
 $122 = $1;
 $123 = $122;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($123) + 4)|0;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = (_bitshift64Lshr(($125|0),($128|0),24)|0);
 $130 = tempRet0;
 $131 = $129 & 255;
 $132 = $131&255;
 $133 = $1;
 $134 = ((($133)) + 28|0);
 $135 = ((($134)) + 56|0);
 $136 = ((($135)) + 3|0);
 HEAP8[$136>>0] = $132;
 $137 = $1;
 $138 = $137;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = (_bitshift64Lshr(($140|0),($143|0),16)|0);
 $145 = tempRet0;
 $146 = $144 & 255;
 $147 = $146&255;
 $148 = $1;
 $149 = ((($148)) + 28|0);
 $150 = ((($149)) + 56|0);
 $151 = ((($150)) + 2|0);
 HEAP8[$151>>0] = $147;
 $152 = $1;
 $153 = $152;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $156 = (($153) + 4)|0;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (_bitshift64Lshr(($155|0),($158|0),8)|0);
 $160 = tempRet0;
 $161 = $159 & 255;
 $162 = $161&255;
 $163 = $1;
 $164 = ((($163)) + 28|0);
 $165 = ((($164)) + 56|0);
 $166 = ((($165)) + 1|0);
 HEAP8[$166>>0] = $162;
 $167 = $1;
 $168 = $167;
 $169 = $168;
 $170 = HEAP32[$169>>2]|0;
 $171 = (($168) + 4)|0;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = $170 & 255;
 $175 = $174&255;
 $176 = $1;
 $177 = ((($176)) + 28|0);
 $178 = ((($177)) + 56|0);
 HEAP8[$178>>0] = $175;
 $179 = $1;
 $180 = $1;
 $181 = ((($180)) + 28|0);
 (_md5_compress($179,$181)|0);
 $i = 0;
 while(1) {
  $182 = $i;
  $183 = ($182|0)<(4);
  if (!($183)) {
   break;
  }
  $184 = $i;
  $185 = $1;
  $186 = ((($185)) + 8|0);
  $187 = (($186) + ($184<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $188 >>> 24;
  $190 = $189 & 255;
  $191 = $190&255;
  $192 = $2;
  $193 = $i;
  $194 = $193<<2;
  $195 = (($192) + ($194)|0);
  $196 = ((($195)) + 3|0);
  HEAP8[$196>>0] = $191;
  $197 = $i;
  $198 = $1;
  $199 = ((($198)) + 8|0);
  $200 = (($199) + ($197<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $201 >>> 16;
  $203 = $202 & 255;
  $204 = $203&255;
  $205 = $2;
  $206 = $i;
  $207 = $206<<2;
  $208 = (($205) + ($207)|0);
  $209 = ((($208)) + 2|0);
  HEAP8[$209>>0] = $204;
  $210 = $i;
  $211 = $1;
  $212 = ((($211)) + 8|0);
  $213 = (($212) + ($210<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $214 >>> 8;
  $216 = $215 & 255;
  $217 = $216&255;
  $218 = $2;
  $219 = $i;
  $220 = $219<<2;
  $221 = (($218) + ($220)|0);
  $222 = ((($221)) + 1|0);
  HEAP8[$222>>0] = $217;
  $223 = $i;
  $224 = $1;
  $225 = ((($224)) + 8|0);
  $226 = (($225) + ($223<<2)|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = $227 & 255;
  $229 = $228&255;
  $230 = $2;
  $231 = $i;
  $232 = $231<<2;
  $233 = (($230) + ($232)|0);
  HEAP8[$233>>0] = $229;
  $234 = $i;
  $235 = (($234) + 1)|0;
  $i = $235;
 }
 $0 = 0;
 $236 = $0;
 STACKTOP = sp;return ($236|0);
}
function _md5_compress($md,$buf) {
 $md = $md|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $W = 0, $a = 0, $b = 0, $c = 0, $d = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $W = sp + 16|0;
 $0 = $md;
 $1 = $buf;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(16);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = $i;
  $6 = $5<<2;
  $7 = (($4) + ($6)|0);
  $8 = ((($7)) + 3|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 & 255;
  $12 = $11 << 24;
  $13 = $1;
  $14 = $i;
  $15 = $14<<2;
  $16 = (($13) + ($15)|0);
  $17 = ((($16)) + 2|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 & 255;
  $21 = $20 << 16;
  $22 = $12 | $21;
  $23 = $1;
  $24 = $i;
  $25 = $24<<2;
  $26 = (($23) + ($25)|0);
  $27 = ((($26)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 & 255;
  $31 = $30 << 8;
  $32 = $22 | $31;
  $33 = $1;
  $34 = $i;
  $35 = $34<<2;
  $36 = (($33) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 & 255;
  $40 = $32 | $39;
  $41 = $i;
  $42 = (($W) + ($41<<2)|0);
  HEAP32[$42>>2] = $40;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $45 = $0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $a = $47;
 $48 = $0;
 $49 = ((($48)) + 8|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $b = $51;
 $52 = $0;
 $53 = ((($52)) + 8|0);
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $c = $55;
 $56 = $0;
 $57 = ((($56)) + 8|0);
 $58 = ((($57)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $d = $59;
 $60 = $a;
 $61 = $d;
 $62 = $b;
 $63 = $c;
 $64 = $d;
 $65 = $63 ^ $64;
 $66 = $62 & $65;
 $67 = $61 ^ $66;
 $68 = (($60) + ($67))|0;
 $69 = HEAP32[$W>>2]|0;
 $70 = (($68) + ($69))|0;
 $71 = (($70) + -680876936)|0;
 $a = $71;
 $72 = $a;
 $73 = $72 << 7;
 $74 = $a;
 $75 = $74 >>> 25;
 $76 = $73 | $75;
 $77 = $b;
 $78 = (($76) + ($77))|0;
 $a = $78;
 $79 = $d;
 $80 = $c;
 $81 = $a;
 $82 = $b;
 $83 = $c;
 $84 = $82 ^ $83;
 $85 = $81 & $84;
 $86 = $80 ^ $85;
 $87 = (($79) + ($86))|0;
 $88 = ((($W)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + ($89))|0;
 $91 = (($90) + -389564586)|0;
 $d = $91;
 $92 = $d;
 $93 = $92 << 12;
 $94 = $d;
 $95 = $94 >>> 20;
 $96 = $93 | $95;
 $97 = $a;
 $98 = (($96) + ($97))|0;
 $d = $98;
 $99 = $c;
 $100 = $b;
 $101 = $d;
 $102 = $a;
 $103 = $b;
 $104 = $102 ^ $103;
 $105 = $101 & $104;
 $106 = $100 ^ $105;
 $107 = (($99) + ($106))|0;
 $108 = ((($W)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + ($109))|0;
 $111 = (($110) + 606105819)|0;
 $c = $111;
 $112 = $c;
 $113 = $112 << 17;
 $114 = $c;
 $115 = $114 >>> 15;
 $116 = $113 | $115;
 $117 = $d;
 $118 = (($116) + ($117))|0;
 $c = $118;
 $119 = $b;
 $120 = $a;
 $121 = $c;
 $122 = $d;
 $123 = $a;
 $124 = $122 ^ $123;
 $125 = $121 & $124;
 $126 = $120 ^ $125;
 $127 = (($119) + ($126))|0;
 $128 = ((($W)) + 12|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($127) + ($129))|0;
 $131 = (($130) + -1044525330)|0;
 $b = $131;
 $132 = $b;
 $133 = $132 << 22;
 $134 = $b;
 $135 = $134 >>> 10;
 $136 = $133 | $135;
 $137 = $c;
 $138 = (($136) + ($137))|0;
 $b = $138;
 $139 = $a;
 $140 = $d;
 $141 = $b;
 $142 = $c;
 $143 = $d;
 $144 = $142 ^ $143;
 $145 = $141 & $144;
 $146 = $140 ^ $145;
 $147 = (($139) + ($146))|0;
 $148 = ((($W)) + 16|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + ($149))|0;
 $151 = (($150) + -176418897)|0;
 $a = $151;
 $152 = $a;
 $153 = $152 << 7;
 $154 = $a;
 $155 = $154 >>> 25;
 $156 = $153 | $155;
 $157 = $b;
 $158 = (($156) + ($157))|0;
 $a = $158;
 $159 = $d;
 $160 = $c;
 $161 = $a;
 $162 = $b;
 $163 = $c;
 $164 = $162 ^ $163;
 $165 = $161 & $164;
 $166 = $160 ^ $165;
 $167 = (($159) + ($166))|0;
 $168 = ((($W)) + 20|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = (($167) + ($169))|0;
 $171 = (($170) + 1200080426)|0;
 $d = $171;
 $172 = $d;
 $173 = $172 << 12;
 $174 = $d;
 $175 = $174 >>> 20;
 $176 = $173 | $175;
 $177 = $a;
 $178 = (($176) + ($177))|0;
 $d = $178;
 $179 = $c;
 $180 = $b;
 $181 = $d;
 $182 = $a;
 $183 = $b;
 $184 = $182 ^ $183;
 $185 = $181 & $184;
 $186 = $180 ^ $185;
 $187 = (($179) + ($186))|0;
 $188 = ((($W)) + 24|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = (($187) + ($189))|0;
 $191 = (($190) + -1473231341)|0;
 $c = $191;
 $192 = $c;
 $193 = $192 << 17;
 $194 = $c;
 $195 = $194 >>> 15;
 $196 = $193 | $195;
 $197 = $d;
 $198 = (($196) + ($197))|0;
 $c = $198;
 $199 = $b;
 $200 = $a;
 $201 = $c;
 $202 = $d;
 $203 = $a;
 $204 = $202 ^ $203;
 $205 = $201 & $204;
 $206 = $200 ^ $205;
 $207 = (($199) + ($206))|0;
 $208 = ((($W)) + 28|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (($207) + ($209))|0;
 $211 = (($210) + -45705983)|0;
 $b = $211;
 $212 = $b;
 $213 = $212 << 22;
 $214 = $b;
 $215 = $214 >>> 10;
 $216 = $213 | $215;
 $217 = $c;
 $218 = (($216) + ($217))|0;
 $b = $218;
 $219 = $a;
 $220 = $d;
 $221 = $b;
 $222 = $c;
 $223 = $d;
 $224 = $222 ^ $223;
 $225 = $221 & $224;
 $226 = $220 ^ $225;
 $227 = (($219) + ($226))|0;
 $228 = ((($W)) + 32|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($227) + ($229))|0;
 $231 = (($230) + 1770035416)|0;
 $a = $231;
 $232 = $a;
 $233 = $232 << 7;
 $234 = $a;
 $235 = $234 >>> 25;
 $236 = $233 | $235;
 $237 = $b;
 $238 = (($236) + ($237))|0;
 $a = $238;
 $239 = $d;
 $240 = $c;
 $241 = $a;
 $242 = $b;
 $243 = $c;
 $244 = $242 ^ $243;
 $245 = $241 & $244;
 $246 = $240 ^ $245;
 $247 = (($239) + ($246))|0;
 $248 = ((($W)) + 36|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (($247) + ($249))|0;
 $251 = (($250) + -1958414417)|0;
 $d = $251;
 $252 = $d;
 $253 = $252 << 12;
 $254 = $d;
 $255 = $254 >>> 20;
 $256 = $253 | $255;
 $257 = $a;
 $258 = (($256) + ($257))|0;
 $d = $258;
 $259 = $c;
 $260 = $b;
 $261 = $d;
 $262 = $a;
 $263 = $b;
 $264 = $262 ^ $263;
 $265 = $261 & $264;
 $266 = $260 ^ $265;
 $267 = (($259) + ($266))|0;
 $268 = ((($W)) + 40|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = (($267) + ($269))|0;
 $271 = (($270) + -42063)|0;
 $c = $271;
 $272 = $c;
 $273 = $272 << 17;
 $274 = $c;
 $275 = $274 >>> 15;
 $276 = $273 | $275;
 $277 = $d;
 $278 = (($276) + ($277))|0;
 $c = $278;
 $279 = $b;
 $280 = $a;
 $281 = $c;
 $282 = $d;
 $283 = $a;
 $284 = $282 ^ $283;
 $285 = $281 & $284;
 $286 = $280 ^ $285;
 $287 = (($279) + ($286))|0;
 $288 = ((($W)) + 44|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (($287) + ($289))|0;
 $291 = (($290) + -1990404162)|0;
 $b = $291;
 $292 = $b;
 $293 = $292 << 22;
 $294 = $b;
 $295 = $294 >>> 10;
 $296 = $293 | $295;
 $297 = $c;
 $298 = (($296) + ($297))|0;
 $b = $298;
 $299 = $a;
 $300 = $d;
 $301 = $b;
 $302 = $c;
 $303 = $d;
 $304 = $302 ^ $303;
 $305 = $301 & $304;
 $306 = $300 ^ $305;
 $307 = (($299) + ($306))|0;
 $308 = ((($W)) + 48|0);
 $309 = HEAP32[$308>>2]|0;
 $310 = (($307) + ($309))|0;
 $311 = (($310) + 1804603682)|0;
 $a = $311;
 $312 = $a;
 $313 = $312 << 7;
 $314 = $a;
 $315 = $314 >>> 25;
 $316 = $313 | $315;
 $317 = $b;
 $318 = (($316) + ($317))|0;
 $a = $318;
 $319 = $d;
 $320 = $c;
 $321 = $a;
 $322 = $b;
 $323 = $c;
 $324 = $322 ^ $323;
 $325 = $321 & $324;
 $326 = $320 ^ $325;
 $327 = (($319) + ($326))|0;
 $328 = ((($W)) + 52|0);
 $329 = HEAP32[$328>>2]|0;
 $330 = (($327) + ($329))|0;
 $331 = (($330) + -40341101)|0;
 $d = $331;
 $332 = $d;
 $333 = $332 << 12;
 $334 = $d;
 $335 = $334 >>> 20;
 $336 = $333 | $335;
 $337 = $a;
 $338 = (($336) + ($337))|0;
 $d = $338;
 $339 = $c;
 $340 = $b;
 $341 = $d;
 $342 = $a;
 $343 = $b;
 $344 = $342 ^ $343;
 $345 = $341 & $344;
 $346 = $340 ^ $345;
 $347 = (($339) + ($346))|0;
 $348 = ((($W)) + 56|0);
 $349 = HEAP32[$348>>2]|0;
 $350 = (($347) + ($349))|0;
 $351 = (($350) + -1502002290)|0;
 $c = $351;
 $352 = $c;
 $353 = $352 << 17;
 $354 = $c;
 $355 = $354 >>> 15;
 $356 = $353 | $355;
 $357 = $d;
 $358 = (($356) + ($357))|0;
 $c = $358;
 $359 = $b;
 $360 = $a;
 $361 = $c;
 $362 = $d;
 $363 = $a;
 $364 = $362 ^ $363;
 $365 = $361 & $364;
 $366 = $360 ^ $365;
 $367 = (($359) + ($366))|0;
 $368 = ((($W)) + 60|0);
 $369 = HEAP32[$368>>2]|0;
 $370 = (($367) + ($369))|0;
 $371 = (($370) + 1236535329)|0;
 $b = $371;
 $372 = $b;
 $373 = $372 << 22;
 $374 = $b;
 $375 = $374 >>> 10;
 $376 = $373 | $375;
 $377 = $c;
 $378 = (($376) + ($377))|0;
 $b = $378;
 $379 = $a;
 $380 = $c;
 $381 = $d;
 $382 = $c;
 $383 = $b;
 $384 = $382 ^ $383;
 $385 = $381 & $384;
 $386 = $380 ^ $385;
 $387 = (($379) + ($386))|0;
 $388 = ((($W)) + 4|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = (($387) + ($389))|0;
 $391 = (($390) + -165796510)|0;
 $a = $391;
 $392 = $a;
 $393 = $392 << 5;
 $394 = $a;
 $395 = $394 >>> 27;
 $396 = $393 | $395;
 $397 = $b;
 $398 = (($396) + ($397))|0;
 $a = $398;
 $399 = $d;
 $400 = $b;
 $401 = $c;
 $402 = $b;
 $403 = $a;
 $404 = $402 ^ $403;
 $405 = $401 & $404;
 $406 = $400 ^ $405;
 $407 = (($399) + ($406))|0;
 $408 = ((($W)) + 24|0);
 $409 = HEAP32[$408>>2]|0;
 $410 = (($407) + ($409))|0;
 $411 = (($410) + -1069501632)|0;
 $d = $411;
 $412 = $d;
 $413 = $412 << 9;
 $414 = $d;
 $415 = $414 >>> 23;
 $416 = $413 | $415;
 $417 = $a;
 $418 = (($416) + ($417))|0;
 $d = $418;
 $419 = $c;
 $420 = $a;
 $421 = $b;
 $422 = $a;
 $423 = $d;
 $424 = $422 ^ $423;
 $425 = $421 & $424;
 $426 = $420 ^ $425;
 $427 = (($419) + ($426))|0;
 $428 = ((($W)) + 44|0);
 $429 = HEAP32[$428>>2]|0;
 $430 = (($427) + ($429))|0;
 $431 = (($430) + 643717713)|0;
 $c = $431;
 $432 = $c;
 $433 = $432 << 14;
 $434 = $c;
 $435 = $434 >>> 18;
 $436 = $433 | $435;
 $437 = $d;
 $438 = (($436) + ($437))|0;
 $c = $438;
 $439 = $b;
 $440 = $d;
 $441 = $a;
 $442 = $d;
 $443 = $c;
 $444 = $442 ^ $443;
 $445 = $441 & $444;
 $446 = $440 ^ $445;
 $447 = (($439) + ($446))|0;
 $448 = HEAP32[$W>>2]|0;
 $449 = (($447) + ($448))|0;
 $450 = (($449) + -373897302)|0;
 $b = $450;
 $451 = $b;
 $452 = $451 << 20;
 $453 = $b;
 $454 = $453 >>> 12;
 $455 = $452 | $454;
 $456 = $c;
 $457 = (($455) + ($456))|0;
 $b = $457;
 $458 = $a;
 $459 = $c;
 $460 = $d;
 $461 = $c;
 $462 = $b;
 $463 = $461 ^ $462;
 $464 = $460 & $463;
 $465 = $459 ^ $464;
 $466 = (($458) + ($465))|0;
 $467 = ((($W)) + 20|0);
 $468 = HEAP32[$467>>2]|0;
 $469 = (($466) + ($468))|0;
 $470 = (($469) + -701558691)|0;
 $a = $470;
 $471 = $a;
 $472 = $471 << 5;
 $473 = $a;
 $474 = $473 >>> 27;
 $475 = $472 | $474;
 $476 = $b;
 $477 = (($475) + ($476))|0;
 $a = $477;
 $478 = $d;
 $479 = $b;
 $480 = $c;
 $481 = $b;
 $482 = $a;
 $483 = $481 ^ $482;
 $484 = $480 & $483;
 $485 = $479 ^ $484;
 $486 = (($478) + ($485))|0;
 $487 = ((($W)) + 40|0);
 $488 = HEAP32[$487>>2]|0;
 $489 = (($486) + ($488))|0;
 $490 = (($489) + 38016083)|0;
 $d = $490;
 $491 = $d;
 $492 = $491 << 9;
 $493 = $d;
 $494 = $493 >>> 23;
 $495 = $492 | $494;
 $496 = $a;
 $497 = (($495) + ($496))|0;
 $d = $497;
 $498 = $c;
 $499 = $a;
 $500 = $b;
 $501 = $a;
 $502 = $d;
 $503 = $501 ^ $502;
 $504 = $500 & $503;
 $505 = $499 ^ $504;
 $506 = (($498) + ($505))|0;
 $507 = ((($W)) + 60|0);
 $508 = HEAP32[$507>>2]|0;
 $509 = (($506) + ($508))|0;
 $510 = (($509) + -660478335)|0;
 $c = $510;
 $511 = $c;
 $512 = $511 << 14;
 $513 = $c;
 $514 = $513 >>> 18;
 $515 = $512 | $514;
 $516 = $d;
 $517 = (($515) + ($516))|0;
 $c = $517;
 $518 = $b;
 $519 = $d;
 $520 = $a;
 $521 = $d;
 $522 = $c;
 $523 = $521 ^ $522;
 $524 = $520 & $523;
 $525 = $519 ^ $524;
 $526 = (($518) + ($525))|0;
 $527 = ((($W)) + 16|0);
 $528 = HEAP32[$527>>2]|0;
 $529 = (($526) + ($528))|0;
 $530 = (($529) + -405537848)|0;
 $b = $530;
 $531 = $b;
 $532 = $531 << 20;
 $533 = $b;
 $534 = $533 >>> 12;
 $535 = $532 | $534;
 $536 = $c;
 $537 = (($535) + ($536))|0;
 $b = $537;
 $538 = $a;
 $539 = $c;
 $540 = $d;
 $541 = $c;
 $542 = $b;
 $543 = $541 ^ $542;
 $544 = $540 & $543;
 $545 = $539 ^ $544;
 $546 = (($538) + ($545))|0;
 $547 = ((($W)) + 36|0);
 $548 = HEAP32[$547>>2]|0;
 $549 = (($546) + ($548))|0;
 $550 = (($549) + 568446438)|0;
 $a = $550;
 $551 = $a;
 $552 = $551 << 5;
 $553 = $a;
 $554 = $553 >>> 27;
 $555 = $552 | $554;
 $556 = $b;
 $557 = (($555) + ($556))|0;
 $a = $557;
 $558 = $d;
 $559 = $b;
 $560 = $c;
 $561 = $b;
 $562 = $a;
 $563 = $561 ^ $562;
 $564 = $560 & $563;
 $565 = $559 ^ $564;
 $566 = (($558) + ($565))|0;
 $567 = ((($W)) + 56|0);
 $568 = HEAP32[$567>>2]|0;
 $569 = (($566) + ($568))|0;
 $570 = (($569) + -1019803690)|0;
 $d = $570;
 $571 = $d;
 $572 = $571 << 9;
 $573 = $d;
 $574 = $573 >>> 23;
 $575 = $572 | $574;
 $576 = $a;
 $577 = (($575) + ($576))|0;
 $d = $577;
 $578 = $c;
 $579 = $a;
 $580 = $b;
 $581 = $a;
 $582 = $d;
 $583 = $581 ^ $582;
 $584 = $580 & $583;
 $585 = $579 ^ $584;
 $586 = (($578) + ($585))|0;
 $587 = ((($W)) + 12|0);
 $588 = HEAP32[$587>>2]|0;
 $589 = (($586) + ($588))|0;
 $590 = (($589) + -187363961)|0;
 $c = $590;
 $591 = $c;
 $592 = $591 << 14;
 $593 = $c;
 $594 = $593 >>> 18;
 $595 = $592 | $594;
 $596 = $d;
 $597 = (($595) + ($596))|0;
 $c = $597;
 $598 = $b;
 $599 = $d;
 $600 = $a;
 $601 = $d;
 $602 = $c;
 $603 = $601 ^ $602;
 $604 = $600 & $603;
 $605 = $599 ^ $604;
 $606 = (($598) + ($605))|0;
 $607 = ((($W)) + 32|0);
 $608 = HEAP32[$607>>2]|0;
 $609 = (($606) + ($608))|0;
 $610 = (($609) + 1163531501)|0;
 $b = $610;
 $611 = $b;
 $612 = $611 << 20;
 $613 = $b;
 $614 = $613 >>> 12;
 $615 = $612 | $614;
 $616 = $c;
 $617 = (($615) + ($616))|0;
 $b = $617;
 $618 = $a;
 $619 = $c;
 $620 = $d;
 $621 = $c;
 $622 = $b;
 $623 = $621 ^ $622;
 $624 = $620 & $623;
 $625 = $619 ^ $624;
 $626 = (($618) + ($625))|0;
 $627 = ((($W)) + 52|0);
 $628 = HEAP32[$627>>2]|0;
 $629 = (($626) + ($628))|0;
 $630 = (($629) + -1444681467)|0;
 $a = $630;
 $631 = $a;
 $632 = $631 << 5;
 $633 = $a;
 $634 = $633 >>> 27;
 $635 = $632 | $634;
 $636 = $b;
 $637 = (($635) + ($636))|0;
 $a = $637;
 $638 = $d;
 $639 = $b;
 $640 = $c;
 $641 = $b;
 $642 = $a;
 $643 = $641 ^ $642;
 $644 = $640 & $643;
 $645 = $639 ^ $644;
 $646 = (($638) + ($645))|0;
 $647 = ((($W)) + 8|0);
 $648 = HEAP32[$647>>2]|0;
 $649 = (($646) + ($648))|0;
 $650 = (($649) + -51403784)|0;
 $d = $650;
 $651 = $d;
 $652 = $651 << 9;
 $653 = $d;
 $654 = $653 >>> 23;
 $655 = $652 | $654;
 $656 = $a;
 $657 = (($655) + ($656))|0;
 $d = $657;
 $658 = $c;
 $659 = $a;
 $660 = $b;
 $661 = $a;
 $662 = $d;
 $663 = $661 ^ $662;
 $664 = $660 & $663;
 $665 = $659 ^ $664;
 $666 = (($658) + ($665))|0;
 $667 = ((($W)) + 28|0);
 $668 = HEAP32[$667>>2]|0;
 $669 = (($666) + ($668))|0;
 $670 = (($669) + 1735328473)|0;
 $c = $670;
 $671 = $c;
 $672 = $671 << 14;
 $673 = $c;
 $674 = $673 >>> 18;
 $675 = $672 | $674;
 $676 = $d;
 $677 = (($675) + ($676))|0;
 $c = $677;
 $678 = $b;
 $679 = $d;
 $680 = $a;
 $681 = $d;
 $682 = $c;
 $683 = $681 ^ $682;
 $684 = $680 & $683;
 $685 = $679 ^ $684;
 $686 = (($678) + ($685))|0;
 $687 = ((($W)) + 48|0);
 $688 = HEAP32[$687>>2]|0;
 $689 = (($686) + ($688))|0;
 $690 = (($689) + -1926607734)|0;
 $b = $690;
 $691 = $b;
 $692 = $691 << 20;
 $693 = $b;
 $694 = $693 >>> 12;
 $695 = $692 | $694;
 $696 = $c;
 $697 = (($695) + ($696))|0;
 $b = $697;
 $698 = $a;
 $699 = $b;
 $700 = $c;
 $701 = $699 ^ $700;
 $702 = $d;
 $703 = $701 ^ $702;
 $704 = (($698) + ($703))|0;
 $705 = ((($W)) + 20|0);
 $706 = HEAP32[$705>>2]|0;
 $707 = (($704) + ($706))|0;
 $708 = (($707) + -378558)|0;
 $a = $708;
 $709 = $a;
 $710 = $709 << 4;
 $711 = $a;
 $712 = $711 >>> 28;
 $713 = $710 | $712;
 $714 = $b;
 $715 = (($713) + ($714))|0;
 $a = $715;
 $716 = $d;
 $717 = $a;
 $718 = $b;
 $719 = $717 ^ $718;
 $720 = $c;
 $721 = $719 ^ $720;
 $722 = (($716) + ($721))|0;
 $723 = ((($W)) + 32|0);
 $724 = HEAP32[$723>>2]|0;
 $725 = (($722) + ($724))|0;
 $726 = (($725) + -2022574463)|0;
 $d = $726;
 $727 = $d;
 $728 = $727 << 11;
 $729 = $d;
 $730 = $729 >>> 21;
 $731 = $728 | $730;
 $732 = $a;
 $733 = (($731) + ($732))|0;
 $d = $733;
 $734 = $c;
 $735 = $d;
 $736 = $a;
 $737 = $735 ^ $736;
 $738 = $b;
 $739 = $737 ^ $738;
 $740 = (($734) + ($739))|0;
 $741 = ((($W)) + 44|0);
 $742 = HEAP32[$741>>2]|0;
 $743 = (($740) + ($742))|0;
 $744 = (($743) + 1839030562)|0;
 $c = $744;
 $745 = $c;
 $746 = $745 << 16;
 $747 = $c;
 $748 = $747 >>> 16;
 $749 = $746 | $748;
 $750 = $d;
 $751 = (($749) + ($750))|0;
 $c = $751;
 $752 = $b;
 $753 = $c;
 $754 = $d;
 $755 = $753 ^ $754;
 $756 = $a;
 $757 = $755 ^ $756;
 $758 = (($752) + ($757))|0;
 $759 = ((($W)) + 56|0);
 $760 = HEAP32[$759>>2]|0;
 $761 = (($758) + ($760))|0;
 $762 = (($761) + -35309556)|0;
 $b = $762;
 $763 = $b;
 $764 = $763 << 23;
 $765 = $b;
 $766 = $765 >>> 9;
 $767 = $764 | $766;
 $768 = $c;
 $769 = (($767) + ($768))|0;
 $b = $769;
 $770 = $a;
 $771 = $b;
 $772 = $c;
 $773 = $771 ^ $772;
 $774 = $d;
 $775 = $773 ^ $774;
 $776 = (($770) + ($775))|0;
 $777 = ((($W)) + 4|0);
 $778 = HEAP32[$777>>2]|0;
 $779 = (($776) + ($778))|0;
 $780 = (($779) + -1530992060)|0;
 $a = $780;
 $781 = $a;
 $782 = $781 << 4;
 $783 = $a;
 $784 = $783 >>> 28;
 $785 = $782 | $784;
 $786 = $b;
 $787 = (($785) + ($786))|0;
 $a = $787;
 $788 = $d;
 $789 = $a;
 $790 = $b;
 $791 = $789 ^ $790;
 $792 = $c;
 $793 = $791 ^ $792;
 $794 = (($788) + ($793))|0;
 $795 = ((($W)) + 16|0);
 $796 = HEAP32[$795>>2]|0;
 $797 = (($794) + ($796))|0;
 $798 = (($797) + 1272893353)|0;
 $d = $798;
 $799 = $d;
 $800 = $799 << 11;
 $801 = $d;
 $802 = $801 >>> 21;
 $803 = $800 | $802;
 $804 = $a;
 $805 = (($803) + ($804))|0;
 $d = $805;
 $806 = $c;
 $807 = $d;
 $808 = $a;
 $809 = $807 ^ $808;
 $810 = $b;
 $811 = $809 ^ $810;
 $812 = (($806) + ($811))|0;
 $813 = ((($W)) + 28|0);
 $814 = HEAP32[$813>>2]|0;
 $815 = (($812) + ($814))|0;
 $816 = (($815) + -155497632)|0;
 $c = $816;
 $817 = $c;
 $818 = $817 << 16;
 $819 = $c;
 $820 = $819 >>> 16;
 $821 = $818 | $820;
 $822 = $d;
 $823 = (($821) + ($822))|0;
 $c = $823;
 $824 = $b;
 $825 = $c;
 $826 = $d;
 $827 = $825 ^ $826;
 $828 = $a;
 $829 = $827 ^ $828;
 $830 = (($824) + ($829))|0;
 $831 = ((($W)) + 40|0);
 $832 = HEAP32[$831>>2]|0;
 $833 = (($830) + ($832))|0;
 $834 = (($833) + -1094730640)|0;
 $b = $834;
 $835 = $b;
 $836 = $835 << 23;
 $837 = $b;
 $838 = $837 >>> 9;
 $839 = $836 | $838;
 $840 = $c;
 $841 = (($839) + ($840))|0;
 $b = $841;
 $842 = $a;
 $843 = $b;
 $844 = $c;
 $845 = $843 ^ $844;
 $846 = $d;
 $847 = $845 ^ $846;
 $848 = (($842) + ($847))|0;
 $849 = ((($W)) + 52|0);
 $850 = HEAP32[$849>>2]|0;
 $851 = (($848) + ($850))|0;
 $852 = (($851) + 681279174)|0;
 $a = $852;
 $853 = $a;
 $854 = $853 << 4;
 $855 = $a;
 $856 = $855 >>> 28;
 $857 = $854 | $856;
 $858 = $b;
 $859 = (($857) + ($858))|0;
 $a = $859;
 $860 = $d;
 $861 = $a;
 $862 = $b;
 $863 = $861 ^ $862;
 $864 = $c;
 $865 = $863 ^ $864;
 $866 = (($860) + ($865))|0;
 $867 = HEAP32[$W>>2]|0;
 $868 = (($866) + ($867))|0;
 $869 = (($868) + -358537222)|0;
 $d = $869;
 $870 = $d;
 $871 = $870 << 11;
 $872 = $d;
 $873 = $872 >>> 21;
 $874 = $871 | $873;
 $875 = $a;
 $876 = (($874) + ($875))|0;
 $d = $876;
 $877 = $c;
 $878 = $d;
 $879 = $a;
 $880 = $878 ^ $879;
 $881 = $b;
 $882 = $880 ^ $881;
 $883 = (($877) + ($882))|0;
 $884 = ((($W)) + 12|0);
 $885 = HEAP32[$884>>2]|0;
 $886 = (($883) + ($885))|0;
 $887 = (($886) + -722521979)|0;
 $c = $887;
 $888 = $c;
 $889 = $888 << 16;
 $890 = $c;
 $891 = $890 >>> 16;
 $892 = $889 | $891;
 $893 = $d;
 $894 = (($892) + ($893))|0;
 $c = $894;
 $895 = $b;
 $896 = $c;
 $897 = $d;
 $898 = $896 ^ $897;
 $899 = $a;
 $900 = $898 ^ $899;
 $901 = (($895) + ($900))|0;
 $902 = ((($W)) + 24|0);
 $903 = HEAP32[$902>>2]|0;
 $904 = (($901) + ($903))|0;
 $905 = (($904) + 76029189)|0;
 $b = $905;
 $906 = $b;
 $907 = $906 << 23;
 $908 = $b;
 $909 = $908 >>> 9;
 $910 = $907 | $909;
 $911 = $c;
 $912 = (($910) + ($911))|0;
 $b = $912;
 $913 = $a;
 $914 = $b;
 $915 = $c;
 $916 = $914 ^ $915;
 $917 = $d;
 $918 = $916 ^ $917;
 $919 = (($913) + ($918))|0;
 $920 = ((($W)) + 36|0);
 $921 = HEAP32[$920>>2]|0;
 $922 = (($919) + ($921))|0;
 $923 = (($922) + -640364487)|0;
 $a = $923;
 $924 = $a;
 $925 = $924 << 4;
 $926 = $a;
 $927 = $926 >>> 28;
 $928 = $925 | $927;
 $929 = $b;
 $930 = (($928) + ($929))|0;
 $a = $930;
 $931 = $d;
 $932 = $a;
 $933 = $b;
 $934 = $932 ^ $933;
 $935 = $c;
 $936 = $934 ^ $935;
 $937 = (($931) + ($936))|0;
 $938 = ((($W)) + 48|0);
 $939 = HEAP32[$938>>2]|0;
 $940 = (($937) + ($939))|0;
 $941 = (($940) + -421815835)|0;
 $d = $941;
 $942 = $d;
 $943 = $942 << 11;
 $944 = $d;
 $945 = $944 >>> 21;
 $946 = $943 | $945;
 $947 = $a;
 $948 = (($946) + ($947))|0;
 $d = $948;
 $949 = $c;
 $950 = $d;
 $951 = $a;
 $952 = $950 ^ $951;
 $953 = $b;
 $954 = $952 ^ $953;
 $955 = (($949) + ($954))|0;
 $956 = ((($W)) + 60|0);
 $957 = HEAP32[$956>>2]|0;
 $958 = (($955) + ($957))|0;
 $959 = (($958) + 530742520)|0;
 $c = $959;
 $960 = $c;
 $961 = $960 << 16;
 $962 = $c;
 $963 = $962 >>> 16;
 $964 = $961 | $963;
 $965 = $d;
 $966 = (($964) + ($965))|0;
 $c = $966;
 $967 = $b;
 $968 = $c;
 $969 = $d;
 $970 = $968 ^ $969;
 $971 = $a;
 $972 = $970 ^ $971;
 $973 = (($967) + ($972))|0;
 $974 = ((($W)) + 8|0);
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + ($975))|0;
 $977 = (($976) + -995338651)|0;
 $b = $977;
 $978 = $b;
 $979 = $978 << 23;
 $980 = $b;
 $981 = $980 >>> 9;
 $982 = $979 | $981;
 $983 = $c;
 $984 = (($982) + ($983))|0;
 $b = $984;
 $985 = $a;
 $986 = $c;
 $987 = $b;
 $988 = $d;
 $989 = $988 ^ -1;
 $990 = $987 | $989;
 $991 = $986 ^ $990;
 $992 = (($985) + ($991))|0;
 $993 = HEAP32[$W>>2]|0;
 $994 = (($992) + ($993))|0;
 $995 = (($994) + -198630844)|0;
 $a = $995;
 $996 = $a;
 $997 = $996 << 6;
 $998 = $a;
 $999 = $998 >>> 26;
 $1000 = $997 | $999;
 $1001 = $b;
 $1002 = (($1000) + ($1001))|0;
 $a = $1002;
 $1003 = $d;
 $1004 = $b;
 $1005 = $a;
 $1006 = $c;
 $1007 = $1006 ^ -1;
 $1008 = $1005 | $1007;
 $1009 = $1004 ^ $1008;
 $1010 = (($1003) + ($1009))|0;
 $1011 = ((($W)) + 28|0);
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (($1010) + ($1012))|0;
 $1014 = (($1013) + 1126891415)|0;
 $d = $1014;
 $1015 = $d;
 $1016 = $1015 << 10;
 $1017 = $d;
 $1018 = $1017 >>> 22;
 $1019 = $1016 | $1018;
 $1020 = $a;
 $1021 = (($1019) + ($1020))|0;
 $d = $1021;
 $1022 = $c;
 $1023 = $a;
 $1024 = $d;
 $1025 = $b;
 $1026 = $1025 ^ -1;
 $1027 = $1024 | $1026;
 $1028 = $1023 ^ $1027;
 $1029 = (($1022) + ($1028))|0;
 $1030 = ((($W)) + 56|0);
 $1031 = HEAP32[$1030>>2]|0;
 $1032 = (($1029) + ($1031))|0;
 $1033 = (($1032) + -1416354905)|0;
 $c = $1033;
 $1034 = $c;
 $1035 = $1034 << 15;
 $1036 = $c;
 $1037 = $1036 >>> 17;
 $1038 = $1035 | $1037;
 $1039 = $d;
 $1040 = (($1038) + ($1039))|0;
 $c = $1040;
 $1041 = $b;
 $1042 = $d;
 $1043 = $c;
 $1044 = $a;
 $1045 = $1044 ^ -1;
 $1046 = $1043 | $1045;
 $1047 = $1042 ^ $1046;
 $1048 = (($1041) + ($1047))|0;
 $1049 = ((($W)) + 20|0);
 $1050 = HEAP32[$1049>>2]|0;
 $1051 = (($1048) + ($1050))|0;
 $1052 = (($1051) + -57434055)|0;
 $b = $1052;
 $1053 = $b;
 $1054 = $1053 << 21;
 $1055 = $b;
 $1056 = $1055 >>> 11;
 $1057 = $1054 | $1056;
 $1058 = $c;
 $1059 = (($1057) + ($1058))|0;
 $b = $1059;
 $1060 = $a;
 $1061 = $c;
 $1062 = $b;
 $1063 = $d;
 $1064 = $1063 ^ -1;
 $1065 = $1062 | $1064;
 $1066 = $1061 ^ $1065;
 $1067 = (($1060) + ($1066))|0;
 $1068 = ((($W)) + 48|0);
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($1067) + ($1069))|0;
 $1071 = (($1070) + 1700485571)|0;
 $a = $1071;
 $1072 = $a;
 $1073 = $1072 << 6;
 $1074 = $a;
 $1075 = $1074 >>> 26;
 $1076 = $1073 | $1075;
 $1077 = $b;
 $1078 = (($1076) + ($1077))|0;
 $a = $1078;
 $1079 = $d;
 $1080 = $b;
 $1081 = $a;
 $1082 = $c;
 $1083 = $1082 ^ -1;
 $1084 = $1081 | $1083;
 $1085 = $1080 ^ $1084;
 $1086 = (($1079) + ($1085))|0;
 $1087 = ((($W)) + 12|0);
 $1088 = HEAP32[$1087>>2]|0;
 $1089 = (($1086) + ($1088))|0;
 $1090 = (($1089) + -1894986606)|0;
 $d = $1090;
 $1091 = $d;
 $1092 = $1091 << 10;
 $1093 = $d;
 $1094 = $1093 >>> 22;
 $1095 = $1092 | $1094;
 $1096 = $a;
 $1097 = (($1095) + ($1096))|0;
 $d = $1097;
 $1098 = $c;
 $1099 = $a;
 $1100 = $d;
 $1101 = $b;
 $1102 = $1101 ^ -1;
 $1103 = $1100 | $1102;
 $1104 = $1099 ^ $1103;
 $1105 = (($1098) + ($1104))|0;
 $1106 = ((($W)) + 40|0);
 $1107 = HEAP32[$1106>>2]|0;
 $1108 = (($1105) + ($1107))|0;
 $1109 = (($1108) + -1051523)|0;
 $c = $1109;
 $1110 = $c;
 $1111 = $1110 << 15;
 $1112 = $c;
 $1113 = $1112 >>> 17;
 $1114 = $1111 | $1113;
 $1115 = $d;
 $1116 = (($1114) + ($1115))|0;
 $c = $1116;
 $1117 = $b;
 $1118 = $d;
 $1119 = $c;
 $1120 = $a;
 $1121 = $1120 ^ -1;
 $1122 = $1119 | $1121;
 $1123 = $1118 ^ $1122;
 $1124 = (($1117) + ($1123))|0;
 $1125 = ((($W)) + 4|0);
 $1126 = HEAP32[$1125>>2]|0;
 $1127 = (($1124) + ($1126))|0;
 $1128 = (($1127) + -2054922799)|0;
 $b = $1128;
 $1129 = $b;
 $1130 = $1129 << 21;
 $1131 = $b;
 $1132 = $1131 >>> 11;
 $1133 = $1130 | $1132;
 $1134 = $c;
 $1135 = (($1133) + ($1134))|0;
 $b = $1135;
 $1136 = $a;
 $1137 = $c;
 $1138 = $b;
 $1139 = $d;
 $1140 = $1139 ^ -1;
 $1141 = $1138 | $1140;
 $1142 = $1137 ^ $1141;
 $1143 = (($1136) + ($1142))|0;
 $1144 = ((($W)) + 32|0);
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + ($1145))|0;
 $1147 = (($1146) + 1873313359)|0;
 $a = $1147;
 $1148 = $a;
 $1149 = $1148 << 6;
 $1150 = $a;
 $1151 = $1150 >>> 26;
 $1152 = $1149 | $1151;
 $1153 = $b;
 $1154 = (($1152) + ($1153))|0;
 $a = $1154;
 $1155 = $d;
 $1156 = $b;
 $1157 = $a;
 $1158 = $c;
 $1159 = $1158 ^ -1;
 $1160 = $1157 | $1159;
 $1161 = $1156 ^ $1160;
 $1162 = (($1155) + ($1161))|0;
 $1163 = ((($W)) + 60|0);
 $1164 = HEAP32[$1163>>2]|0;
 $1165 = (($1162) + ($1164))|0;
 $1166 = (($1165) + -30611744)|0;
 $d = $1166;
 $1167 = $d;
 $1168 = $1167 << 10;
 $1169 = $d;
 $1170 = $1169 >>> 22;
 $1171 = $1168 | $1170;
 $1172 = $a;
 $1173 = (($1171) + ($1172))|0;
 $d = $1173;
 $1174 = $c;
 $1175 = $a;
 $1176 = $d;
 $1177 = $b;
 $1178 = $1177 ^ -1;
 $1179 = $1176 | $1178;
 $1180 = $1175 ^ $1179;
 $1181 = (($1174) + ($1180))|0;
 $1182 = ((($W)) + 24|0);
 $1183 = HEAP32[$1182>>2]|0;
 $1184 = (($1181) + ($1183))|0;
 $1185 = (($1184) + -1560198380)|0;
 $c = $1185;
 $1186 = $c;
 $1187 = $1186 << 15;
 $1188 = $c;
 $1189 = $1188 >>> 17;
 $1190 = $1187 | $1189;
 $1191 = $d;
 $1192 = (($1190) + ($1191))|0;
 $c = $1192;
 $1193 = $b;
 $1194 = $d;
 $1195 = $c;
 $1196 = $a;
 $1197 = $1196 ^ -1;
 $1198 = $1195 | $1197;
 $1199 = $1194 ^ $1198;
 $1200 = (($1193) + ($1199))|0;
 $1201 = ((($W)) + 52|0);
 $1202 = HEAP32[$1201>>2]|0;
 $1203 = (($1200) + ($1202))|0;
 $1204 = (($1203) + 1309151649)|0;
 $b = $1204;
 $1205 = $b;
 $1206 = $1205 << 21;
 $1207 = $b;
 $1208 = $1207 >>> 11;
 $1209 = $1206 | $1208;
 $1210 = $c;
 $1211 = (($1209) + ($1210))|0;
 $b = $1211;
 $1212 = $a;
 $1213 = $c;
 $1214 = $b;
 $1215 = $d;
 $1216 = $1215 ^ -1;
 $1217 = $1214 | $1216;
 $1218 = $1213 ^ $1217;
 $1219 = (($1212) + ($1218))|0;
 $1220 = ((($W)) + 16|0);
 $1221 = HEAP32[$1220>>2]|0;
 $1222 = (($1219) + ($1221))|0;
 $1223 = (($1222) + -145523070)|0;
 $a = $1223;
 $1224 = $a;
 $1225 = $1224 << 6;
 $1226 = $a;
 $1227 = $1226 >>> 26;
 $1228 = $1225 | $1227;
 $1229 = $b;
 $1230 = (($1228) + ($1229))|0;
 $a = $1230;
 $1231 = $d;
 $1232 = $b;
 $1233 = $a;
 $1234 = $c;
 $1235 = $1234 ^ -1;
 $1236 = $1233 | $1235;
 $1237 = $1232 ^ $1236;
 $1238 = (($1231) + ($1237))|0;
 $1239 = ((($W)) + 44|0);
 $1240 = HEAP32[$1239>>2]|0;
 $1241 = (($1238) + ($1240))|0;
 $1242 = (($1241) + -1120210379)|0;
 $d = $1242;
 $1243 = $d;
 $1244 = $1243 << 10;
 $1245 = $d;
 $1246 = $1245 >>> 22;
 $1247 = $1244 | $1246;
 $1248 = $a;
 $1249 = (($1247) + ($1248))|0;
 $d = $1249;
 $1250 = $c;
 $1251 = $a;
 $1252 = $d;
 $1253 = $b;
 $1254 = $1253 ^ -1;
 $1255 = $1252 | $1254;
 $1256 = $1251 ^ $1255;
 $1257 = (($1250) + ($1256))|0;
 $1258 = ((($W)) + 8|0);
 $1259 = HEAP32[$1258>>2]|0;
 $1260 = (($1257) + ($1259))|0;
 $1261 = (($1260) + 718787259)|0;
 $c = $1261;
 $1262 = $c;
 $1263 = $1262 << 15;
 $1264 = $c;
 $1265 = $1264 >>> 17;
 $1266 = $1263 | $1265;
 $1267 = $d;
 $1268 = (($1266) + ($1267))|0;
 $c = $1268;
 $1269 = $b;
 $1270 = $d;
 $1271 = $c;
 $1272 = $a;
 $1273 = $1272 ^ -1;
 $1274 = $1271 | $1273;
 $1275 = $1270 ^ $1274;
 $1276 = (($1269) + ($1275))|0;
 $1277 = ((($W)) + 36|0);
 $1278 = HEAP32[$1277>>2]|0;
 $1279 = (($1276) + ($1278))|0;
 $1280 = (($1279) + -343485551)|0;
 $b = $1280;
 $1281 = $b;
 $1282 = $1281 << 21;
 $1283 = $b;
 $1284 = $1283 >>> 11;
 $1285 = $1282 | $1284;
 $1286 = $c;
 $1287 = (($1285) + ($1286))|0;
 $b = $1287;
 $1288 = $0;
 $1289 = ((($1288)) + 8|0);
 $1290 = HEAP32[$1289>>2]|0;
 $1291 = $a;
 $1292 = (($1290) + ($1291))|0;
 $1293 = $0;
 $1294 = ((($1293)) + 8|0);
 HEAP32[$1294>>2] = $1292;
 $1295 = $0;
 $1296 = ((($1295)) + 8|0);
 $1297 = ((($1296)) + 4|0);
 $1298 = HEAP32[$1297>>2]|0;
 $1299 = $b;
 $1300 = (($1298) + ($1299))|0;
 $1301 = $0;
 $1302 = ((($1301)) + 8|0);
 $1303 = ((($1302)) + 4|0);
 HEAP32[$1303>>2] = $1300;
 $1304 = $0;
 $1305 = ((($1304)) + 8|0);
 $1306 = ((($1305)) + 8|0);
 $1307 = HEAP32[$1306>>2]|0;
 $1308 = $c;
 $1309 = (($1307) + ($1308))|0;
 $1310 = $0;
 $1311 = ((($1310)) + 8|0);
 $1312 = ((($1311)) + 8|0);
 HEAP32[$1312>>2] = $1309;
 $1313 = $0;
 $1314 = ((($1313)) + 8|0);
 $1315 = ((($1314)) + 12|0);
 $1316 = HEAP32[$1315>>2]|0;
 $1317 = $d;
 $1318 = (($1316) + ($1317))|0;
 $1319 = $0;
 $1320 = ((($1319)) + 8|0);
 $1321 = ((($1320)) + 12|0);
 HEAP32[$1321>>2] = $1318;
 STACKTOP = sp;return 0;
}
function _crypt_argchk($v,$s,$d) {
 $v = $v|0;
 $s = $s|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = $v;
 $1 = $s;
 $2 = $d;
 $3 = HEAP32[2695]|0;
 $4 = $0;
 $5 = $2;
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 (_fprintf($3,23127,$vararg_buffer)|0);
 (_raise(6)|0);
 STACKTOP = sp;return;
}
function _inflateInit_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$phi$trans$insert5 = 0, $$pre = 0, $$pre$i = 0, $$pre30$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0$i = -6;
  return ($$0$i|0);
 }
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)!=(49);
 $6 = ($2|0)!=(56);
 $or$cond$i = $6 | $5;
 if ($or$cond$i) {
  $$0$i = -6;
  return ($$0$i|0);
 }
 $7 = ($0|0)==(0|0);
 if ($7) {
  $$0$i = -2;
  return ($$0$i|0);
 }
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$9>>2] = 125;
  $12 = ((($0)) + 40|0);
  HEAP32[$12>>2] = 0;
  $18 = 125;
 } else {
  $18 = $10;
 }
 $13 = ((($0)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  HEAP32[$13>>2] = 126;
 }
 $16 = ((($0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $19 = (FUNCTION_TABLE_iiii[$18 & 127]($17,1,7116)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0$i = -4;
  return ($$0$i|0);
 }
 $21 = ((($0)) + 28|0);
 HEAP32[$21>>2] = $19;
 $22 = ((($19)) + 52|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($19)) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 $$pre30$i = ((($19)) + 36|0);
 do {
  if ($25) {
   label = 11;
  } else {
   $26 = HEAP32[$$pre30$i>>2]|0;
   $27 = ($26|0)==(15);
   if ($27) {
    label = 11;
   } else {
    $29 = HEAP32[$13>>2]|0;
    $30 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vii[$29 & 255]($30,$24);
    HEAP32[$23>>2] = 0;
    $$pre$i = HEAP32[$21>>2]|0;
    $31 = ((($19)) + 8|0);
    HEAP32[$31>>2] = 1;
    HEAP32[$$pre30$i>>2] = 15;
    $32 = ($$pre$i|0)==(0|0);
    if (!($32)) {
     $$phi$trans$insert5 = ((($$pre$i)) + 8|0);
     $$pre = HEAP32[$$phi$trans$insert5>>2]|0;
     $34 = $$pre$i;$40 = $$pre;
     break;
    }
    $56 = HEAP32[$13>>2]|0;
    $57 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vii[$56 & 255]($57,$19);
    HEAP32[$21>>2] = 0;
    $$0$i = -2;
    return ($$0$i|0);
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $28 = ((($19)) + 8|0);
  HEAP32[$28>>2] = 1;
  HEAP32[$$pre30$i>>2] = 15;
  $34 = $19;$40 = 1;
 }
 $33 = ((($34)) + 40|0);
 HEAP32[$33>>2] = 0;
 $35 = ((($34)) + 44|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($34)) + 48|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($34)) + 28|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($0)) + 20|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($0)) + 8|0);
 HEAP32[$39>>2] = 0;
 HEAP32[$8>>2] = 0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = $40 & 1;
  $43 = ((($0)) + 48|0);
  HEAP32[$43>>2] = $42;
 }
 HEAP32[$34>>2] = 0;
 $44 = ((($34)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($34)) + 12|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($34)) + 20|0);
 HEAP32[$46>>2] = 32768;
 $47 = ((($34)) + 32|0);
 HEAP32[$47>>2] = 0;
 $48 = ((($34)) + 56|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($34)) + 60|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($34)) + 1328|0);
 $51 = ((($34)) + 108|0);
 HEAP32[$51>>2] = $50;
 $52 = ((($34)) + 80|0);
 HEAP32[$52>>2] = $50;
 $53 = ((($34)) + 76|0);
 HEAP32[$53>>2] = $50;
 $54 = ((($34)) + 7104|0);
 HEAP32[$54>>2] = 1;
 $55 = ((($34)) + 7108|0);
 HEAP32[$55>>2] = -1;
 $$0$i = 0;
 return ($$0$i|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$47980 = 0, $$$7914 = 0, $$$8 = 0, $$0 = 0, $$0$be = 0, $$01042$be = 0, $$01044 = 0, $$01044$be = 0, $$01102 = 0, $$0903 = 0, $$0904 = 0, $$0917 = 0, $$0917$be = 0, $$0922 = 0, $$0922$be = 0, $$0933 = 0, $$0933$be = 0, $$0987 = 0, $$0987$$8915 = 0, $$0987$be = 0;
 var $$0988 = 0, $$0988$be = 0, $$1$ph = 0, $$10 = 0, $$101054 = 0, $$10932 = 0, $$10943 = 0, $$10998 = 0, $$11 = 0, $$11043 = 0, $$11045$lcssa = 0, $$110451880 = 0, $$111055 = 0, $$11944 = 0, $$11999 = 0, $$12$lcssa = 0, $$121000 = 0, $$121056 = 0, $$121873 = 0, $$12945$lcssa = 0;
 var $$129451872 = 0, $$13 = 0, $$131001 = 0, $$131057 = 0, $$13946 = 0, $$141002 = 0, $$141058 = 0, $$141817 = 0, $$14947$lcssa = 0, $$149471816 = 0, $$15 = 0, $$151003 = 0, $$151059 = 0, $$15948 = 0, $$16 = 0, $$161004$lcssa = 0, $$1610041871 = 0, $$161060$lcssa = 0, $$1610601870 = 0, $$16949 = 0;
 var $$17 = 0, $$171005 = 0, $$171061 = 0, $$17950 = 0, $$18$lcssa = 0, $$181006$lcssa = 0, $$1810061815 = 0, $$181062$lcssa = 0, $$1810621814 = 0, $$18951$lcssa = 0, $$19$lcssa = 0, $$1905 = 0, $$1908 = 0, $$191007 = 0, $$191063 = 0, $$1918 = 0, $$191806 = 0, $$1923$lcssa = 0, $$19231883 = 0, $$1934$lcssa = 0;
 var $$19341882 = 0, $$1989$lcssa = 0, $$19891881 = 0, $$19952$lcssa = 0, $$199521805 = 0, $$2 = 0, $$20 = 0, $$201008 = 0, $$201064 = 0, $$20953 = 0, $$21 = 0, $$21046$lcssa = 0, $$210461833 = 0, $$211009 = 0, $$211065 = 0, $$21954 = 0, $$22$lcssa = 0, $$221010$lcssa = 0, $$221066$lcssa = 0, $$221607 = 0;
 var $$22955$lcssa = 0, $$229551606 = 0, $$23$lcssa = 0, $$23$ph2387 = 0, $$231011$lcssa = 0, $$2310111804 = 0, $$231067$lcssa = 0, $$2310671803 = 0, $$231627 = 0, $$23956$lcssa = 0, $$23956$ph2386 = 0, $$239561626 = 0, $$24$lcssa = 0, $$241012 = 0, $$241068 = 0, $$24957$lcssa = 0, $$25$be = 0, $$25$lcssa2391 = 0, $$25$ph = 0, $$251013 = 0;
 var $$251013$ = 0, $$251069 = 0, $$251692 = 0, $$25958$be = 0, $$25958$lcssa2390 = 0, $$25958$ph = 0, $$259581691 = 0, $$26$lcssa = 0, $$261014$lcssa = 0, $$2610141605 = 0, $$261070$lcssa = 0, $$2610701604 = 0, $$261645 = 0, $$26959$lcssa = 0, $$269591644 = 0, $$27$lcssa = 0, $$271015$lcssa = 0, $$271015$ph2385 = 0, $$2710151625 = 0, $$271071$lcssa = 0;
 var $$271071$ph2384 = 0, $$2710711624 = 0, $$271671 = 0, $$27960$lcssa = 0, $$279601670 = 0, $$28$lcssa = 0, $$281016$lcssa = 0, $$281072$lcssa = 0, $$281661 = 0, $$28961$lcssa = 0, $$289611660 = 0, $$29$lcssa = 0, $$2906 = 0, $$2909 = 0, $$291017$be = 0, $$291017$lcssa2389 = 0, $$291017$ph = 0, $$2910171690 = 0, $$291073$be = 0, $$291073$lcssa2388 = 0;
 var $$291073$ph = 0, $$2910731689 = 0, $$291681 = 0, $$2919 = 0, $$2924$lcssa = 0, $$29241836 = 0, $$29351835 = 0, $$2990$lcssa = 0, $$29901834 = 0, $$29962$lcssa = 0, $$299621680 = 0, $$3 = 0, $$30 = 0, $$301018$lcssa = 0, $$3010181643 = 0, $$301074$lcssa = 0, $$3010741642 = 0, $$30963 = 0, $$31047$lcssa = 0, $$310471843 = 0;
 var $$311019$lcssa = 0, $$3110191669 = 0, $$311075$lcssa = 0, $$3110751668 = 0, $$32 = 0, $$321020$lcssa = 0, $$3210201659 = 0, $$321076$lcssa = 0, $$3210761658 = 0, $$32965 = 0, $$33 = 0, $$331021$lcssa = 0, $$3310211679 = 0, $$331077$lcssa = 0, $$3310771678 = 0, $$33966 = 0, $$34$lcssa = 0, $$341022 = 0, $$341078 = 0, $$341709 = 0;
 var $$34967$lcssa = 0, $$349671708 = 0, $$35$lcssa = 0, $$351731 = 0, $$35968$lcssa = 0, $$359681730 = 0, $$36 = 0, $$361024 = 0, $$361080 = 0, $$36969 = 0, $$37 = 0, $$371025 = 0, $$371081 = 0, $$37970 = 0, $$38$lcssa = 0, $$381026$lcssa = 0, $$3810261707 = 0, $$381082$lcssa = 0, $$3810821706 = 0, $$381744 = 0;
 var $$38971$lcssa = 0, $$389711743 = 0, $$39 = 0, $$391027$lcssa = 0, $$3910271729 = 0, $$391083$lcssa = 0, $$3910831728 = 0, $$39251846 = 0, $$3936$lcssa = 0, $$39361845 = 0, $$3991$lcssa = 0, $$39911844 = 0, $$39972 = 0, $$4 = 0, $$40$lcssa = 0, $$40$ph = 0, $$401028 = 0, $$401084 = 0, $$401761 = 0, $$40973$lcssa = 0;
 var $$40973$ph = 0, $$409731760 = 0, $$41$lcssa = 0, $$41048$lcssa = 0, $$410481852 = 0, $$411029 = 0, $$411085 = 0, $$411782 = 0, $$41974$lcssa = 0, $$419741781 = 0, $$42 = 0, $$421030$lcssa = 0, $$4210301742 = 0, $$421086$lcssa = 0, $$4210861741 = 0, $$42975 = 0, $$43 = 0, $$431031 = 0, $$431087 = 0, $$43976 = 0;
 var $$44$lcssa = 0, $$441032$lcssa = 0, $$441032$ph = 0, $$4410321759 = 0, $$441088$lcssa = 0, $$441088$ph = 0, $$4410881758 = 0, $$441795 = 0, $$44977$lcssa = 0, $$449771794 = 0, $$45 = 0, $$451033$lcssa = 0, $$4510331780 = 0, $$451089$lcssa = 0, $$4510891779 = 0, $$45978 = 0, $$46 = 0, $$461034 = 0, $$461090 = 0, $$46979 = 0;
 var $$47$lcssa = 0, $$471035 = 0, $$471091 = 0, $$471590 = 0, $$47980$lcssa = 0, $$479801589 = 0, $$48 = 0, $$481036$lcssa = 0, $$4810361793 = 0, $$481092$lcssa = 0, $$4810921792 = 0, $$48981 = 0, $$49 = 0, $$491037 = 0, $$491093 = 0, $$4911 = 0, $$4921 = 0, $$49261855 = 0, $$4937$lcssa = 0, $$49371854 = 0;
 var $$4992$lcssa = 0, $$49921853 = 0, $$49982 = 0, $$5$ph = 0, $$50$lcssa = 0, $$501038 = 0, $$501094 = 0, $$501597 = 0, $$50983$lcssa = 0, $$509831596 = 0, $$51 = 0, $$51049 = 0, $$511039$lcssa = 0, $$5110391588 = 0, $$511095$lcssa = 0, $$5110951587 = 0, $$51984 = 0, $$521040 = 0, $$521096 = 0, $$53 = 0;
 var $$53$ph = 0, $$531041 = 0, $$531097 = 0, $$53986 = 0, $$53986$ph = 0, $$54$lcssa = 0, $$541098$lcssa = 0, $$5410981594 = 0, $$541595 = 0, $$55 = 0, $$551099 = 0, $$57 = 0, $$57$ph = 0, $$571101 = 0, $$571101$ph = 0, $$5912 = 0, $$5927 = 0, $$5938 = 0, $$5993 = 0, $$6 = 0;
 var $$61050$lcssa = 0, $$610501861 = 0, $$69281864 = 0, $$6939$lcssa = 0, $$69391863 = 0, $$6994$lcssa = 0, $$69941862 = 0, $$7 = 0, $$71051 = 0, $$7914 = 0, $$7929 = 0, $$7940 = 0, $$7995 = 0, $$8 = 0, $$8$ph = 0, $$81052 = 0, $$8915 = 0, $$8930 = 0, $$8941 = 0, $$8996 = 0;
 var $$8996$ = 0, $$91053 = 0, $$9931 = 0, $$9942 = 0, $$9997 = 0, $$lcssa = 0, $$lcssa1183 = 0, $$lcssa1242 = 0, $$lcssa1256 = 0, $$lcssa1268 = 0, $$lcssa1282 = 0, $$off = 0, $$ph = 0, $$pn = 0, $$pn2373 = 0, $$pn2375 = 0, $$pr1107$pre = 0, $$pre = 0, $$pre2353 = 0, $$pre2354 = 0;
 var $$pre2355 = 0, $$pre2356 = 0, $$pre2358 = 0, $$pre2361 = 0, $$pre2363 = 0, $$pre2365 = 0, $$pre2367 = 0, $$pre2368 = 0, $$pre2370 = 0, $$pre2371 = 0, $$sroa$057$0 = 0, $$sroa$057$0$$sroa_idx = 0, $$sroa$057$0$$sroa_idx70 = 0, $$sroa$057$0$copyload = 0, $$sroa$057$0$copyload67$lcssa = 0, $$sroa$057$0$copyload67$lcssa$in = 0, $$sroa$057$0$copyload69$lcssa = 0, $$sroa$057$0$copyload69$lcssa$in = 0, $$sroa$057$0$copyload71 = 0, $$sroa$057$1 = 0;
 var $$sroa$1874$0 = 0, $$sroa$1874$0$$sroa_idx = 0, $$sroa$1874$0$$sroa_idx1777 = 0, $$sroa$1874$0$$sroa_idx75 = 0, $$sroa$1874$0$$sroa_idx751754 = 0, $$sroa$1874$0$$sroa_idx77 = 0, $$sroa$1874$0$$sroa_idx771702 = 0, $$sroa$1874$0$$sroa_idx79 = 0, $$sroa$1874$0$$sroa_idx791726 = 0, $$sroa$1874$0$$sroa_idx81 = 0, $$sroa$1874$0$$sroa_idx811637 = 0, $$sroa$1874$0$copyload = 0, $$sroa$1874$0$copyload$lcssa = 0, $$sroa$1874$0$copyload1778 = 0, $$sroa$1874$0$copyload76 = 0, $$sroa$1874$0$copyload76$lcssa = 0, $$sroa$1874$0$copyload761755 = 0, $$sroa$1874$0$copyload78 = 0, $$sroa$1874$0$copyload78$lcssa = 0, $$sroa$1874$0$copyload781703 = 0;
 var $$sroa$1874$0$copyload80 = 0, $$sroa$1874$0$copyload80$lcssa = 0, $$sroa$1874$0$copyload801727 = 0, $$sroa$1874$0$copyload82 = 0, $$sroa$1874$0$copyload821638 = 0, $$sroa$1874$1 = 0, $$sroa$42$0 = 0, $$sroa$42$0$$sroa_idx104 = 0, $$sroa$42$0$$sroa_idx110 = 0, $$sroa$42$0$copyload = 0, $$sroa$42$0$copyload107$lcssa = 0, $$sroa$42$0$copyload107$lcssa$in = 0, $$sroa$42$0$copyload109$lcssa = 0, $$sroa$42$0$copyload109$lcssa$in = 0, $$sroa$42$0$copyload111 = 0, $$sroa$42$0$copyload113$lcssa = 0, $$sroa$42$0$copyload113$lcssa$in = 0, $$sroa$42$1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond10 = 0, $or$cond1103 = 0, $or$cond1104 = 0, $or$cond1106 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond2826 = 0, $or$cond6 = 0, $or$cond8 = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$01102 = -2;
  STACKTOP = sp;return ($$01102|0);
 }
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$01102 = -2;
  STACKTOP = sp;return ($$01102|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$01102 = -2;
  STACKTOP = sp;return ($$01102|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$01102 = -2;
   STACKTOP = sp;return ($$01102|0);
  }
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ($15|0)==(11);
 if ($16) {
  HEAP32[$5>>2] = 12;
  $870 = 12;
 } else {
  $870 = $15;
 }
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($5)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($5)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($5)) + 8|0);
 $26 = ((($5)) + 24|0);
 $27 = ((($2)) + 1|0);
 $28 = ((($5)) + 16|0);
 $29 = ((($5)) + 32|0);
 $30 = ((($0)) + 24|0);
 $31 = ((($5)) + 36|0);
 $32 = ((($5)) + 20|0);
 $33 = ((($0)) + 48|0);
 $34 = ((($5)) + 64|0);
 $35 = ((($5)) + 12|0);
 $$off = (($1) + -5)|0;
 $36 = ($$off>>>0)<(2);
 $37 = ((($5)) + 4|0);
 $38 = ((($5)) + 76|0);
 $39 = ((($5)) + 84|0);
 $40 = ((($5)) + 80|0);
 $41 = ((($5)) + 88|0);
 $42 = ($1|0)==(6);
 $43 = ((($5)) + 7108|0);
 $44 = ((($5)) + 72|0);
 $45 = ((($5)) + 7112|0);
 $46 = ((($5)) + 68|0);
 $47 = ((($5)) + 44|0);
 $48 = ((($5)) + 7104|0);
 $49 = ((($5)) + 48|0);
 $50 = ((($5)) + 52|0);
 $51 = ((($5)) + 40|0);
 $52 = ((($0)) + 20|0);
 $53 = ((($5)) + 28|0);
 $54 = ((($2)) + 2|0);
 $55 = ((($2)) + 3|0);
 $56 = ((($5)) + 104|0);
 $57 = ((($5)) + 96|0);
 $58 = ((($5)) + 100|0);
 $59 = ((($5)) + 624|0);
 $60 = ((($5)) + 1328|0);
 $61 = ((($5)) + 108|0);
 $62 = ((($5)) + 112|0);
 $63 = ((($5)) + 752|0);
 $64 = ((($5)) + 92|0);
 $$0 = 0;$$01044 = $10;$$0917 = $18;$$0922 = $24;$$0933 = $22;$$0987 = $18;$$0988 = $20;$338 = $8;$65 = $870;
 L17: while(1) {
  L19: do {
   switch ($65|0) {
   case 28:  {
    $$53$ph = $$0922;$$53986$ph = $$0933;$$57$ph = $$0988;$$571101$ph = $$01044;$$8$ph = 1;$$ph = $$0987;
    label = 282;
    break L17;
    break;
   }
   case 29:  {
    $$4921 = $$0917;$$53 = $$0922;$$53986 = $$0933;$$57 = $$0988;$$571101 = $$01044;$$8 = -3;$817 = $$0987;
    break L17;
    break;
   }
   case 30:  {
    label = 296;
    break L17;
    break;
   }
   case 0:  {
    $69 = HEAP32[$25>>2]|0;
    $70 = ($69|0)==(0);
    if ($70) {
     HEAP32[$5>>2] = 12;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$01044;$$0917$be = $$0917;$$0922$be = $$0922;$$0933$be = $$0933;$$0987$be = $$0987;$$0988$be = $$0988;
     break L19;
    }
    $71 = ($$0922>>>0)<(16);
    if ($71) {
     $$110451880 = $$01044;$$19231883 = $$0922;$$19341882 = $$0933;$$19891881 = $$0988;
     while(1) {
      $72 = ($$19891881|0)==(0);
      if ($72) {
       $$4921 = $$0917;$$53 = $$19231883;$$53986 = $$19341882;$$57 = 0;$$571101 = $$110451880;$$8 = $$0;$817 = $$0987;
       break L17;
      }
      $73 = (($$19891881) + -1)|0;
      $74 = ((($$110451880)) + 1|0);
      $75 = HEAP8[$$110451880>>0]|0;
      $76 = $75&255;
      $77 = $76 << $$19231883;
      $78 = (($77) + ($$19341882))|0;
      $79 = (($$19231883) + 8)|0;
      $80 = ($79>>>0)<(16);
      if ($80) {
       $$110451880 = $74;$$19231883 = $79;$$19341882 = $78;$$19891881 = $73;
      } else {
       $$11045$lcssa = $74;$$1923$lcssa = $79;$$1934$lcssa = $78;$$1989$lcssa = $73;
       break;
      }
     }
    } else {
     $$11045$lcssa = $$01044;$$1923$lcssa = $$0922;$$1934$lcssa = $$0933;$$1989$lcssa = $$0988;
    }
    $81 = $69 & 2;
    $82 = ($81|0)!=(0);
    $83 = ($$1934$lcssa|0)==(35615);
    $or$cond = $83 & $82;
    if ($or$cond) {
     $84 = (_crc32(0,0,0)|0);
     HEAP32[$26>>2] = $84;
     HEAP8[$2>>0] = 31;
     HEAP8[$27>>0] = -117;
     $85 = (_crc32($84,$2,2)|0);
     HEAP32[$26>>2] = $85;
     HEAP32[$5>>2] = 1;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$11045$lcssa;$$0917$be = $$0917;$$0922$be = 0;$$0933$be = 0;$$0987$be = $$0987;$$0988$be = $$1989$lcssa;
     break L19;
    }
    HEAP32[$28>>2] = 0;
    $86 = HEAP32[$29>>2]|0;
    $87 = ($86|0)==(0|0);
    if (!($87)) {
     $88 = ((($86)) + 48|0);
     HEAP32[$88>>2] = -1;
    }
    $89 = $69 & 1;
    $90 = ($89|0)==(0);
    if (!($90)) {
     $91 = $$1934$lcssa << 8;
     $92 = $91 & 65280;
     $93 = $$1934$lcssa >>> 8;
     $94 = (($92) + ($93))|0;
     $95 = (($94>>>0) % 31)&-1;
     $96 = ($95|0)==(0);
     if ($96) {
      $97 = $$1934$lcssa & 15;
      $98 = ($97|0)==(8);
      if (!($98)) {
       HEAP32[$30>>2] = 23197;
       HEAP32[$5>>2] = 29;
       $$0$be = $$0;$$01042$be = $338;$$01044$be = $$11045$lcssa;$$0917$be = $$0917;$$0922$be = $$1923$lcssa;$$0933$be = $$1934$lcssa;$$0987$be = $$0987;$$0988$be = $$1989$lcssa;
       break L19;
      }
      $99 = $$1934$lcssa >>> 4;
      $100 = (($$1923$lcssa) + -4)|0;
      $101 = $99 & 15;
      $102 = (($101) + 8)|0;
      $103 = HEAP32[$31>>2]|0;
      $104 = ($103|0)==(0);
      if ($104) {
       HEAP32[$31>>2] = $102;
      } else {
       $105 = ($102>>>0)>($103>>>0);
       if ($105) {
        HEAP32[$30>>2] = 23224;
        HEAP32[$5>>2] = 29;
        $$0$be = $$0;$$01042$be = $338;$$01044$be = $$11045$lcssa;$$0917$be = $$0917;$$0922$be = $100;$$0933$be = $99;$$0987$be = $$0987;$$0988$be = $$1989$lcssa;
        break L19;
       }
      }
      $106 = 1 << $102;
      HEAP32[$32>>2] = $106;
      $107 = (_adler32(0,0,0)|0);
      HEAP32[$26>>2] = $107;
      HEAP32[$33>>2] = $107;
      $108 = $$1934$lcssa >>> 12;
      $109 = $108 & 2;
      $110 = $109 ^ 11;
      HEAP32[$5>>2] = $110;
      $$0$be = $$0;$$01042$be = $338;$$01044$be = $$11045$lcssa;$$0917$be = $$0917;$$0922$be = 0;$$0933$be = 0;$$0987$be = $$0987;$$0988$be = $$1989$lcssa;
      break L19;
     }
    }
    HEAP32[$30>>2] = 23174;
    HEAP32[$5>>2] = 29;
    $$0$be = $$0;$$01042$be = $338;$$01044$be = $$11045$lcssa;$$0917$be = $$0917;$$0922$be = $$1923$lcssa;$$0933$be = $$1934$lcssa;$$0987$be = $$0987;$$0988$be = $$1989$lcssa;
    break;
   }
   case 1:  {
    $68 = ($$0922>>>0)<(16);
    if ($68) {
     $$210461833 = $$01044;$$29241836 = $$0922;$$29351835 = $$0933;$$29901834 = $$0988;
     while(1) {
      $111 = ($$29901834|0)==(0);
      if ($111) {
       $$4921 = $$0917;$$53 = $$29241836;$$53986 = $$29351835;$$57 = 0;$$571101 = $$210461833;$$8 = $$0;$817 = $$0987;
       break L17;
      }
      $112 = (($$29901834) + -1)|0;
      $113 = ((($$210461833)) + 1|0);
      $114 = HEAP8[$$210461833>>0]|0;
      $115 = $114&255;
      $116 = $115 << $$29241836;
      $117 = (($116) + ($$29351835))|0;
      $118 = (($$29241836) + 8)|0;
      $119 = ($118>>>0)<(16);
      if ($119) {
       $$210461833 = $113;$$29241836 = $118;$$29351835 = $117;$$29901834 = $112;
      } else {
       $$21046$lcssa = $113;$$2924$lcssa = $118;$$2990$lcssa = $112;$120 = $117;
       break;
      }
     }
    } else {
     $$21046$lcssa = $$01044;$$2924$lcssa = $$0922;$$2990$lcssa = $$0988;$120 = $$0933;
    }
    HEAP32[$28>>2] = $120;
    $121 = $120 & 255;
    $122 = ($121|0)==(8);
    if (!($122)) {
     HEAP32[$30>>2] = 23197;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$21046$lcssa;$$0917$be = $$0917;$$0922$be = $$2924$lcssa;$$0933$be = $120;$$0987$be = $$0987;$$0988$be = $$2990$lcssa;
     break L19;
    }
    $123 = $120 & 57344;
    $124 = ($123|0)==(0);
    if (!($124)) {
     HEAP32[$30>>2] = 23244;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$21046$lcssa;$$0917$be = $$0917;$$0922$be = $$2924$lcssa;$$0933$be = $120;$$0987$be = $$0987;$$0988$be = $$2990$lcssa;
     break L19;
    }
    $125 = HEAP32[$29>>2]|0;
    $126 = ($125|0)==(0|0);
    if (!($126)) {
     $127 = $120 >>> 8;
     $128 = $127 & 1;
     HEAP32[$125>>2] = $128;
    }
    $129 = $120 & 512;
    $130 = ($129|0)==(0);
    if (!($130)) {
     $131 = $120&255;
     HEAP8[$2>>0] = $131;
     $132 = $120 >>> 8;
     $133 = $132&255;
     HEAP8[$27>>0] = $133;
     $134 = HEAP32[$26>>2]|0;
     $135 = (_crc32($134,$2,2)|0);
     HEAP32[$26>>2] = $135;
    }
    HEAP32[$5>>2] = 2;
    $$310471843 = $$21046$lcssa;$$39251846 = 0;$$39361845 = 0;$$39911844 = $$2990$lcssa;
    label = 47;
    break;
   }
   case 2:  {
    $136 = ($$0922>>>0)<(32);
    if ($136) {
     $$310471843 = $$01044;$$39251846 = $$0922;$$39361845 = $$0933;$$39911844 = $$0988;
     label = 47;
    } else {
     $$31047$lcssa = $$01044;$$3936$lcssa = $$0933;$$3991$lcssa = $$0988;
     label = 49;
    }
    break;
   }
   case 3:  {
    $161 = ($$0922>>>0)<(16);
    if ($161) {
     $$410481852 = $$01044;$$49261855 = $$0922;$$49371854 = $$0933;$$49921853 = $$0988;
     label = 55;
    } else {
     $$41048$lcssa = $$01044;$$4937$lcssa = $$0933;$$4992$lcssa = $$0988;
     label = 57;
    }
    break;
   }
   case 4:  {
    $$51049 = $$01044;$$5927 = $$0922;$$5938 = $$0933;$$5993 = $$0988;
    label = 62;
    break;
   }
   case 5:  {
    $$81052 = $$01044;$$8930 = $$0922;$$8941 = $$0933;$$8996 = $$0988;
    label = 73;
    break;
   }
   case 6:  {
    $$111055 = $$01044;$$11999 = $$0988;$$9931 = $$0922;$$9942 = $$0933;
    label = 83;
    break;
   }
   case 7:  {
    $$10932 = $$0922;$$10943 = $$0933;$$131001 = $$0988;$$131057 = $$01044;
    label = 96;
    break;
   }
   case 8:  {
    $$11 = $$0922;$$11944 = $$0933;$$151003 = $$0988;$$151059 = $$01044;
    label = 109;
    break;
   }
   case 9:  {
    $67 = ($$0922>>>0)<(32);
    if ($67) {
     $$141817 = $$0922;$$149471816 = $$0933;$$1810061815 = $$0988;$$1810621814 = $$01044;
     while(1) {
      $326 = ($$1810061815|0)==(0);
      if ($326) {
       $$4921 = $$0917;$$53 = $$141817;$$53986 = $$149471816;$$57 = 0;$$571101 = $$1810621814;$$8 = $$0;$817 = $$0987;
       break L17;
      }
      $327 = (($$1810061815) + -1)|0;
      $328 = ((($$1810621814)) + 1|0);
      $329 = HEAP8[$$1810621814>>0]|0;
      $330 = $329&255;
      $331 = $330 << $$141817;
      $332 = (($331) + ($$149471816))|0;
      $333 = (($$141817) + 8)|0;
      $334 = ($333>>>0)<(32);
      if ($334) {
       $$141817 = $333;$$149471816 = $332;$$1810061815 = $327;$$1810621814 = $328;
      } else {
       $$14947$lcssa = $332;$$181006$lcssa = $327;$$181062$lcssa = $328;
       break;
      }
     }
    } else {
     $$14947$lcssa = $$0933;$$181006$lcssa = $$0988;$$181062$lcssa = $$01044;
    }
    $335 = (_llvm_bswap_i32(($$14947$lcssa|0))|0);
    HEAP32[$26>>2] = $335;
    HEAP32[$33>>2] = $335;
    HEAP32[$5>>2] = 10;
    $$15 = 0;$$15948 = 0;$$191007 = $$181006$lcssa;$$191063 = $$181062$lcssa;
    label = 121;
    break;
   }
   case 10:  {
    $$15 = $$0922;$$15948 = $$0933;$$191007 = $$0988;$$191063 = $$01044;
    label = 121;
    break;
   }
   case 11:  {
    $$16 = $$0922;$$16949 = $$0933;$$201008 = $$0988;$$201064 = $$01044;
    label = 124;
    break;
   }
   case 12:  {
    $$17 = $$0922;$$17950 = $$0933;$$211009 = $$0988;$$211065 = $$01044;
    label = 125;
    break;
   }
   case 13:  {
    $360 = $$0922 & 7;
    $361 = $$0933 >>> $360;
    $362 = (($$0922) - ($360))|0;
    $363 = ($362>>>0)<(32);
    if ($363) {
     $$191806 = $362;$$199521805 = $361;$$2310111804 = $$0988;$$2310671803 = $$01044;
     while(1) {
      $364 = ($$2310111804|0)==(0);
      if ($364) {
       $$4921 = $$0917;$$53 = $$191806;$$53986 = $$199521805;$$57 = 0;$$571101 = $$2310671803;$$8 = $$0;$817 = $$0987;
       break L17;
      }
      $365 = (($$2310111804) + -1)|0;
      $366 = ((($$2310671803)) + 1|0);
      $367 = HEAP8[$$2310671803>>0]|0;
      $368 = $367&255;
      $369 = $368 << $$191806;
      $370 = (($369) + ($$199521805))|0;
      $371 = (($$191806) + 8)|0;
      $372 = ($371>>>0)<(32);
      if ($372) {
       $$191806 = $371;$$199521805 = $370;$$2310111804 = $365;$$2310671803 = $366;
      } else {
       $$19$lcssa = $371;$$19952$lcssa = $370;$$231011$lcssa = $365;$$231067$lcssa = $366;
       break;
      }
     }
    } else {
     $$19$lcssa = $362;$$19952$lcssa = $361;$$231011$lcssa = $$0988;$$231067$lcssa = $$01044;
    }
    $373 = $$19952$lcssa & 65535;
    $374 = $$19952$lcssa >>> 16;
    $375 = $374 ^ 65535;
    $376 = ($373|0)==($375|0);
    if ($376) {
     HEAP32[$34>>2] = $373;
     HEAP32[$5>>2] = 14;
     if ($42) {
      $$53$ph = 0;$$53986$ph = 0;$$57$ph = $$231011$lcssa;$$571101$ph = $$231067$lcssa;$$8$ph = $$0;$$ph = $$0987;
      label = 282;
      break L17;
     } else {
      $$20 = 0;$$20953 = 0;$$241012 = $$231011$lcssa;$$241068 = $$231067$lcssa;
      label = 144;
      break L19;
     }
    } else {
     HEAP32[$30>>2] = 23308;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$231067$lcssa;$$0917$be = $$0917;$$0922$be = $$19$lcssa;$$0933$be = $$19952$lcssa;$$0987$be = $$0987;$$0988$be = $$231011$lcssa;
     break L19;
    }
    break;
   }
   case 14:  {
    $$20 = $$0922;$$20953 = $$0933;$$241012 = $$0988;$$241068 = $$01044;
    label = 144;
    break;
   }
   case 15:  {
    $$21 = $$0922;$$21954 = $$0933;$$251013 = $$0988;$$251069 = $$01044;
    label = 145;
    break;
   }
   case 16:  {
    $66 = ($$0922>>>0)<(14);
    if ($66) {
     $$221607 = $$0922;$$229551606 = $$0933;$$2610141605 = $$0988;$$2610701604 = $$01044;
     while(1) {
      $388 = ($$2610141605|0)==(0);
      if ($388) {
       $$4921 = $$0917;$$53 = $$221607;$$53986 = $$229551606;$$57 = 0;$$571101 = $$2610701604;$$8 = $$0;$817 = $$0987;
       break L17;
      }
      $389 = (($$2610141605) + -1)|0;
      $390 = ((($$2610701604)) + 1|0);
      $391 = HEAP8[$$2610701604>>0]|0;
      $392 = $391&255;
      $393 = $392 << $$221607;
      $394 = (($393) + ($$229551606))|0;
      $395 = (($$221607) + 8)|0;
      $396 = ($395>>>0)<(14);
      if ($396) {
       $$221607 = $395;$$229551606 = $394;$$2610141605 = $389;$$2610701604 = $390;
      } else {
       $$22$lcssa = $395;$$22955$lcssa = $394;$$261014$lcssa = $389;$$261070$lcssa = $390;
       break;
      }
     }
    } else {
     $$22$lcssa = $$0922;$$22955$lcssa = $$0933;$$261014$lcssa = $$0988;$$261070$lcssa = $$01044;
    }
    $397 = $$22955$lcssa & 31;
    $398 = (($397) + 257)|0;
    HEAP32[$57>>2] = $398;
    $399 = $$22955$lcssa >>> 5;
    $400 = $399 & 31;
    $401 = (($400) + 1)|0;
    HEAP32[$58>>2] = $401;
    $402 = $$22955$lcssa >>> 10;
    $403 = $402 & 15;
    $404 = (($403) + 4)|0;
    HEAP32[$64>>2] = $404;
    $405 = $$22955$lcssa >>> 14;
    $406 = (($$22$lcssa) + -14)|0;
    $407 = ($398>>>0)>(286);
    $408 = ($401>>>0)>(30);
    $or$cond2826 = $407 | $408;
    if ($or$cond2826) {
     HEAP32[$30>>2] = 23337;
     HEAP32[$5>>2] = 29;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$261070$lcssa;$$0917$be = $$0917;$$0922$be = $406;$$0933$be = $405;$$0987$be = $$0987;$$0988$be = $$261014$lcssa;
     break L19;
    } else {
     HEAP32[$56>>2] = 0;
     HEAP32[$5>>2] = 17;
     $$23$ph2387 = $406;$$23956$ph2386 = $405;$$271015$ph2385 = $$261014$lcssa;$$271071$ph2384 = $$261070$lcssa;$431 = $404;$871 = 0;
     label = 155;
     break L19;
    }
    break;
   }
   case 17:  {
    $$pre2354 = HEAP32[$56>>2]|0;
    $$pre2355 = HEAP32[$64>>2]|0;
    $409 = ($$pre2354>>>0)<($$pre2355>>>0);
    if ($409) {
     $$23$ph2387 = $$0922;$$23956$ph2386 = $$0933;$$271015$ph2385 = $$0988;$$271071$ph2384 = $$01044;$431 = $$pre2355;$871 = $$pre2354;
     label = 155;
    } else {
     $$23$lcssa = $$0922;$$23956$lcssa = $$0933;$$271015$lcssa = $$0988;$$271071$lcssa = $$01044;$$lcssa = $$pre2354;
     label = 156;
    }
    break;
   }
   case 18:  {
    $$pre2356 = HEAP32[$56>>2]|0;
    $$1$ph = $$0;$$25$ph = $$0922;$$25958$ph = $$0933;$$291017$ph = $$0988;$$291073$ph = $$01044;$443 = $$pre2356;
    label = 166;
    break;
   }
   case 19:  {
    $$2 = $$0;$$32 = $$0922;$$32965 = $$0933;$$361024 = $$0988;$$361080 = $$01044;
    label = 200;
    break;
   }
   case 20:  {
    $$3 = $$0;$$33 = $$0922;$$33966 = $$0933;$$371025 = $$0988;$$371081 = $$01044;
    label = 201;
    break;
   }
   case 21:  {
    $$pre2361 = HEAP32[$44>>2]|0;
    $$37 = $$0922;$$37970 = $$0933;$$4 = $$0;$$411029 = $$0988;$$411085 = $$01044;$628 = $$pre2361;
    label = 219;
    break;
   }
   case 22:  {
    $$40$ph = $$0922;$$40973$ph = $$0933;$$441032$ph = $$0988;$$441088$ph = $$01044;$$5$ph = $$0;
    label = 226;
    break;
   }
   case 23:  {
    $$pre2367 = HEAP32[$44>>2]|0;
    $$43 = $$0922;$$43976 = $$0933;$$471035 = $$0988;$$471091 = $$01044;$$6 = $$0;$709 = $$pre2367;
    label = 238;
    break;
   }
   case 24:  {
    $$46 = $$0922;$$46979 = $$0933;$$501038 = $$0988;$$501094 = $$01044;$$7 = $$0;
    label = 244;
    break;
   }
   case 25:  {
    $765 = ($$0987|0)==(0);
    if ($765) {
     $$53$ph = $$0922;$$53986$ph = $$0933;$$57$ph = $$0988;$$571101$ph = $$01044;$$8$ph = $$0;$$ph = 0;
     label = 282;
     break L17;
    }
    $766 = HEAP32[$34>>2]|0;
    $767 = $766&255;
    $768 = ((($338)) + 1|0);
    HEAP8[$338>>0] = $767;
    $769 = (($$0987) + -1)|0;
    HEAP32[$5>>2] = 20;
    $$0$be = $$0;$$01042$be = $768;$$01044$be = $$01044;$$0917$be = $$0917;$$0922$be = $$0922;$$0933$be = $$0933;$$0987$be = $769;$$0988$be = $$0988;
    break;
   }
   case 26:  {
    $770 = HEAP32[$25>>2]|0;
    $771 = ($770|0)==(0);
    if ($771) {
     $$1918 = $$0917;$$48 = $$0922;$$48981 = $$0933;$$521040 = $$0988;$$521096 = $$01044;
    } else {
     $772 = ($$0922>>>0)<(32);
     if ($772) {
      $$471590 = $$0922;$$479801589 = $$0933;$$5110391588 = $$0988;$$5110951587 = $$01044;
      while(1) {
       $773 = ($$5110391588|0)==(0);
       if ($773) {
        $$4921 = $$0917;$$53 = $$471590;$$53986 = $$479801589;$$57 = 0;$$571101 = $$5110951587;$$8 = $$0;$817 = $$0987;
        break L17;
       }
       $774 = (($$5110391588) + -1)|0;
       $775 = ((($$5110951587)) + 1|0);
       $776 = HEAP8[$$5110951587>>0]|0;
       $777 = $776&255;
       $778 = $777 << $$471590;
       $779 = (($778) + ($$479801589))|0;
       $780 = (($$471590) + 8)|0;
       $781 = ($780>>>0)<(32);
       if ($781) {
        $$471590 = $780;$$479801589 = $779;$$5110391588 = $774;$$5110951587 = $775;
       } else {
        $$47$lcssa = $780;$$47980$lcssa = $779;$$511039$lcssa = $774;$$511095$lcssa = $775;
        break;
       }
      }
     } else {
      $$47$lcssa = $$0922;$$47980$lcssa = $$0933;$$511039$lcssa = $$0988;$$511095$lcssa = $$01044;
     }
     $782 = (($$0917) - ($$0987))|0;
     $783 = HEAP32[$52>>2]|0;
     $784 = (($783) + ($782))|0;
     HEAP32[$52>>2] = $784;
     $785 = HEAP32[$53>>2]|0;
     $786 = (($785) + ($782))|0;
     HEAP32[$53>>2] = $786;
     $787 = ($782|0)==(0);
     if ($787) {
      $$pre2353 = HEAP32[$26>>2]|0;
      $800 = $$pre2353;
     } else {
      $788 = HEAP32[$28>>2]|0;
      $789 = ($788|0)==(0);
      $790 = HEAP32[$26>>2]|0;
      $791 = (0 - ($782))|0;
      $792 = (($338) + ($791)|0);
      if ($789) {
       $794 = (_adler32($790,$792,$782)|0);
       $795 = $794;
      } else {
       $793 = (_crc32($790,$792,$782)|0);
       $795 = $793;
      }
      HEAP32[$26>>2] = $795;
      HEAP32[$33>>2] = $795;
      $800 = $795;
     }
     $796 = HEAP32[$28>>2]|0;
     $797 = ($796|0)==(0);
     $798 = (_llvm_bswap_i32(($$47980$lcssa|0))|0);
     $$$47980 = $797 ? $798 : $$47980$lcssa;
     $799 = ($$$47980|0)==($800|0);
     if ($799) {
      $$1918 = $$0987;$$48 = 0;$$48981 = 0;$$521040 = $$511039$lcssa;$$521096 = $$511095$lcssa;
     } else {
      HEAP32[$30>>2] = 23511;
      HEAP32[$5>>2] = 29;
      $$0$be = $$0;$$01042$be = $338;$$01044$be = $$511095$lcssa;$$0917$be = $$0987;$$0922$be = $$47$lcssa;$$0933$be = $$47980$lcssa;$$0987$be = $$0987;$$0988$be = $$511039$lcssa;
      break L19;
     }
    }
    HEAP32[$5>>2] = 27;
    $$2919 = $$1918;$$49 = $$48;$$49982 = $$48981;$$531041 = $$521040;$$531097 = $$521096;
    label = 274;
    break;
   }
   case 27:  {
    $$2919 = $$0917;$$49 = $$0922;$$49982 = $$0933;$$531041 = $$0988;$$531097 = $$01044;
    label = 274;
    break;
   }
   default: {
    $$01102 = -2;
    label = 297;
    break L17;
   }
   }
  } while(0);
  if ((label|0) == 47) {
   while(1) {
    label = 0;
    $137 = ($$39911844|0)==(0);
    if ($137) {
     $$4921 = $$0917;$$53 = $$39251846;$$53986 = $$39361845;$$57 = 0;$$571101 = $$310471843;$$8 = $$0;$817 = $$0987;
     break L17;
    }
    $138 = (($$39911844) + -1)|0;
    $139 = ((($$310471843)) + 1|0);
    $140 = HEAP8[$$310471843>>0]|0;
    $141 = $140&255;
    $142 = $141 << $$39251846;
    $143 = (($142) + ($$39361845))|0;
    $144 = (($$39251846) + 8)|0;
    $145 = ($144>>>0)<(32);
    if ($145) {
     $$310471843 = $139;$$39251846 = $144;$$39361845 = $143;$$39911844 = $138;
     label = 47;
    } else {
     $$31047$lcssa = $139;$$3936$lcssa = $143;$$3991$lcssa = $138;
     label = 49;
     break;
    }
   }
  }
  else if ((label|0) == 121) {
   label = 0;
   $336 = HEAP32[$35>>2]|0;
   $337 = ($336|0)==(0);
   if ($337) {
    label = 122;
    break;
   }
   $339 = (_adler32(0,0,0)|0);
   HEAP32[$26>>2] = $339;
   HEAP32[$33>>2] = $339;
   HEAP32[$5>>2] = 11;
   $$16 = $$15;$$16949 = $$15948;$$201008 = $$191007;$$201064 = $$191063;
   label = 124;
  }
  else if ((label|0) == 144) {
   label = 0;
   HEAP32[$5>>2] = 15;
   $$21 = $$20;$$21954 = $$20953;$$251013 = $$241012;$$251069 = $$241068;
   label = 145;
  }
  else if ((label|0) == 155) {
   label = 0;
   $$231627 = $$23$ph2387;$$239561626 = $$23956$ph2386;$$2710151625 = $$271015$ph2385;$$2710711624 = $$271071$ph2384;$423 = $871;
   while(1) {
    $411 = ($$231627>>>0)<(3);
    if ($411) {
     $412 = ($$2710151625|0)==(0);
     if ($412) {
      $$4921 = $$0917;$$53 = $$231627;$$53986 = $$239561626;$$57 = 0;$$571101 = $$2710711624;$$8 = $$0;$817 = $$0987;
      break L17;
     }
     $413 = (($$231627) + 8)|0;
     $414 = HEAP8[$$2710711624>>0]|0;
     $415 = $414&255;
     $416 = $415 << $$231627;
     $417 = (($416) + ($$239561626))|0;
     $418 = ((($$2710711624)) + 1|0);
     $419 = (($$2710151625) + -1)|0;
     $$24$lcssa = $413;$$24957$lcssa = $417;$$281016$lcssa = $419;$$281072$lcssa = $418;
    } else {
     $$24$lcssa = $$231627;$$24957$lcssa = $$239561626;$$281016$lcssa = $$2710151625;$$281072$lcssa = $$2710711624;
    }
    $420 = $$24957$lcssa & 7;
    $421 = $420&65535;
    $422 = (($423) + 1)|0;
    HEAP32[$56>>2] = $422;
    $424 = (13292 + ($423<<1)|0);
    $425 = HEAP16[$424>>1]|0;
    $426 = $425&65535;
    $427 = (((($5)) + 112|0) + ($426<<1)|0);
    HEAP16[$427>>1] = $421;
    $428 = $$24957$lcssa >>> 3;
    $429 = (($$24$lcssa) + -3)|0;
    $430 = ($422>>>0)<($431>>>0);
    if ($430) {
     $$231627 = $429;$$239561626 = $428;$$2710151625 = $$281016$lcssa;$$2710711624 = $$281072$lcssa;$423 = $422;
    } else {
     $$23$lcssa = $429;$$23956$lcssa = $428;$$271015$lcssa = $$281016$lcssa;$$271071$lcssa = $$281072$lcssa;$$lcssa = $422;
     label = 156;
     break;
    }
   }
  }
  else if ((label|0) == 274) {
   label = 0;
   $801 = HEAP32[$25>>2]|0;
   $802 = ($801|0)==(0);
   if ($802) {
    $$51 = $$49;$$51984 = $$49982;$$55 = $$531041;$$551099 = $$531097;
    label = 281;
    break;
   }
   $803 = HEAP32[$28>>2]|0;
   $804 = ($803|0)==(0);
   if ($804) {
    $$51 = $$49;$$51984 = $$49982;$$55 = $$531041;$$551099 = $$531097;
    label = 281;
    break;
   }
   $805 = ($$49>>>0)<(32);
   if ($805) {
    $$501597 = $$49;$$509831596 = $$49982;$$5410981594 = $$531097;$$541595 = $$531041;
    while(1) {
     $806 = ($$541595|0)==(0);
     if ($806) {
      $$4921 = $$2919;$$53 = $$501597;$$53986 = $$509831596;$$57 = 0;$$571101 = $$5410981594;$$8 = $$0;$817 = $$0987;
      break L17;
     }
     $807 = (($$541595) + -1)|0;
     $808 = ((($$5410981594)) + 1|0);
     $809 = HEAP8[$$5410981594>>0]|0;
     $810 = $809&255;
     $811 = $810 << $$501597;
     $812 = (($811) + ($$509831596))|0;
     $813 = (($$501597) + 8)|0;
     $814 = ($813>>>0)<(32);
     if ($814) {
      $$501597 = $813;$$509831596 = $812;$$5410981594 = $808;$$541595 = $807;
     } else {
      $$50$lcssa = $813;$$50983$lcssa = $812;$$54$lcssa = $807;$$541098$lcssa = $808;
      break;
     }
    }
   } else {
    $$50$lcssa = $$49;$$50983$lcssa = $$49982;$$54$lcssa = $$531041;$$541098$lcssa = $$531097;
   }
   $815 = HEAP32[$53>>2]|0;
   $816 = ($$50983$lcssa|0)==($815|0);
   if ($816) {
    $$51 = 0;$$51984 = 0;$$55 = $$54$lcssa;$$551099 = $$541098$lcssa;
    label = 281;
    break;
   }
   HEAP32[$30>>2] = 23532;
   HEAP32[$5>>2] = 29;
   $$0$be = $$0;$$01042$be = $338;$$01044$be = $$541098$lcssa;$$0917$be = $$2919;$$0922$be = $$50$lcssa;$$0933$be = $$50983$lcssa;$$0987$be = $$0987;$$0988$be = $$54$lcssa;
  }
  do {
   if ((label|0) == 49) {
    label = 0;
    $146 = HEAP32[$29>>2]|0;
    $147 = ($146|0)==(0|0);
    if (!($147)) {
     $148 = ((($146)) + 4|0);
     HEAP32[$148>>2] = $$3936$lcssa;
    }
    $149 = HEAP32[$28>>2]|0;
    $150 = $149 & 512;
    $151 = ($150|0)==(0);
    if (!($151)) {
     $152 = $$3936$lcssa&255;
     HEAP8[$2>>0] = $152;
     $153 = $$3936$lcssa >>> 8;
     $154 = $153&255;
     HEAP8[$27>>0] = $154;
     $155 = $$3936$lcssa >>> 16;
     $156 = $155&255;
     HEAP8[$54>>0] = $156;
     $157 = $$3936$lcssa >>> 24;
     $158 = $157&255;
     HEAP8[$55>>0] = $158;
     $159 = HEAP32[$26>>2]|0;
     $160 = (_crc32($159,$2,4)|0);
     HEAP32[$26>>2] = $160;
    }
    HEAP32[$5>>2] = 3;
    $$410481852 = $$31047$lcssa;$$49261855 = 0;$$49371854 = 0;$$49921853 = $$3991$lcssa;
    label = 55;
   }
   else if ((label|0) == 124) {
    label = 0;
    if ($36) {
     $$53$ph = $$16;$$53986$ph = $$16949;$$57$ph = $$201008;$$571101$ph = $$201064;$$8$ph = $$0;$$ph = $$0987;
     label = 282;
     break L17;
    } else {
     $$17 = $$16;$$17950 = $$16949;$$211009 = $$201008;$$211065 = $$201064;
     label = 125;
    }
   }
   else if ((label|0) == 145) {
    label = 0;
    $377 = HEAP32[$34>>2]|0;
    $378 = ($377|0)==(0);
    if ($378) {
     HEAP32[$5>>2] = 11;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$251069;$$0917$be = $$0917;$$0922$be = $$21;$$0933$be = $$21954;$$0987$be = $$0987;$$0988$be = $$251013;
     break;
    }
    $379 = ($377>>>0)>($$251013>>>0);
    $$251013$ = $379 ? $$251013 : $377;
    $380 = ($$251013$>>>0)>($$0987>>>0);
    $$4911 = $380 ? $$0987 : $$251013$;
    $381 = ($$4911|0)==(0);
    if ($381) {
     $$53$ph = $$21;$$53986$ph = $$21954;$$57$ph = $$251013;$$571101$ph = $$251069;$$8$ph = $$0;$$ph = $$0987;
     label = 282;
     break L17;
    }
    _memcpy(($338|0),($$251069|0),($$4911|0))|0;
    $382 = (($$251013) - ($$4911))|0;
    $383 = (($$251069) + ($$4911)|0);
    $384 = (($$0987) - ($$4911))|0;
    $385 = (($338) + ($$4911)|0);
    $386 = HEAP32[$34>>2]|0;
    $387 = (($386) - ($$4911))|0;
    HEAP32[$34>>2] = $387;
    $$0$be = $$0;$$01042$be = $385;$$01044$be = $383;$$0917$be = $$0917;$$0922$be = $$21;$$0933$be = $$21954;$$0987$be = $384;$$0988$be = $382;
   }
   else if ((label|0) == 156) {
    label = 0;
    $410 = ($$lcssa>>>0)<(19);
    if ($410) {
     $433 = $$lcssa;
     while(1) {
      $432 = (($433) + 1)|0;
      $434 = (13292 + ($433<<1)|0);
      $435 = HEAP16[$434>>1]|0;
      $436 = $435&65535;
      $437 = (((($5)) + 112|0) + ($436<<1)|0);
      HEAP16[$437>>1] = 0;
      $exitcond = ($432|0)==(19);
      if ($exitcond) {
       break;
      } else {
       $433 = $432;
      }
     }
     HEAP32[$56>>2] = 19;
    }
    HEAP32[$61>>2] = $60;
    HEAP32[$38>>2] = $60;
    HEAP32[$39>>2] = 7;
    $438 = (_inflate_table(0,$62,19,$61,$39,$63)|0);
    $439 = ($438|0)==(0);
    if ($439) {
     HEAP32[$56>>2] = 0;
     HEAP32[$5>>2] = 18;
     $$1$ph = 0;$$25$ph = $$23$lcssa;$$25958$ph = $$23956$lcssa;$$291017$ph = $$271015$lcssa;$$291073$ph = $$271071$lcssa;$443 = 0;
     label = 166;
     break;
    } else {
     HEAP32[$30>>2] = 23373;
     HEAP32[$5>>2] = 29;
     $$0$be = $438;$$01042$be = $338;$$01044$be = $$271071$lcssa;$$0917$be = $$0917;$$0922$be = $$23$lcssa;$$0933$be = $$23956$lcssa;$$0987$be = $$0987;$$0988$be = $$271015$lcssa;
     break;
    }
   }
  } while(0);
  L161: do {
   if ((label|0) == 55) {
    while(1) {
     label = 0;
     $162 = ($$49921853|0)==(0);
     if ($162) {
      $$4921 = $$0917;$$53 = $$49261855;$$53986 = $$49371854;$$57 = 0;$$571101 = $$410481852;$$8 = $$0;$817 = $$0987;
      break L17;
     }
     $163 = (($$49921853) + -1)|0;
     $164 = ((($$410481852)) + 1|0);
     $165 = HEAP8[$$410481852>>0]|0;
     $166 = $165&255;
     $167 = $166 << $$49261855;
     $168 = (($167) + ($$49371854))|0;
     $169 = (($$49261855) + 8)|0;
     $170 = ($169>>>0)<(16);
     if ($170) {
      $$410481852 = $164;$$49261855 = $169;$$49371854 = $168;$$49921853 = $163;
      label = 55;
     } else {
      $$41048$lcssa = $164;$$4937$lcssa = $168;$$4992$lcssa = $163;
      label = 57;
      break;
     }
    }
   }
   else if ((label|0) == 125) {
    label = 0;
    $340 = HEAP32[$37>>2]|0;
    $341 = ($340|0)==(0);
    if (!($341)) {
     $343 = $$17 & 7;
     $344 = $$17950 >>> $343;
     $345 = (($$17) - ($343))|0;
     HEAP32[$5>>2] = 26;
     $$0$be = $$0;$$01042$be = $338;$$01044$be = $$211065;$$0917$be = $$0917;$$0922$be = $345;$$0933$be = $344;$$0987$be = $$0987;$$0988$be = $$211009;
     break;
    }
    $342 = ($$17>>>0)<(3);
    if ($342) {
     $346 = ($$211009|0)==(0);
     if ($346) {
      $$53$ph = $$17;$$53986$ph = $$17950;$$57$ph = 0;$$571101$ph = $$211065;$$8$ph = $$0;$$ph = $$0987;
      label = 282;
      break L17;
     }
     $347 = (($$17) + 8)|0;
     $348 = HEAP8[$$211065>>0]|0;
     $349 = $348&255;
     $350 = $349 << $$17;
     $351 = (($350) + ($$17950))|0;
     $352 = ((($$211065)) + 1|0);
     $353 = (($$211009) + -1)|0;
     $$18$lcssa = $347;$$18951$lcssa = $351;$$221010$lcssa = $353;$$221066$lcssa = $352;
    } else {
     $$18$lcssa = $$17;$$18951$lcssa = $$17950;$$221010$lcssa = $$211009;$$221066$lcssa = $$211065;
    }
    $354 = $$18951$lcssa & 1;
    HEAP32[$37>>2] = $354;
    $355 = $$18951$lcssa >>> 1;
    $trunc = $355&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 0:  {
     HEAP32[$5>>2] = 13;
     break;
    }
    case 1:  {
     HEAP32[$38>>2] = 11116;
     HEAP32[$39>>2] = 9;
     HEAP32[$40>>2] = 13164;
     HEAP32[$41>>2] = 5;
     HEAP32[$5>>2] = 19;
     if ($42) {
      label = 133;
      break L17;
     }
     break;
    }
    case 2:  {
     HEAP32[$5>>2] = 16;
     break;
    }
    case 3:  {
     HEAP32[$30>>2] = 23289;
     HEAP32[$5>>2] = 29;
     break;
    }
    default: {
     label = 136;
     break L17;
    }
    }
    $358 = $$18951$lcssa >>> 3;
    $359 = (($$18$lcssa) + -3)|0;
    $$0$be = $$0;$$01042$be = $338;$$01044$be = $$221066$lcssa;$$0917$be = $$0917;$$0922$be = $359;$$0933$be = $358;$$0987$be = $$0987;$$0988$be = $$221010$lcssa;
   }
   else if ((label|0) == 166) {
    label = 0;
    $440 = HEAP32[$57>>2]|0;
    $441 = HEAP32[$58>>2]|0;
    $442 = (($441) + ($440))|0;
    $444 = ($443>>>0)<($442>>>0);
    do {
     if ($444) {
      $$251692 = $$25$ph;$$259581691 = $$25958$ph;$$2910171690 = $$291017$ph;$$2910731689 = $$291073$ph;$467 = $443;$532 = $440;$533 = $441;
      L181: while(1) {
       $445 = HEAP32[$39>>2]|0;
       $446 = 1 << $445;
       $447 = (($446) + -1)|0;
       $448 = $447 & $$259581691;
       $449 = HEAP32[$38>>2]|0;
       $$sroa$1874$0$$sroa_idx811637 = (((($449) + ($448<<2)|0)) + 1|0);
       $$sroa$1874$0$copyload821638 = HEAP8[$$sroa$1874$0$$sroa_idx811637>>0]|0;
       $450 = $$sroa$1874$0$copyload821638&255;
       $451 = ($$251692>>>0)<($450>>>0);
       if ($451) {
        $$261645 = $$251692;$$269591644 = $$259581691;$$3010181643 = $$2910171690;$$3010741642 = $$2910731689;
        while(1) {
         $452 = ($$3010181643|0)==(0);
         if ($452) {
          $$4921 = $$0917;$$53 = $$261645;$$53986 = $$269591644;$$57 = 0;$$571101 = $$3010741642;$$8 = $$1$ph;$817 = $$0987;
          break L17;
         }
         $453 = (($$3010181643) + -1)|0;
         $454 = ((($$3010741642)) + 1|0);
         $455 = HEAP8[$$3010741642>>0]|0;
         $456 = $455&255;
         $457 = $456 << $$261645;
         $458 = (($457) + ($$269591644))|0;
         $459 = (($$261645) + 8)|0;
         $460 = $447 & $458;
         $$sroa$1874$0$$sroa_idx81 = (((($449) + ($460<<2)|0)) + 1|0);
         $$sroa$1874$0$copyload82 = HEAP8[$$sroa$1874$0$$sroa_idx81>>0]|0;
         $461 = $$sroa$1874$0$copyload82&255;
         $462 = ($459>>>0)<($461>>>0);
         if ($462) {
          $$261645 = $459;$$269591644 = $458;$$3010181643 = $453;$$3010741642 = $454;
         } else {
          $$26$lcssa = $459;$$26959$lcssa = $458;$$301018$lcssa = $453;$$301074$lcssa = $454;$$lcssa1183 = $461;$$pn2375 = $460;
          break;
         }
        }
       } else {
        $$26$lcssa = $$251692;$$26959$lcssa = $$259581691;$$301018$lcssa = $$2910171690;$$301074$lcssa = $$2910731689;$$lcssa1183 = $450;$$pn2375 = $448;
       }
       $$sroa$42$0$copyload113$lcssa$in = (((($449) + ($$pn2375<<2)|0)) + 2|0);
       $$sroa$42$0$copyload113$lcssa = HEAP16[$$sroa$42$0$copyload113$lcssa$in>>1]|0;
       $463 = ($$sroa$42$0$copyload113$lcssa&65535)<(16);
       if ($463) {
        $464 = $$26959$lcssa >>> $$lcssa1183;
        $465 = (($$26$lcssa) - ($$lcssa1183))|0;
        $466 = (($467) + 1)|0;
        HEAP32[$56>>2] = $466;
        $468 = (((($5)) + 112|0) + ($467<<1)|0);
        HEAP16[$468>>1] = $$sroa$42$0$copyload113$lcssa;
        $$25$be = $465;$$25958$be = $464;$$291017$be = $$301018$lcssa;$$291073$be = $$301074$lcssa;
       } else {
        switch ($$sroa$42$0$copyload113$lcssa<<16>>16) {
        case 16:  {
         $476 = (($$lcssa1183) + 2)|0;
         $477 = ($$26$lcssa>>>0)<($476>>>0);
         if ($477) {
          $$271671 = $$26$lcssa;$$279601670 = $$26959$lcssa;$$3110191669 = $$301018$lcssa;$$3110751668 = $$301074$lcssa;
          while(1) {
           $480 = ($$3110191669|0)==(0);
           if ($480) {
            $$4921 = $$0917;$$53 = $$271671;$$53986 = $$279601670;$$57 = 0;$$571101 = $$3110751668;$$8 = $$1$ph;$817 = $$0987;
            break L17;
           }
           $481 = (($$3110191669) + -1)|0;
           $482 = ((($$3110751668)) + 1|0);
           $483 = HEAP8[$$3110751668>>0]|0;
           $484 = $483&255;
           $485 = $484 << $$271671;
           $486 = (($485) + ($$279601670))|0;
           $487 = (($$271671) + 8)|0;
           $488 = ($487>>>0)<($476>>>0);
           if ($488) {
            $$271671 = $487;$$279601670 = $486;$$3110191669 = $481;$$3110751668 = $482;
           } else {
            $$27$lcssa = $487;$$27960$lcssa = $486;$$311019$lcssa = $481;$$311075$lcssa = $482;
            break;
           }
          }
         } else {
          $$27$lcssa = $$26$lcssa;$$27960$lcssa = $$26959$lcssa;$$311019$lcssa = $$301018$lcssa;$$311075$lcssa = $$301074$lcssa;
         }
         $489 = $$27960$lcssa >>> $$lcssa1183;
         $490 = (($$27$lcssa) - ($$lcssa1183))|0;
         $491 = ($467|0)==(0);
         if ($491) {
          label = 180;
          break L181;
         }
         $492 = (($467) + -1)|0;
         $493 = (((($5)) + 112|0) + ($492<<1)|0);
         $494 = HEAP16[$493>>1]|0;
         $495 = $494&65535;
         $496 = $489 & 3;
         $497 = (($496) + 3)|0;
         $498 = $489 >>> 2;
         $499 = (($490) + -2)|0;
         $$0903 = $495;$$30 = $499;$$30963 = $498;$$341022 = $$311019$lcssa;$$341078 = $$311075$lcssa;$$5912 = $497;
         break;
        }
        case 17:  {
         $474 = (($$lcssa1183) + 3)|0;
         $475 = ($$26$lcssa>>>0)<($474>>>0);
         if ($475) {
          $$281661 = $$26$lcssa;$$289611660 = $$26959$lcssa;$$3210201659 = $$301018$lcssa;$$3210761658 = $$301074$lcssa;
          while(1) {
           $500 = ($$3210201659|0)==(0);
           if ($500) {
            $$4921 = $$0917;$$53 = $$281661;$$53986 = $$289611660;$$57 = 0;$$571101 = $$3210761658;$$8 = $$1$ph;$817 = $$0987;
            break L17;
           }
           $501 = (($$3210201659) + -1)|0;
           $502 = ((($$3210761658)) + 1|0);
           $503 = HEAP8[$$3210761658>>0]|0;
           $504 = $503&255;
           $505 = $504 << $$281661;
           $506 = (($505) + ($$289611660))|0;
           $507 = (($$281661) + 8)|0;
           $508 = ($507>>>0)<($474>>>0);
           if ($508) {
            $$281661 = $507;$$289611660 = $506;$$3210201659 = $501;$$3210761658 = $502;
           } else {
            $$28$lcssa = $507;$$28961$lcssa = $506;$$321020$lcssa = $501;$$321076$lcssa = $502;
            break;
           }
          }
         } else {
          $$28$lcssa = $$26$lcssa;$$28961$lcssa = $$26959$lcssa;$$321020$lcssa = $$301018$lcssa;$$321076$lcssa = $$301074$lcssa;
         }
         $509 = $$28961$lcssa >>> $$lcssa1183;
         $510 = $509 & 7;
         $511 = (($510) + 3)|0;
         $512 = $509 >>> 3;
         $513 = (-3 - ($$lcssa1183))|0;
         $514 = (($513) + ($$28$lcssa))|0;
         $$0903 = 0;$$30 = $514;$$30963 = $512;$$341022 = $$321020$lcssa;$$341078 = $$321076$lcssa;$$5912 = $511;
         break;
        }
        default: {
         $478 = (($$lcssa1183) + 7)|0;
         $479 = ($$26$lcssa>>>0)<($478>>>0);
         if ($479) {
          $$291681 = $$26$lcssa;$$299621680 = $$26959$lcssa;$$3310211679 = $$301018$lcssa;$$3310771678 = $$301074$lcssa;
          while(1) {
           $515 = ($$3310211679|0)==(0);
           if ($515) {
            $$4921 = $$0917;$$53 = $$291681;$$53986 = $$299621680;$$57 = 0;$$571101 = $$3310771678;$$8 = $$1$ph;$817 = $$0987;
            break L17;
           }
           $516 = (($$3310211679) + -1)|0;
           $517 = ((($$3310771678)) + 1|0);
           $518 = HEAP8[$$3310771678>>0]|0;
           $519 = $518&255;
           $520 = $519 << $$291681;
           $521 = (($520) + ($$299621680))|0;
           $522 = (($$291681) + 8)|0;
           $523 = ($522>>>0)<($478>>>0);
           if ($523) {
            $$291681 = $522;$$299621680 = $521;$$3310211679 = $516;$$3310771678 = $517;
           } else {
            $$29$lcssa = $522;$$29962$lcssa = $521;$$331021$lcssa = $516;$$331077$lcssa = $517;
            break;
           }
          }
         } else {
          $$29$lcssa = $$26$lcssa;$$29962$lcssa = $$26959$lcssa;$$331021$lcssa = $$301018$lcssa;$$331077$lcssa = $$301074$lcssa;
         }
         $524 = $$29962$lcssa >>> $$lcssa1183;
         $525 = $524 & 127;
         $526 = (($525) + 11)|0;
         $527 = $524 >>> 7;
         $528 = (-7 - ($$lcssa1183))|0;
         $529 = (($528) + ($$29$lcssa))|0;
         $$0903 = 0;$$30 = $529;$$30963 = $527;$$341022 = $$331021$lcssa;$$341078 = $$331077$lcssa;$$5912 = $526;
        }
        }
        $530 = (($467) + ($$5912))|0;
        $531 = (($533) + ($532))|0;
        $534 = ($530>>>0)>($531>>>0);
        if ($534) {
         label = 190;
         break;
        }
        $535 = $$0903&65535;
        $536 = (($$5912) + -1)|0;
        $537 = (($467) + 1)|0;
        HEAP32[$56>>2] = $537;
        $538 = (((($5)) + 112|0) + ($467<<1)|0);
        HEAP16[$538>>1] = $535;
        $539 = ($536|0)==(0);
        if ($539) {
         $$25$be = $$30;$$25958$be = $$30963;$$291017$be = $$341022;$$291073$be = $$341078;
        } else {
         $541 = $536;
         while(1) {
          $$pre2358 = HEAP32[$56>>2]|0;
          $540 = (($541) + -1)|0;
          $542 = (($$pre2358) + 1)|0;
          HEAP32[$56>>2] = $542;
          $543 = (((($5)) + 112|0) + ($$pre2358<<1)|0);
          HEAP16[$543>>1] = $535;
          $544 = ($540|0)==(0);
          if ($544) {
           $$25$be = $$30;$$25958$be = $$30963;$$291017$be = $$341022;$$291073$be = $$341078;
           break;
          } else {
           $541 = $540;
          }
         }
        }
       }
       $469 = HEAP32[$56>>2]|0;
       $470 = HEAP32[$57>>2]|0;
       $471 = HEAP32[$58>>2]|0;
       $472 = (($471) + ($470))|0;
       $473 = ($469>>>0)<($472>>>0);
       if ($473) {
        $$251692 = $$25$be;$$259581691 = $$25958$be;$$2910171690 = $$291017$be;$$2910731689 = $$291073$be;$467 = $469;$532 = $470;$533 = $471;
       } else {
        label = 192;
        break;
       }
      }
      if ((label|0) == 180) {
       label = 0;
       HEAP32[$30>>2] = 23398;
       HEAP32[$5>>2] = 29;
       $$0$be = $$1$ph;$$01042$be = $338;$$01044$be = $$311075$lcssa;$$0917$be = $$0917;$$0922$be = $490;$$0933$be = $489;$$0987$be = $$0987;$$0988$be = $$311019$lcssa;
       break L161;
      }
      else if ((label|0) == 190) {
       label = 0;
       HEAP32[$30>>2] = 23398;
       HEAP32[$5>>2] = 29;
       $$0$be = $$1$ph;$$01042$be = $338;$$01044$be = $$341078;$$0917$be = $$0917;$$0922$be = $$30;$$0933$be = $$30963;$$0987$be = $$0987;$$0988$be = $$341022;
       break L161;
      }
      else if ((label|0) == 192) {
       label = 0;
       $$pr1107$pre = HEAP32[$5>>2]|0;
       $545 = ($$pr1107$pre|0)==(29);
       if ($545) {
        $$0$be = $$1$ph;$$01042$be = $338;$$01044$be = $$291073$be;$$0917$be = $$0917;$$0922$be = $$25$be;$$0933$be = $$25958$be;$$0987$be = $$0987;$$0988$be = $$291017$be;
        break L161;
       } else {
        $$25$lcssa2391 = $$25$be;$$25958$lcssa2390 = $$25958$be;$$291017$lcssa2389 = $$291017$be;$$291073$lcssa2388 = $$291073$be;$548 = $470;
        break;
       }
      }
     } else {
      $$25$lcssa2391 = $$25$ph;$$25958$lcssa2390 = $$25958$ph;$$291017$lcssa2389 = $$291017$ph;$$291073$lcssa2388 = $$291073$ph;$548 = $440;
     }
    } while(0);
    $546 = HEAP16[$59>>1]|0;
    $547 = ($546<<16>>16)==(0);
    if ($547) {
     HEAP32[$30>>2] = 23424;
     HEAP32[$5>>2] = 29;
     $$0$be = $$1$ph;$$01042$be = $338;$$01044$be = $$291073$lcssa2388;$$0917$be = $$0917;$$0922$be = $$25$lcssa2391;$$0933$be = $$25958$lcssa2390;$$0987$be = $$0987;$$0988$be = $$291017$lcssa2389;
     break;
    }
    HEAP32[$61>>2] = $60;
    HEAP32[$38>>2] = $60;
    HEAP32[$39>>2] = 9;
    $549 = (_inflate_table(1,$62,$548,$61,$39,$63)|0);
    $550 = ($549|0)==(0);
    if (!($550)) {
     HEAP32[$30>>2] = 23461;
     HEAP32[$5>>2] = 29;
     $$0$be = $549;$$01042$be = $338;$$01044$be = $$291073$lcssa2388;$$0917$be = $$0917;$$0922$be = $$25$lcssa2391;$$0933$be = $$25958$lcssa2390;$$0987$be = $$0987;$$0988$be = $$291017$lcssa2389;
     break;
    }
    $551 = HEAP32[$61>>2]|0;
    HEAP32[$40>>2] = $551;
    HEAP32[$41>>2] = 6;
    $552 = HEAP32[$57>>2]|0;
    $553 = (((($5)) + 112|0) + ($552<<1)|0);
    $554 = HEAP32[$58>>2]|0;
    $555 = (_inflate_table(2,$553,$554,$61,$41,$63)|0);
    $556 = ($555|0)==(0);
    if ($556) {
     HEAP32[$5>>2] = 19;
     if ($42) {
      $$53$ph = $$25$lcssa2391;$$53986$ph = $$25958$lcssa2390;$$57$ph = $$291017$lcssa2389;$$571101$ph = $$291073$lcssa2388;$$8$ph = 0;$$ph = $$0987;
      label = 282;
      break L17;
     } else {
      $$2 = 0;$$32 = $$25$lcssa2391;$$32965 = $$25958$lcssa2390;$$361024 = $$291017$lcssa2389;$$361080 = $$291073$lcssa2388;
      label = 200;
      break;
     }
    } else {
     HEAP32[$30>>2] = 23489;
     HEAP32[$5>>2] = 29;
     $$0$be = $555;$$01042$be = $338;$$01044$be = $$291073$lcssa2388;$$0917$be = $$0917;$$0922$be = $$25$lcssa2391;$$0933$be = $$25958$lcssa2390;$$0987$be = $$0987;$$0988$be = $$291017$lcssa2389;
     break;
    }
   }
  } while(0);
  if ((label|0) == 57) {
   label = 0;
   $171 = HEAP32[$29>>2]|0;
   $172 = ($171|0)==(0|0);
   if (!($172)) {
    $173 = $$4937$lcssa >>> 8;
    $174 = ((($171)) + 8|0);
    $175 = $$4937$lcssa & 255;
    HEAP32[$174>>2] = $175;
    $176 = ((($171)) + 12|0);
    HEAP32[$176>>2] = $173;
   }
   $177 = HEAP32[$28>>2]|0;
   $178 = $177 & 512;
   $179 = ($178|0)==(0);
   if (!($179)) {
    $180 = $$4937$lcssa&255;
    HEAP8[$2>>0] = $180;
    $181 = $$4937$lcssa >>> 8;
    $182 = $181&255;
    HEAP8[$27>>0] = $182;
    $183 = HEAP32[$26>>2]|0;
    $184 = (_crc32($183,$2,2)|0);
    HEAP32[$26>>2] = $184;
   }
   HEAP32[$5>>2] = 4;
   $$51049 = $$41048$lcssa;$$5927 = 0;$$5938 = 0;$$5993 = $$4992$lcssa;
   label = 62;
  }
  else if ((label|0) == 200) {
   label = 0;
   HEAP32[$5>>2] = 20;
   $$3 = $$2;$$33 = $$32;$$33966 = $$32965;$$371025 = $$361024;$$371081 = $$361080;
   label = 201;
  }
  do {
   if ((label|0) == 62) {
    label = 0;
    $185 = HEAP32[$28>>2]|0;
    $186 = $185 & 1024;
    $187 = ($186|0)==(0);
    if ($187) {
     $208 = HEAP32[$29>>2]|0;
     $209 = ($208|0)==(0|0);
     if ($209) {
      $$71051 = $$51049;$$7929 = $$5927;$$7940 = $$5938;$$7995 = $$5993;
     } else {
      $210 = ((($208)) + 16|0);
      HEAP32[$210>>2] = 0;
      $$71051 = $$51049;$$7929 = $$5927;$$7940 = $$5938;$$7995 = $$5993;
     }
    } else {
     $188 = ($$5927>>>0)<(16);
     if ($188) {
      $$610501861 = $$51049;$$69281864 = $$5927;$$69391863 = $$5938;$$69941862 = $$5993;
      while(1) {
       $189 = ($$69941862|0)==(0);
       if ($189) {
        $$4921 = $$0917;$$53 = $$69281864;$$53986 = $$69391863;$$57 = 0;$$571101 = $$610501861;$$8 = $$0;$817 = $$0987;
        break L17;
       }
       $190 = (($$69941862) + -1)|0;
       $191 = ((($$610501861)) + 1|0);
       $192 = HEAP8[$$610501861>>0]|0;
       $193 = $192&255;
       $194 = $193 << $$69281864;
       $195 = (($194) + ($$69391863))|0;
       $196 = (($$69281864) + 8)|0;
       $197 = ($196>>>0)<(16);
       if ($197) {
        $$610501861 = $191;$$69281864 = $196;$$69391863 = $195;$$69941862 = $190;
       } else {
        $$61050$lcssa = $191;$$6939$lcssa = $195;$$6994$lcssa = $190;
        break;
       }
      }
     } else {
      $$61050$lcssa = $$51049;$$6939$lcssa = $$5938;$$6994$lcssa = $$5993;
     }
     HEAP32[$34>>2] = $$6939$lcssa;
     $198 = HEAP32[$29>>2]|0;
     $199 = ($198|0)==(0|0);
     if (!($199)) {
      $200 = ((($198)) + 20|0);
      HEAP32[$200>>2] = $$6939$lcssa;
     }
     $201 = $185 & 512;
     $202 = ($201|0)==(0);
     if ($202) {
      $$71051 = $$61050$lcssa;$$7929 = 0;$$7940 = 0;$$7995 = $$6994$lcssa;
     } else {
      $203 = $$6939$lcssa&255;
      HEAP8[$2>>0] = $203;
      $204 = $$6939$lcssa >>> 8;
      $205 = $204&255;
      HEAP8[$27>>0] = $205;
      $206 = HEAP32[$26>>2]|0;
      $207 = (_crc32($206,$2,2)|0);
      HEAP32[$26>>2] = $207;
      $$71051 = $$61050$lcssa;$$7929 = 0;$$7940 = 0;$$7995 = $$6994$lcssa;
     }
    }
    HEAP32[$5>>2] = 5;
    $$81052 = $$71051;$$8930 = $$7929;$$8941 = $$7940;$$8996 = $$7995;
    label = 73;
   }
   else if ((label|0) == 201) {
    label = 0;
    $557 = ($$371025>>>0)>(5);
    $558 = ($$0987>>>0)>(257);
    $or$cond6 = $558 & $557;
    if ($or$cond6) {
     HEAP32[$7>>2] = $338;
     HEAP32[$17>>2] = $$0987;
     HEAP32[$0>>2] = $$371081;
     HEAP32[$19>>2] = $$371025;
     HEAP32[$21>>2] = $$33966;
     HEAP32[$23>>2] = $$33;
     _inflate_fast($0,$$0917);
     $559 = HEAP32[$7>>2]|0;
     $560 = HEAP32[$17>>2]|0;
     $561 = HEAP32[$0>>2]|0;
     $562 = HEAP32[$19>>2]|0;
     $563 = HEAP32[$21>>2]|0;
     $564 = HEAP32[$23>>2]|0;
     $565 = HEAP32[$5>>2]|0;
     $566 = ($565|0)==(11);
     if (!($566)) {
      $$0$be = $$3;$$01042$be = $559;$$01044$be = $561;$$0917$be = $$0917;$$0922$be = $564;$$0933$be = $563;$$0987$be = $560;$$0988$be = $562;
      break;
     }
     HEAP32[$43>>2] = -1;
     $$0$be = $$3;$$01042$be = $559;$$01044$be = $561;$$0917$be = $$0917;$$0922$be = $564;$$0933$be = $563;$$0987$be = $560;$$0988$be = $562;
     break;
    }
    HEAP32[$43>>2] = 0;
    $567 = HEAP32[$39>>2]|0;
    $568 = 1 << $567;
    $569 = (($568) + -1)|0;
    $570 = $569 & $$33966;
    $571 = HEAP32[$38>>2]|0;
    $$sroa$1874$0$$sroa_idx771702 = (((($571) + ($570<<2)|0)) + 1|0);
    $$sroa$1874$0$copyload781703 = HEAP8[$$sroa$1874$0$$sroa_idx771702>>0]|0;
    $572 = $$sroa$1874$0$copyload781703&255;
    $573 = ($572>>>0)>($$33>>>0);
    if ($573) {
     $$341709 = $$33;$$349671708 = $$33966;$$3810261707 = $$371025;$$3810821706 = $$371081;
     while(1) {
      $574 = ($$3810261707|0)==(0);
      if ($574) {
       $$4921 = $$0917;$$53 = $$341709;$$53986 = $$349671708;$$57 = 0;$$571101 = $$3810821706;$$8 = $$3;$817 = $$0987;
       break L17;
      }
      $575 = (($$3810261707) + -1)|0;
      $576 = ((($$3810821706)) + 1|0);
      $577 = HEAP8[$$3810821706>>0]|0;
      $578 = $577&255;
      $579 = $578 << $$341709;
      $580 = (($579) + ($$349671708))|0;
      $581 = (($$341709) + 8)|0;
      $582 = $569 & $580;
      $$sroa$1874$0$$sroa_idx77 = (((($571) + ($582<<2)|0)) + 1|0);
      $$sroa$1874$0$copyload78 = HEAP8[$$sroa$1874$0$$sroa_idx77>>0]|0;
      $583 = $$sroa$1874$0$copyload78&255;
      $584 = ($583>>>0)>($581>>>0);
      if ($584) {
       $$341709 = $581;$$349671708 = $580;$$3810261707 = $575;$$3810821706 = $576;
      } else {
       $$34$lcssa = $581;$$34967$lcssa = $580;$$381026$lcssa = $575;$$381082$lcssa = $576;$$lcssa1242 = $583;$$pn2373 = $582;$$sroa$1874$0$copyload78$lcssa = $$sroa$1874$0$copyload78;
       break;
      }
     }
    } else {
     $$34$lcssa = $$33;$$34967$lcssa = $$33966;$$381026$lcssa = $$371025;$$381082$lcssa = $$371081;$$lcssa1242 = $572;$$pn2373 = $570;$$sroa$1874$0$copyload78$lcssa = $$sroa$1874$0$copyload781703;
    }
    $$sroa$42$0$copyload109$lcssa$in = (((($571) + ($$pn2373<<2)|0)) + 2|0);
    $$sroa$057$0$copyload69$lcssa$in = (($571) + ($$pn2373<<2)|0);
    $$sroa$42$0$copyload109$lcssa = HEAP16[$$sroa$42$0$copyload109$lcssa$in>>1]|0;
    $$sroa$057$0$copyload69$lcssa = HEAP8[$$sroa$057$0$copyload69$lcssa$in>>0]|0;
    $585 = $$sroa$057$0$copyload69$lcssa&255;
    $586 = ($$sroa$057$0$copyload69$lcssa<<24>>24)!=(0);
    $587 = $585 & 240;
    $588 = ($587|0)==(0);
    $or$cond1106 = $586 & $588;
    if ($or$cond1106) {
     $589 = $$sroa$42$0$copyload109$lcssa&65535;
     $590 = (($$lcssa1242) + ($585))|0;
     $591 = 1 << $590;
     $592 = (($591) + -1)|0;
     $593 = $$34967$lcssa & $592;
     $594 = $593 >>> $$lcssa1242;
     $595 = (($594) + ($589))|0;
     $$sroa$1874$0$$sroa_idx791726 = (((($571) + ($595<<2)|0)) + 1|0);
     $$sroa$1874$0$copyload801727 = HEAP8[$$sroa$1874$0$$sroa_idx791726>>0]|0;
     $596 = $$sroa$1874$0$copyload801727&255;
     $597 = (($596) + ($$lcssa1242))|0;
     $598 = ($597>>>0)>($$34$lcssa>>>0);
     if ($598) {
      $$351731 = $$34$lcssa;$$359681730 = $$34967$lcssa;$$3910271729 = $$381026$lcssa;$$3910831728 = $$381082$lcssa;
      while(1) {
       $599 = ($$3910271729|0)==(0);
       if ($599) {
        $$4921 = $$0917;$$53 = $$351731;$$53986 = $$359681730;$$57 = 0;$$571101 = $$3910831728;$$8 = $$3;$817 = $$0987;
        break L17;
       }
       $600 = (($$3910271729) + -1)|0;
       $601 = ((($$3910831728)) + 1|0);
       $602 = HEAP8[$$3910831728>>0]|0;
       $603 = $602&255;
       $604 = $603 << $$351731;
       $605 = (($604) + ($$359681730))|0;
       $606 = (($$351731) + 8)|0;
       $607 = $605 & $592;
       $608 = $607 >>> $$lcssa1242;
       $609 = (($608) + ($589))|0;
       $$sroa$1874$0$$sroa_idx79 = (((($571) + ($609<<2)|0)) + 1|0);
       $$sroa$1874$0$copyload80 = HEAP8[$$sroa$1874$0$$sroa_idx79>>0]|0;
       $610 = $$sroa$1874$0$copyload80&255;
       $611 = (($610) + ($$lcssa1242))|0;
       $612 = ($611>>>0)>($606>>>0);
       if ($612) {
        $$351731 = $606;$$359681730 = $605;$$3910271729 = $600;$$3910831728 = $601;
       } else {
        $$35$lcssa = $606;$$35968$lcssa = $605;$$391027$lcssa = $600;$$391083$lcssa = $601;$$lcssa1256 = $609;$$sroa$1874$0$copyload80$lcssa = $$sroa$1874$0$copyload80;
        break;
       }
      }
     } else {
      $$35$lcssa = $$34$lcssa;$$35968$lcssa = $$34967$lcssa;$$391027$lcssa = $$381026$lcssa;$$391083$lcssa = $$381082$lcssa;$$lcssa1256 = $595;$$sroa$1874$0$copyload80$lcssa = $$sroa$1874$0$copyload801727;
     }
     $$sroa$42$0$$sroa_idx110 = (((($571) + ($$lcssa1256<<2)|0)) + 2|0);
     $$sroa$42$0$copyload111 = HEAP16[$$sroa$42$0$$sroa_idx110>>1]|0;
     $$sroa$057$0$$sroa_idx70 = (($571) + ($$lcssa1256<<2)|0);
     $$sroa$057$0$copyload71 = HEAP8[$$sroa$057$0$$sroa_idx70>>0]|0;
     $613 = $$35968$lcssa >>> $$lcssa1242;
     $614 = (($$35$lcssa) - ($$lcssa1242))|0;
     HEAP32[$43>>2] = $$lcssa1242;
     $$36 = $614;$$36969 = $613;$$401028 = $$391027$lcssa;$$401084 = $$391083$lcssa;$$sroa$057$0 = $$sroa$057$0$copyload71;$$sroa$1874$0 = $$sroa$1874$0$copyload80$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload111;$619 = $$lcssa1242;
    } else {
     $$36 = $$34$lcssa;$$36969 = $$34967$lcssa;$$401028 = $$381026$lcssa;$$401084 = $$381082$lcssa;$$sroa$057$0 = $$sroa$057$0$copyload69$lcssa;$$sroa$1874$0 = $$sroa$1874$0$copyload78$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload109$lcssa;$619 = 0;
    }
    $615 = $$sroa$1874$0&255;
    $616 = $$36969 >>> $615;
    $617 = (($$36) - ($615))|0;
    $618 = (($619) + ($615))|0;
    HEAP32[$43>>2] = $618;
    $620 = $$sroa$42$0&65535;
    HEAP32[$34>>2] = $620;
    $621 = $$sroa$057$0&255;
    $622 = ($$sroa$057$0<<24>>24)==(0);
    if ($622) {
     HEAP32[$5>>2] = 25;
     $$0$be = $$3;$$01042$be = $338;$$01044$be = $$401084;$$0917$be = $$0917;$$0922$be = $617;$$0933$be = $616;$$0987$be = $$0987;$$0988$be = $$401028;
     break;
    }
    $623 = $621 & 32;
    $624 = ($623|0)==(0);
    if (!($624)) {
     HEAP32[$43>>2] = -1;
     HEAP32[$5>>2] = 11;
     $$0$be = $$3;$$01042$be = $338;$$01044$be = $$401084;$$0917$be = $$0917;$$0922$be = $617;$$0933$be = $616;$$0987$be = $$0987;$$0988$be = $$401028;
     break;
    }
    $625 = $621 & 64;
    $626 = ($625|0)==(0);
    if ($626) {
     $627 = $621 & 15;
     HEAP32[$44>>2] = $627;
     HEAP32[$5>>2] = 21;
     $$37 = $617;$$37970 = $616;$$4 = $$3;$$411029 = $$401028;$$411085 = $$401084;$628 = $627;
     label = 219;
     break;
    } else {
     HEAP32[$30>>2] = 23607;
     HEAP32[$5>>2] = 29;
     $$0$be = $$3;$$01042$be = $338;$$01044$be = $$401084;$$0917$be = $$0917;$$0922$be = $617;$$0933$be = $616;$$0987$be = $$0987;$$0988$be = $$401028;
     break;
    }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $211 = HEAP32[$28>>2]|0;
   $212 = $211 & 1024;
   $213 = ($212|0)==(0);
   if ($213) {
    $$101054 = $$81052;$$10998 = $$8996;
   } else {
    $214 = HEAP32[$34>>2]|0;
    $215 = ($214>>>0)>($$8996>>>0);
    $$8996$ = $215 ? $$8996 : $214;
    $216 = ($$8996$|0)==(0);
    if ($216) {
     $$91053 = $$81052;$$9997 = $$8996;$241 = $214;
    } else {
     $217 = HEAP32[$29>>2]|0;
     $218 = ($217|0)==(0|0);
     if ($218) {
      $233 = $211;
     } else {
      $219 = ((($217)) + 16|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($220|0)==(0|0);
      if ($221) {
       $233 = $211;
      } else {
       $222 = ((($217)) + 20|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($223) - ($214))|0;
       $225 = (($220) + ($224)|0);
       $226 = (($224) + ($$8996$))|0;
       $227 = ((($217)) + 24|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = ($226>>>0)>($228>>>0);
       $230 = (($228) - ($224))|0;
       $231 = $229 ? $230 : $$8996$;
       _memcpy(($225|0),($$81052|0),($231|0))|0;
       $$pre2368 = HEAP32[$28>>2]|0;
       $233 = $$pre2368;
      }
     }
     $232 = $233 & 512;
     $234 = ($232|0)==(0);
     if (!($234)) {
      $235 = HEAP32[$26>>2]|0;
      $236 = (_crc32($235,$$81052,$$8996$)|0);
      HEAP32[$26>>2] = $236;
     }
     $237 = (($$8996) - ($$8996$))|0;
     $238 = (($$81052) + ($$8996$)|0);
     $239 = HEAP32[$34>>2]|0;
     $240 = (($239) - ($$8996$))|0;
     HEAP32[$34>>2] = $240;
     $$91053 = $238;$$9997 = $237;$241 = $240;
    }
    $242 = ($241|0)==(0);
    if ($242) {
     $$101054 = $$91053;$$10998 = $$9997;
    } else {
     $$53$ph = $$8930;$$53986$ph = $$8941;$$57$ph = $$9997;$$571101$ph = $$91053;$$8$ph = $$0;$$ph = $$0987;
     label = 282;
     break;
    }
   }
   HEAP32[$34>>2] = 0;
   HEAP32[$5>>2] = 6;
   $$111055 = $$101054;$$11999 = $$10998;$$9931 = $$8930;$$9942 = $$8941;
   label = 83;
  }
  else if ((label|0) == 219) {
   label = 0;
   $629 = ($628|0)==(0);
   if ($629) {
    $$pre2363 = HEAP32[$34>>2]|0;
    $$39 = $$37;$$39972 = $$37970;$$431031 = $$411029;$$431087 = $$411085;$649 = $$pre2363;
   } else {
    $630 = ($$37>>>0)<($628>>>0);
    if ($630) {
     $$381744 = $$37;$$389711743 = $$37970;$$4210301742 = $$411029;$$4210861741 = $$411085;
     while(1) {
      $631 = ($$4210301742|0)==(0);
      if ($631) {
       $$4921 = $$0917;$$53 = $$381744;$$53986 = $$389711743;$$57 = 0;$$571101 = $$4210861741;$$8 = $$4;$817 = $$0987;
       break L17;
      }
      $632 = (($$4210301742) + -1)|0;
      $633 = ((($$4210861741)) + 1|0);
      $634 = HEAP8[$$4210861741>>0]|0;
      $635 = $634&255;
      $636 = $635 << $$381744;
      $637 = (($636) + ($$389711743))|0;
      $638 = (($$381744) + 8)|0;
      $639 = ($638>>>0)<($628>>>0);
      if ($639) {
       $$381744 = $638;$$389711743 = $637;$$4210301742 = $632;$$4210861741 = $633;
      } else {
       $$38$lcssa = $638;$$38971$lcssa = $637;$$421030$lcssa = $632;$$421086$lcssa = $633;
       break;
      }
     }
    } else {
     $$38$lcssa = $$37;$$38971$lcssa = $$37970;$$421030$lcssa = $$411029;$$421086$lcssa = $$411085;
    }
    $640 = 1 << $628;
    $641 = (($640) + -1)|0;
    $642 = $641 & $$38971$lcssa;
    $643 = HEAP32[$34>>2]|0;
    $644 = (($643) + ($642))|0;
    HEAP32[$34>>2] = $644;
    $645 = $$38971$lcssa >>> $628;
    $646 = (($$38$lcssa) - ($628))|0;
    $647 = HEAP32[$43>>2]|0;
    $648 = (($647) + ($628))|0;
    HEAP32[$43>>2] = $648;
    $$39 = $646;$$39972 = $645;$$431031 = $$421030$lcssa;$$431087 = $$421086$lcssa;$649 = $644;
   }
   HEAP32[$45>>2] = $649;
   HEAP32[$5>>2] = 22;
   $$40$ph = $$39;$$40973$ph = $$39972;$$441032$ph = $$431031;$$441088$ph = $$431087;$$5$ph = $$4;
   label = 226;
  }
  do {
   if ((label|0) == 83) {
    label = 0;
    $243 = HEAP32[$28>>2]|0;
    $244 = $243 & 2048;
    $245 = ($244|0)==(0);
    if ($245) {
     $270 = HEAP32[$29>>2]|0;
     $271 = ($270|0)==(0|0);
     if ($271) {
      $$121000 = $$11999;$$121056 = $$111055;
     } else {
      $272 = ((($270)) + 28|0);
      HEAP32[$272>>2] = 0;
      $$121000 = $$11999;$$121056 = $$111055;
     }
    } else {
     $246 = ($$11999|0)==(0);
     if ($246) {
      $$53$ph = $$9931;$$53986$ph = $$9942;$$57$ph = 0;$$571101$ph = $$111055;$$8$ph = $$0;$$ph = $$0987;
      label = 282;
      break L17;
     } else {
      $$1908 = 0;
     }
     while(1) {
      $247 = (($$1908) + 1)|0;
      $248 = (($$111055) + ($$1908)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = HEAP32[$29>>2]|0;
      $251 = ($250|0)==(0|0);
      if (!($251)) {
       $252 = ((($250)) + 28|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = ($253|0)==(0|0);
       if (!($254)) {
        $255 = HEAP32[$34>>2]|0;
        $256 = ((($250)) + 32|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = ($255>>>0)<($257>>>0);
        if ($258) {
         $259 = (($255) + 1)|0;
         HEAP32[$34>>2] = $259;
         $260 = (($253) + ($255)|0);
         HEAP8[$260>>0] = $249;
        }
       }
      }
      $261 = ($249<<24>>24)!=(0);
      $262 = ($$11999>>>0)>($247>>>0);
      $or$cond1103 = $261 & $262;
      if ($or$cond1103) {
       $$1908 = $247;
      } else {
       break;
      }
     }
     $263 = HEAP32[$28>>2]|0;
     $264 = $263 & 512;
     $265 = ($264|0)==(0);
     if (!($265)) {
      $266 = HEAP32[$26>>2]|0;
      $267 = (_crc32($266,$$111055,$247)|0);
      HEAP32[$26>>2] = $267;
     }
     $268 = (($$11999) - ($247))|0;
     $269 = (($$111055) + ($247)|0);
     if ($261) {
      $$53$ph = $$9931;$$53986$ph = $$9942;$$57$ph = $268;$$571101$ph = $269;$$8$ph = $$0;$$ph = $$0987;
      label = 282;
      break L17;
     } else {
      $$121000 = $268;$$121056 = $269;
     }
    }
    HEAP32[$34>>2] = 0;
    HEAP32[$5>>2] = 7;
    $$10932 = $$9931;$$10943 = $$9942;$$131001 = $$121000;$$131057 = $$121056;
    label = 96;
   }
   else if ((label|0) == 226) {
    label = 0;
    $650 = HEAP32[$41>>2]|0;
    $651 = 1 << $650;
    $652 = (($651) + -1)|0;
    $653 = $652 & $$40973$ph;
    $654 = HEAP32[$40>>2]|0;
    $$sroa$1874$0$$sroa_idx751754 = (((($654) + ($653<<2)|0)) + 1|0);
    $$sroa$1874$0$copyload761755 = HEAP8[$$sroa$1874$0$$sroa_idx751754>>0]|0;
    $655 = $$sroa$1874$0$copyload761755&255;
    $656 = ($655>>>0)>($$40$ph>>>0);
    if ($656) {
     $$401761 = $$40$ph;$$409731760 = $$40973$ph;$$4410321759 = $$441032$ph;$$4410881758 = $$441088$ph;
     while(1) {
      $657 = ($$4410321759|0)==(0);
      if ($657) {
       $$4921 = $$0917;$$53 = $$401761;$$53986 = $$409731760;$$57 = 0;$$571101 = $$4410881758;$$8 = $$5$ph;$817 = $$0987;
       break L17;
      }
      $658 = (($$4410321759) + -1)|0;
      $659 = ((($$4410881758)) + 1|0);
      $660 = HEAP8[$$4410881758>>0]|0;
      $661 = $660&255;
      $662 = $661 << $$401761;
      $663 = (($662) + ($$409731760))|0;
      $664 = (($$401761) + 8)|0;
      $665 = $652 & $663;
      $$sroa$1874$0$$sroa_idx75 = (((($654) + ($665<<2)|0)) + 1|0);
      $$sroa$1874$0$copyload76 = HEAP8[$$sroa$1874$0$$sroa_idx75>>0]|0;
      $666 = $$sroa$1874$0$copyload76&255;
      $667 = ($666>>>0)>($664>>>0);
      if ($667) {
       $$401761 = $664;$$409731760 = $663;$$4410321759 = $658;$$4410881758 = $659;
      } else {
       $$40$lcssa = $664;$$40973$lcssa = $663;$$441032$lcssa = $658;$$441088$lcssa = $659;$$lcssa1268 = $666;$$pn = $665;$$sroa$1874$0$copyload76$lcssa = $$sroa$1874$0$copyload76;
       break;
      }
     }
    } else {
     $$40$lcssa = $$40$ph;$$40973$lcssa = $$40973$ph;$$441032$lcssa = $$441032$ph;$$441088$lcssa = $$441088$ph;$$lcssa1268 = $655;$$pn = $653;$$sroa$1874$0$copyload76$lcssa = $$sroa$1874$0$copyload761755;
    }
    $$sroa$42$0$copyload107$lcssa$in = (((($654) + ($$pn<<2)|0)) + 2|0);
    $$sroa$057$0$copyload67$lcssa$in = (($654) + ($$pn<<2)|0);
    $$sroa$42$0$copyload107$lcssa = HEAP16[$$sroa$42$0$copyload107$lcssa$in>>1]|0;
    $$sroa$057$0$copyload67$lcssa = HEAP8[$$sroa$057$0$copyload67$lcssa$in>>0]|0;
    $668 = $$sroa$057$0$copyload67$lcssa&255;
    $669 = $668 & 240;
    $670 = ($669|0)==(0);
    if ($670) {
     $671 = $$sroa$42$0$copyload107$lcssa&65535;
     $672 = (($$lcssa1268) + ($668))|0;
     $673 = 1 << $672;
     $674 = (($673) + -1)|0;
     $675 = $$40973$lcssa & $674;
     $676 = $675 >>> $$lcssa1268;
     $677 = (($676) + ($671))|0;
     $$sroa$1874$0$$sroa_idx1777 = (((($654) + ($677<<2)|0)) + 1|0);
     $$sroa$1874$0$copyload1778 = HEAP8[$$sroa$1874$0$$sroa_idx1777>>0]|0;
     $678 = $$sroa$1874$0$copyload1778&255;
     $679 = (($678) + ($$lcssa1268))|0;
     $680 = ($679>>>0)>($$40$lcssa>>>0);
     if ($680) {
      $$411782 = $$40$lcssa;$$419741781 = $$40973$lcssa;$$4510331780 = $$441032$lcssa;$$4510891779 = $$441088$lcssa;
      while(1) {
       $681 = ($$4510331780|0)==(0);
       if ($681) {
        $$4921 = $$0917;$$53 = $$411782;$$53986 = $$419741781;$$57 = 0;$$571101 = $$4510891779;$$8 = $$5$ph;$817 = $$0987;
        break L17;
       }
       $682 = (($$4510331780) + -1)|0;
       $683 = ((($$4510891779)) + 1|0);
       $684 = HEAP8[$$4510891779>>0]|0;
       $685 = $684&255;
       $686 = $685 << $$411782;
       $687 = (($686) + ($$419741781))|0;
       $688 = (($$411782) + 8)|0;
       $689 = $687 & $674;
       $690 = $689 >>> $$lcssa1268;
       $691 = (($690) + ($671))|0;
       $$sroa$1874$0$$sroa_idx = (((($654) + ($691<<2)|0)) + 1|0);
       $$sroa$1874$0$copyload = HEAP8[$$sroa$1874$0$$sroa_idx>>0]|0;
       $692 = $$sroa$1874$0$copyload&255;
       $693 = (($692) + ($$lcssa1268))|0;
       $694 = ($693>>>0)>($688>>>0);
       if ($694) {
        $$411782 = $688;$$419741781 = $687;$$4510331780 = $682;$$4510891779 = $683;
       } else {
        $$41$lcssa = $688;$$41974$lcssa = $687;$$451033$lcssa = $682;$$451089$lcssa = $683;$$lcssa1282 = $691;$$sroa$1874$0$copyload$lcssa = $$sroa$1874$0$copyload;
        break;
       }
      }
     } else {
      $$41$lcssa = $$40$lcssa;$$41974$lcssa = $$40973$lcssa;$$451033$lcssa = $$441032$lcssa;$$451089$lcssa = $$441088$lcssa;$$lcssa1282 = $677;$$sroa$1874$0$copyload$lcssa = $$sroa$1874$0$copyload1778;
     }
     $$sroa$42$0$$sroa_idx104 = (((($654) + ($$lcssa1282<<2)|0)) + 2|0);
     $$sroa$42$0$copyload = HEAP16[$$sroa$42$0$$sroa_idx104>>1]|0;
     $$sroa$057$0$$sroa_idx = (($654) + ($$lcssa1282<<2)|0);
     $$sroa$057$0$copyload = HEAP8[$$sroa$057$0$$sroa_idx>>0]|0;
     $695 = $$41974$lcssa >>> $$lcssa1268;
     $696 = (($$41$lcssa) - ($$lcssa1268))|0;
     $697 = HEAP32[$43>>2]|0;
     $698 = (($697) + ($$lcssa1268))|0;
     HEAP32[$43>>2] = $698;
     $$42 = $696;$$42975 = $695;$$461034 = $$451033$lcssa;$$461090 = $$451089$lcssa;$$sroa$057$1 = $$sroa$057$0$copyload;$$sroa$1874$1 = $$sroa$1874$0$copyload$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload;$703 = $698;
    } else {
     $$pre2365 = HEAP32[$43>>2]|0;
     $$42 = $$40$lcssa;$$42975 = $$40973$lcssa;$$461034 = $$441032$lcssa;$$461090 = $$441088$lcssa;$$sroa$057$1 = $$sroa$057$0$copyload67$lcssa;$$sroa$1874$1 = $$sroa$1874$0$copyload76$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload107$lcssa;$703 = $$pre2365;
    }
    $699 = $$sroa$1874$1&255;
    $700 = $$42975 >>> $699;
    $701 = (($$42) - ($699))|0;
    $702 = (($703) + ($699))|0;
    HEAP32[$43>>2] = $702;
    $704 = $$sroa$057$1&255;
    $705 = $704 & 64;
    $706 = ($705|0)==(0);
    if ($706) {
     $707 = $$sroa$42$1&65535;
     HEAP32[$46>>2] = $707;
     $708 = $704 & 15;
     HEAP32[$44>>2] = $708;
     HEAP32[$5>>2] = 23;
     $$43 = $701;$$43976 = $700;$$471035 = $$461034;$$471091 = $$461090;$$6 = $$5$ph;$709 = $708;
     label = 238;
     break;
    } else {
     HEAP32[$30>>2] = 23585;
     HEAP32[$5>>2] = 29;
     $$0$be = $$5$ph;$$01042$be = $338;$$01044$be = $$461090;$$0917$be = $$0917;$$0922$be = $701;$$0933$be = $700;$$0987$be = $$0987;$$0988$be = $$461034;
     break;
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $273 = HEAP32[$28>>2]|0;
   $274 = $273 & 4096;
   $275 = ($274|0)==(0);
   if ($275) {
    $300 = HEAP32[$29>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     $$141002 = $$131001;$$141058 = $$131057;
    } else {
     $302 = ((($300)) + 36|0);
     HEAP32[$302>>2] = 0;
     $$141002 = $$131001;$$141058 = $$131057;
    }
   } else {
    $276 = ($$131001|0)==(0);
    if ($276) {
     $$53$ph = $$10932;$$53986$ph = $$10943;$$57$ph = 0;$$571101$ph = $$131057;$$8$ph = $$0;$$ph = $$0987;
     label = 282;
     break;
    } else {
     $$2909 = 0;
    }
    while(1) {
     $277 = (($$2909) + 1)|0;
     $278 = (($$131057) + ($$2909)|0);
     $279 = HEAP8[$278>>0]|0;
     $280 = HEAP32[$29>>2]|0;
     $281 = ($280|0)==(0|0);
     if (!($281)) {
      $282 = ((($280)) + 36|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($283|0)==(0|0);
      if (!($284)) {
       $285 = HEAP32[$34>>2]|0;
       $286 = ((($280)) + 40|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = ($285>>>0)<($287>>>0);
       if ($288) {
        $289 = (($285) + 1)|0;
        HEAP32[$34>>2] = $289;
        $290 = (($283) + ($285)|0);
        HEAP8[$290>>0] = $279;
       }
      }
     }
     $291 = ($279<<24>>24)!=(0);
     $292 = ($$131001>>>0)>($277>>>0);
     $or$cond1104 = $291 & $292;
     if ($or$cond1104) {
      $$2909 = $277;
     } else {
      break;
     }
    }
    $293 = HEAP32[$28>>2]|0;
    $294 = $293 & 512;
    $295 = ($294|0)==(0);
    if (!($295)) {
     $296 = HEAP32[$26>>2]|0;
     $297 = (_crc32($296,$$131057,$277)|0);
     HEAP32[$26>>2] = $297;
    }
    $298 = (($$131001) - ($277))|0;
    $299 = (($$131057) + ($277)|0);
    if ($291) {
     $$53$ph = $$10932;$$53986$ph = $$10943;$$57$ph = $298;$$571101$ph = $299;$$8$ph = $$0;$$ph = $$0987;
     label = 282;
     break;
    } else {
     $$141002 = $298;$$141058 = $299;
    }
   }
   HEAP32[$5>>2] = 8;
   $$11 = $$10932;$$11944 = $$10943;$$151003 = $$141002;$$151059 = $$141058;
   label = 109;
  }
  else if ((label|0) == 238) {
   label = 0;
   $710 = ($709|0)==(0);
   if ($710) {
    $$45 = $$43;$$45978 = $$43976;$$491037 = $$471035;$$491093 = $$471091;
   } else {
    $711 = ($$43>>>0)<($709>>>0);
    if ($711) {
     $$441795 = $$43;$$449771794 = $$43976;$$4810361793 = $$471035;$$4810921792 = $$471091;
     while(1) {
      $712 = ($$4810361793|0)==(0);
      if ($712) {
       $$4921 = $$0917;$$53 = $$441795;$$53986 = $$449771794;$$57 = 0;$$571101 = $$4810921792;$$8 = $$6;$817 = $$0987;
       break L17;
      }
      $713 = (($$4810361793) + -1)|0;
      $714 = ((($$4810921792)) + 1|0);
      $715 = HEAP8[$$4810921792>>0]|0;
      $716 = $715&255;
      $717 = $716 << $$441795;
      $718 = (($717) + ($$449771794))|0;
      $719 = (($$441795) + 8)|0;
      $720 = ($719>>>0)<($709>>>0);
      if ($720) {
       $$441795 = $719;$$449771794 = $718;$$4810361793 = $713;$$4810921792 = $714;
      } else {
       $$44$lcssa = $719;$$44977$lcssa = $718;$$481036$lcssa = $713;$$481092$lcssa = $714;
       break;
      }
     }
    } else {
     $$44$lcssa = $$43;$$44977$lcssa = $$43976;$$481036$lcssa = $$471035;$$481092$lcssa = $$471091;
    }
    $721 = 1 << $709;
    $722 = (($721) + -1)|0;
    $723 = $722 & $$44977$lcssa;
    $724 = HEAP32[$46>>2]|0;
    $725 = (($724) + ($723))|0;
    HEAP32[$46>>2] = $725;
    $726 = $$44977$lcssa >>> $709;
    $727 = (($$44$lcssa) - ($709))|0;
    $728 = HEAP32[$43>>2]|0;
    $729 = (($728) + ($709))|0;
    HEAP32[$43>>2] = $729;
    $$45 = $727;$$45978 = $726;$$491037 = $$481036$lcssa;$$491093 = $$481092$lcssa;
   }
   HEAP32[$5>>2] = 24;
   $$46 = $$45;$$46979 = $$45978;$$501038 = $$491037;$$501094 = $$491093;$$7 = $$6;
   label = 244;
  }
  do {
   if ((label|0) == 109) {
    label = 0;
    $303 = HEAP32[$28>>2]|0;
    $304 = $303 & 512;
    $305 = ($304|0)==(0);
    if ($305) {
     $$13 = $$11;$$13946 = $$11944;$$171005 = $$151003;$$171061 = $$151059;
    } else {
     $306 = ($$11>>>0)<(16);
     if ($306) {
      $$121873 = $$11;$$129451872 = $$11944;$$1610041871 = $$151003;$$1610601870 = $$151059;
      while(1) {
       $307 = ($$1610041871|0)==(0);
       if ($307) {
        $$4921 = $$0917;$$53 = $$121873;$$53986 = $$129451872;$$57 = 0;$$571101 = $$1610601870;$$8 = $$0;$817 = $$0987;
        break L17;
       }
       $308 = (($$1610041871) + -1)|0;
       $309 = ((($$1610601870)) + 1|0);
       $310 = HEAP8[$$1610601870>>0]|0;
       $311 = $310&255;
       $312 = $311 << $$121873;
       $313 = (($312) + ($$129451872))|0;
       $314 = (($$121873) + 8)|0;
       $315 = ($314>>>0)<(16);
       if ($315) {
        $$121873 = $314;$$129451872 = $313;$$1610041871 = $308;$$1610601870 = $309;
       } else {
        $$12$lcssa = $314;$$12945$lcssa = $313;$$161004$lcssa = $308;$$161060$lcssa = $309;
        break;
       }
      }
     } else {
      $$12$lcssa = $$11;$$12945$lcssa = $$11944;$$161004$lcssa = $$151003;$$161060$lcssa = $$151059;
     }
     $316 = HEAP32[$26>>2]|0;
     $317 = $316 & 65535;
     $318 = ($$12945$lcssa|0)==($317|0);
     if ($318) {
      $$13 = 0;$$13946 = 0;$$171005 = $$161004$lcssa;$$171061 = $$161060$lcssa;
     } else {
      HEAP32[$30>>2] = 23269;
      HEAP32[$5>>2] = 29;
      $$0$be = $$0;$$01042$be = $338;$$01044$be = $$161060$lcssa;$$0917$be = $$0917;$$0922$be = $$12$lcssa;$$0933$be = $$12945$lcssa;$$0987$be = $$0987;$$0988$be = $$161004$lcssa;
      break;
     }
    }
    $319 = HEAP32[$29>>2]|0;
    $320 = ($319|0)==(0|0);
    if (!($320)) {
     $321 = $303 >>> 9;
     $322 = $321 & 1;
     $323 = ((($319)) + 44|0);
     HEAP32[$323>>2] = $322;
     $324 = ((($319)) + 48|0);
     HEAP32[$324>>2] = 1;
    }
    $325 = (_crc32(0,0,0)|0);
    HEAP32[$26>>2] = $325;
    HEAP32[$33>>2] = $325;
    HEAP32[$5>>2] = 11;
    $$0$be = $$0;$$01042$be = $338;$$01044$be = $$171061;$$0917$be = $$0917;$$0922$be = $$13;$$0933$be = $$13946;$$0987$be = $$0987;$$0988$be = $$171005;
   }
   else if ((label|0) == 244) {
    label = 0;
    $730 = ($$0987|0)==(0);
    if ($730) {
     $$53$ph = $$46;$$53986$ph = $$46979;$$57$ph = $$501038;$$571101$ph = $$501094;$$8$ph = $$7;$$ph = 0;
     label = 282;
     break L17;
    }
    $731 = (($$0917) - ($$0987))|0;
    $732 = HEAP32[$46>>2]|0;
    $733 = ($732>>>0)>($731>>>0);
    if ($733) {
     $734 = (($732) - ($731))|0;
     $735 = HEAP32[$47>>2]|0;
     $736 = ($734>>>0)>($735>>>0);
     if ($736) {
      $737 = HEAP32[$48>>2]|0;
      $738 = ($737|0)==(0);
      if (!($738)) {
       HEAP32[$30>>2] = 23555;
       HEAP32[$5>>2] = 29;
       $$0$be = $$7;$$01042$be = $338;$$01044$be = $$501094;$$0917$be = $$0917;$$0922$be = $$46;$$0933$be = $$46979;$$0987$be = $$0987;$$0988$be = $$501038;
       break;
      }
     }
     $739 = HEAP32[$49>>2]|0;
     $740 = ($734>>>0)>($739>>>0);
     if ($740) {
      $741 = (($734) - ($739))|0;
      $742 = HEAP32[$50>>2]|0;
      $743 = HEAP32[$51>>2]|0;
      $744 = (($743) - ($741))|0;
      $745 = (($742) + ($744)|0);
      $$0904 = $745;$$7914 = $741;
     } else {
      $746 = HEAP32[$50>>2]|0;
      $747 = (($739) - ($734))|0;
      $748 = (($746) + ($747)|0);
      $$0904 = $748;$$7914 = $734;
     }
     $749 = HEAP32[$34>>2]|0;
     $750 = ($$7914>>>0)>($749>>>0);
     $$$7914 = $750 ? $749 : $$7914;
     $$1905 = $$0904;$$8915 = $$$7914;$756 = $749;
    } else {
     $751 = (0 - ($732))|0;
     $752 = (($338) + ($751)|0);
     $753 = HEAP32[$34>>2]|0;
     $$1905 = $752;$$8915 = $753;$756 = $753;
    }
    $754 = ($$8915>>>0)>($$0987>>>0);
    $$0987$$8915 = $754 ? $$0987 : $$8915;
    $755 = (($756) - ($$0987$$8915))|0;
    HEAP32[$34>>2] = $755;
    $$10 = $$0987$$8915;$$11043 = $338;$$2906 = $$1905;
    while(1) {
     $757 = ((($$2906)) + 1|0);
     $758 = HEAP8[$$2906>>0]|0;
     $759 = ((($$11043)) + 1|0);
     HEAP8[$$11043>>0] = $758;
     $760 = (($$10) + -1)|0;
     $761 = ($760|0)==(0);
     if ($761) {
      break;
     } else {
      $$10 = $760;$$11043 = $759;$$2906 = $757;
     }
    }
    $762 = (($$0987) - ($$0987$$8915))|0;
    $763 = HEAP32[$34>>2]|0;
    $764 = ($763|0)==(0);
    if ($764) {
     HEAP32[$5>>2] = 20;
     $$0$be = $$7;$$01042$be = $759;$$01044$be = $$501094;$$0917$be = $$0917;$$0922$be = $$46;$$0933$be = $$46979;$$0987$be = $762;$$0988$be = $$501038;
    } else {
     $$0$be = $$7;$$01042$be = $759;$$01044$be = $$501094;$$0917$be = $$0917;$$0922$be = $$46;$$0933$be = $$46979;$$0987$be = $762;$$0988$be = $$501038;
    }
   }
  } while(0);
  $$pre = HEAP32[$5>>2]|0;
  $$0 = $$0$be;$$01044 = $$01044$be;$$0917 = $$0917$be;$$0922 = $$0922$be;$$0933 = $$0933$be;$$0987 = $$0987$be;$$0988 = $$0988$be;$338 = $$01042$be;$65 = $$pre;
 }
 if ((label|0) == 122) {
  HEAP32[$7>>2] = $338;
  HEAP32[$17>>2] = $$0987;
  HEAP32[$0>>2] = $$191063;
  HEAP32[$19>>2] = $$191007;
  HEAP32[$21>>2] = $$15948;
  HEAP32[$23>>2] = $$15;
  $$01102 = 2;
  STACKTOP = sp;return ($$01102|0);
 }
 else if ((label|0) == 133) {
  $356 = $$18951$lcssa >>> 3;
  $357 = (($$18$lcssa) + -3)|0;
  $$4921 = $$0917;$$53 = $357;$$53986 = $356;$$57 = $$221010$lcssa;$$571101 = $$221066$lcssa;$$8 = $$0;$817 = $$0987;
 }
 else if ((label|0) == 136) {
  // unreachable;
 }
 else if ((label|0) == 281) {
  HEAP32[$5>>2] = 28;
  $$4921 = $$2919;$$53 = $$51;$$53986 = $$51984;$$57 = $$55;$$571101 = $$551099;$$8 = 1;$817 = $$0987;
 }
 else if ((label|0) == 282) {
  $$4921 = $$0917;$$53 = $$53$ph;$$53986 = $$53986$ph;$$57 = $$57$ph;$$571101 = $$571101$ph;$$8 = $$8$ph;$817 = $$ph;
 }
 else if ((label|0) == 296) {
  $$01102 = -4;
  STACKTOP = sp;return ($$01102|0);
 }
 else if ((label|0) == 297) {
  STACKTOP = sp;return ($$01102|0);
 }
 HEAP32[$7>>2] = $338;
 HEAP32[$17>>2] = $817;
 HEAP32[$0>>2] = $$571101;
 HEAP32[$19>>2] = $$57;
 HEAP32[$21>>2] = $$53986;
 HEAP32[$23>>2] = $$53;
 $818 = HEAP32[$51>>2]|0;
 $819 = ($818|0)==(0);
 if ($819) {
  $820 = ($$4921|0)==($817|0);
  if ($820) {
   $829 = $$57;$831 = $817;
  } else {
   $821 = HEAP32[$5>>2]|0;
   $822 = ($821>>>0)<(29);
   if ($822) {
    $823 = ($821>>>0)<(26);
    $824 = ($1|0)!=(4);
    $or$cond8 = $824 | $823;
    if ($or$cond8) {
     label = 287;
    } else {
     $829 = $$57;$831 = $817;
    }
   } else {
    $829 = $$57;$831 = $817;
   }
  }
 } else {
  label = 287;
 }
 do {
  if ((label|0) == 287) {
   $825 = (($$4921) - ($817))|0;
   $826 = (_updatewindow($0,$338,$825)|0);
   $827 = ($826|0)==(0);
   if ($827) {
    $$pre2370 = HEAP32[$19>>2]|0;
    $$pre2371 = HEAP32[$17>>2]|0;
    $829 = $$pre2370;$831 = $$pre2371;
    break;
   }
   HEAP32[$5>>2] = 30;
   $$01102 = -4;
   STACKTOP = sp;return ($$01102|0);
  }
 } while(0);
 $828 = (($20) - ($829))|0;
 $830 = (($$4921) - ($831))|0;
 $832 = ((($0)) + 8|0);
 $833 = HEAP32[$832>>2]|0;
 $834 = (($833) + ($828))|0;
 HEAP32[$832>>2] = $834;
 $835 = HEAP32[$52>>2]|0;
 $836 = (($835) + ($830))|0;
 HEAP32[$52>>2] = $836;
 $837 = HEAP32[$53>>2]|0;
 $838 = (($837) + ($830))|0;
 HEAP32[$53>>2] = $838;
 $839 = HEAP32[$25>>2]|0;
 $840 = ($839|0)!=(0);
 $841 = ($830|0)!=(0);
 $or$cond10 = $841 & $840;
 if ($or$cond10) {
  $842 = HEAP32[$28>>2]|0;
  $843 = ($842|0)==(0);
  $844 = HEAP32[$26>>2]|0;
  $845 = HEAP32[$7>>2]|0;
  $846 = (0 - ($830))|0;
  $847 = (($845) + ($846)|0);
  if ($843) {
   $849 = (_adler32($844,$847,$830)|0);
   $850 = $849;
  } else {
   $848 = (_crc32($844,$847,$830)|0);
   $850 = $848;
  }
  HEAP32[$26>>2] = $850;
  HEAP32[$33>>2] = $850;
 }
 $851 = HEAP32[$23>>2]|0;
 $852 = HEAP32[$37>>2]|0;
 $853 = ($852|0)!=(0);
 $854 = $853 ? 64 : 0;
 $855 = (($854) + ($851))|0;
 $856 = HEAP32[$5>>2]|0;
 $857 = ($856|0)==(11);
 $858 = $857 ? 128 : 0;
 $859 = (($855) + ($858))|0;
 $860 = ($856|0)==(19);
 $861 = ($856|0)==(14);
 $862 = $860 | $861;
 $863 = $862 ? 256 : 0;
 $864 = (($859) + ($863))|0;
 $865 = ((($0)) + 44|0);
 HEAP32[$865>>2] = $864;
 $866 = $830 | $828;
 $867 = ($866|0)==(0);
 $868 = ($1|0)==(4);
 $or$cond14 = $868 | $867;
 $869 = ($$8|0)==(0);
 $or$cond16 = $869 & $or$cond14;
 $$$8 = $or$cond16 ? -5 : $$8;
 $$01102 = $$$8;
 STACKTOP = sp;return ($$01102|0);
}
function _updatewindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$053 = 0, $$54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($0)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($4)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = 1 << $13;
  $15 = (FUNCTION_TABLE_iiii[$9 & 127]($11,$14,1)|0);
  HEAP32[$5>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$053 = 1;
   return ($$053|0);
  } else {
   $29 = $15;
  }
 } else {
  $29 = $6;
 }
 $17 = ((($4)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = ((($4)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = 1 << $21;
  HEAP32[$17>>2] = $22;
  $23 = ((($4)) + 48|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($4)) + 44|0);
  HEAP32[$24>>2] = 0;
  $25 = $22;
 } else {
  $25 = $18;
 }
 $26 = ($25>>>0)>($2>>>0);
 if (!($26)) {
  $27 = (0 - ($25))|0;
  $28 = (($1) + ($27)|0);
  _memcpy(($29|0),($28|0),($25|0))|0;
  $30 = ((($4)) + 48|0);
  HEAP32[$30>>2] = 0;
  $31 = HEAP32[$17>>2]|0;
  $32 = ((($4)) + 44|0);
  HEAP32[$32>>2] = $31;
  $$053 = 0;
  return ($$053|0);
 }
 $33 = ((($4)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($25) - ($34))|0;
 $36 = ($35>>>0)>($2>>>0);
 $$ = $36 ? $2 : $35;
 $37 = (($29) + ($34)|0);
 $38 = (0 - ($2))|0;
 $39 = (($1) + ($38)|0);
 _memcpy(($37|0),($39|0),($$|0))|0;
 $40 = (($2) - ($$))|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = HEAP32[$5>>2]|0;
  $43 = (0 - ($40))|0;
  $44 = (($1) + ($43)|0);
  _memcpy(($42|0),($44|0),($40|0))|0;
  HEAP32[$33>>2] = $40;
  $45 = HEAP32[$17>>2]|0;
  $46 = ((($4)) + 44|0);
  HEAP32[$46>>2] = $45;
  $$053 = 0;
  return ($$053|0);
 }
 $47 = HEAP32[$33>>2]|0;
 $48 = (($47) + ($$))|0;
 $49 = HEAP32[$17>>2]|0;
 $50 = ($48|0)==($49|0);
 $$54 = $50 ? 0 : $48;
 HEAP32[$33>>2] = $$54;
 $51 = ((($4)) + 44|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52>>>0)<($49>>>0);
 if (!($53)) {
  $$053 = 0;
  return ($$053|0);
 }
 $54 = (($52) + ($$))|0;
 HEAP32[$51>>2] = $54;
 $$053 = 0;
 return ($$053|0);
}
function _inflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre13 = 0, $$pre14 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -2;
  return ($$0|0);
 }
 $8 = ((($3)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 $$pre14 = ((($0)) + 40|0);
 if ($10) {
  $13 = $6;$14 = $3;
 } else {
  $11 = HEAP32[$$pre14>>2]|0;
  FUNCTION_TABLE_vii[$6 & 255]($11,$9);
  $$pre = HEAP32[$5>>2]|0;
  $$pre13 = HEAP32[$2>>2]|0;
  $13 = $$pre;$14 = $$pre13;
 }
 $12 = HEAP32[$$pre14>>2]|0;
 FUNCTION_TABLE_vii[$13 & 255]($12,$14);
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0215243248$ph = 0, $$0216242249$ph = 0, $$0217$ph = 0, $$0217$ph253 = 0, $$0218 = 0, $$0219$ph = 0, $$0220 = 0, $$0221 = 0, $$0222 = 0, $$0222$ph = 0, $$0223$ph252 = 0, $$0226$ph = 0, $$0228$ph = 0, $$0232$ = 0, $$0232$310 = 0, $$0232$313 = 0, $$0232285$lcssa$ph = 0, $$0232285$lcssa311 = 0, $$0233$$0232$ = 0;
 var $$0233$$0232$$$0226 = 0, $$0233$lcssa = 0, $$0233278 = 0, $$0234286 = 0, $$0244247$ph = 0, $$1225269 = 0, $$1229$lcssa = 0, $$1229268 = 0, $$1235272 = 0, $$2 = 0, $$2$ph = 0, $$3 = 0, $$3$ph = 0, $$4 = 0, $$ph = 0, $$ph250 = 0, $$ph250$in = 0, $$ph251 = 0, $$ph308 = 0, $$ph309 = 0;
 var $$phi$trans$insert = 0, $$phi$trans$insert305 = 0, $$phi$trans$insert305$1 = 0, $$phi$trans$insert305$10 = 0, $$phi$trans$insert305$11 = 0, $$phi$trans$insert305$12 = 0, $$phi$trans$insert305$2 = 0, $$phi$trans$insert305$3 = 0, $$phi$trans$insert305$4 = 0, $$phi$trans$insert305$5 = 0, $$phi$trans$insert305$6 = 0, $$phi$trans$insert305$7 = 0, $$phi$trans$insert305$8 = 0, $$phi$trans$insert305$9 = 0, $$pre = 0, $$pre306 = 0, $$pre306$1 = 0, $$pre306$10 = 0, $$pre306$11 = 0, $$pre306$12 = 0;
 var $$pre306$2 = 0, $$pre306$3 = 0, $$pre306$4 = 0, $$pre306$5 = 0, $$pre306$6 = 0, $$pre306$7 = 0, $$pre306$8 = 0, $$pre306$9 = 0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx25 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx31 = 0, $$sroa$11$0$$sroa_idx33 = 0, $$sroa$11$0$$sroa_idx35 = 0, $$sroa$14$0 = 0, $$sroa$14$0$$sroa_idx37 = 0, $$sroa$14$0$$sroa_idx38 = 0, $$sroa$14$0$$sroa_idx40 = 0, $$sroa$14$0$$sroa_idx42 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond302 = 0, $fold = 0, $fold337 = 0, $fold338 = 0, $fold339 = 0, $fold340 = 0, $fold341 = 0, $fold342 = 0, $fold343 = 0, $fold344 = 0, $fold345 = 0, $fold346 = 0, $or$cond = 0, $or$cond239 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $7 = sp;
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $8 = ($2|0)==(0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $22 = $9;
  label = 5;
 } else {
  $$0234286 = 0;
  while(1) {
   $10 = (($1) + ($$0234286<<1)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($6) + ($12<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = (($14) + 1)<<16>>16;
   HEAP16[$13>>1] = $15;
   $16 = (($$0234286) + 1)|0;
   $exitcond302 = ($16|0)==($2|0);
   if ($exitcond302) {
    break;
   } else {
    $$0234286 = $16;
   }
  }
  $$phi$trans$insert = ((($6)) + 30|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $17 = HEAP32[$4>>2]|0;
  $18 = ($$pre<<16>>16)==(0);
  if ($18) {
   $22 = $17;
   label = 5;
  } else {
   $$0232285$lcssa$ph = 15;$$ph308 = $17;$$ph309 = $$pre;
   label = 7;
  }
 }
 do {
  if ((label|0) == 5) {
   $19 = ((($6)) + 28|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(0);
   if ($21) {
    $266 = ((($6)) + 26|0);
    $267 = HEAP16[$266>>1]|0;
    $268 = ($267<<16>>16)==(0);
    if ($268) {
     $269 = ((($6)) + 24|0);
     $270 = HEAP16[$269>>1]|0;
     $271 = ($270<<16>>16)==(0);
     if ($271) {
      $272 = ((($6)) + 22|0);
      $273 = HEAP16[$272>>1]|0;
      $274 = ($273<<16>>16)==(0);
      if ($274) {
       $275 = ((($6)) + 20|0);
       $276 = HEAP16[$275>>1]|0;
       $277 = ($276<<16>>16)==(0);
       if ($277) {
        $278 = ((($6)) + 18|0);
        $279 = HEAP16[$278>>1]|0;
        $280 = ($279<<16>>16)==(0);
        if ($280) {
         $281 = ((($6)) + 16|0);
         $282 = HEAP16[$281>>1]|0;
         $283 = ($282<<16>>16)==(0);
         if ($283) {
          $284 = ((($6)) + 14|0);
          $285 = HEAP16[$284>>1]|0;
          $286 = ($285<<16>>16)==(0);
          if ($286) {
           $287 = ((($6)) + 12|0);
           $288 = HEAP16[$287>>1]|0;
           $289 = ($288<<16>>16)==(0);
           if ($289) {
            $290 = ((($6)) + 10|0);
            $291 = HEAP16[$290>>1]|0;
            $292 = ($291<<16>>16)==(0);
            if ($292) {
             $293 = ((($6)) + 8|0);
             $294 = HEAP16[$293>>1]|0;
             $295 = ($294<<16>>16)==(0);
             if ($295) {
              $296 = ((($6)) + 6|0);
              $297 = HEAP16[$296>>1]|0;
              $298 = ($297<<16>>16)==(0);
              if ($298) {
               $299 = ((($6)) + 4|0);
               $300 = HEAP16[$299>>1]|0;
               $301 = ($300<<16>>16)==(0);
               if ($301) {
                $302 = ((($6)) + 2|0);
                $303 = HEAP16[$302>>1]|0;
                $304 = ($303<<16>>16)==(0);
                if (!($304)) {
                 $23 = ($22>>>0)>(1);
                 $$0232$ = $23 ? 1 : $22;
                 $$0232$313 = $$0232$;$$0232285$lcssa311 = 1;$$0233$lcssa = 1;$262 = 0;
                 break;
                }
                $305 = HEAP32[$3>>2]|0;
                $306 = ((($305)) + 4|0);
                HEAP32[$3>>2] = $306;
                HEAP8[$305>>0] = 64;
                $$sroa$11$0$$sroa_idx35 = ((($305)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx35>>0] = 1;
                $$sroa$14$0$$sroa_idx42 = ((($305)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx42>>1] = 0;
                $307 = HEAP32[$3>>2]|0;
                $308 = ((($307)) + 4|0);
                HEAP32[$3>>2] = $308;
                HEAP8[$307>>0] = 64;
                $$sroa$11$0$$sroa_idx33 = ((($307)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx33>>0] = 1;
                $$sroa$14$0$$sroa_idx40 = ((($307)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx40>>1] = 0;
                HEAP32[$4>>2] = 1;
                $$0218 = 0;
                STACKTOP = sp;return ($$0218|0);
               } else {
                $$0232285$lcssa$ph = 2;$$ph308 = $22;$$ph309 = 0;
                label = 7;
               }
              } else {
               $$0232285$lcssa$ph = 3;$$ph308 = $22;$$ph309 = 0;
               label = 7;
              }
             } else {
              $$0232285$lcssa$ph = 4;$$ph308 = $22;$$ph309 = 0;
              label = 7;
             }
            } else {
             $$0232285$lcssa$ph = 5;$$ph308 = $22;$$ph309 = 0;
             label = 7;
            }
           } else {
            $$0232285$lcssa$ph = 6;$$ph308 = $22;$$ph309 = 0;
            label = 7;
           }
          } else {
           $$0232285$lcssa$ph = 7;$$ph308 = $22;$$ph309 = 0;
           label = 7;
          }
         } else {
          $$0232285$lcssa$ph = 8;$$ph308 = $22;$$ph309 = 0;
          label = 7;
         }
        } else {
         $$0232285$lcssa$ph = 9;$$ph308 = $22;$$ph309 = 0;
         label = 7;
        }
       } else {
        $$0232285$lcssa$ph = 10;$$ph308 = $22;$$ph309 = 0;
        label = 7;
       }
      } else {
       $$0232285$lcssa$ph = 11;$$ph308 = $22;$$ph309 = 0;
       label = 7;
      }
     } else {
      $$0232285$lcssa$ph = 12;$$ph308 = $22;$$ph309 = 0;
      label = 7;
     }
    } else {
     $$0232285$lcssa$ph = 13;$$ph308 = $22;$$ph309 = 0;
     label = 7;
    }
   } else {
    $$0232285$lcssa$ph = 14;$$ph308 = $22;$$ph309 = 0;
    label = 7;
   }
  }
 } while(0);
 L25: do {
  if ((label|0) == 7) {
   $24 = ($$ph308>>>0)>($$0232285$lcssa$ph>>>0);
   $$0232$310 = $24 ? $$0232285$lcssa$ph : $$ph308;
   $$0233278 = 1;
   while(1) {
    $25 = (($6) + ($$0233278<<1)|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = ($26<<16>>16)==(0);
    if (!($27)) {
     $$0232$313 = $$0232$310;$$0232285$lcssa311 = $$0232285$lcssa$ph;$$0233$lcssa = $$0233278;$262 = $$ph309;
     break L25;
    }
    $28 = (($$0233278) + 1)|0;
    $29 = ($28>>>0)<($$0232285$lcssa$ph>>>0);
    if ($29) {
     $$0233278 = $28;
    } else {
     $$0232$313 = $$0232$310;$$0232285$lcssa311 = $$0232285$lcssa$ph;$$0233$lcssa = $28;$262 = $$ph309;
     break;
    }
   }
  }
 } while(0);
 $30 = ($$0232$313>>>0)<($$0233$lcssa>>>0);
 $$0233$$0232$ = $30 ? $$0233$lcssa : $$0232$313;
 $31 = ((($6)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (2 - ($33))|0;
 $35 = ($34|0)<(0);
 if ($35) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $36 = $34 << 1;
 $37 = ((($6)) + 4|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = (($36) - ($39))|0;
 $41 = ($40|0)<(0);
 if ($41) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $188 = $40 << 1;
 $189 = ((($6)) + 6|0);
 $190 = HEAP16[$189>>1]|0;
 $191 = $190&65535;
 $192 = (($188) - ($191))|0;
 $193 = ($192|0)<(0);
 if ($193) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $194 = $192 << 1;
 $195 = ((($6)) + 8|0);
 $196 = HEAP16[$195>>1]|0;
 $197 = $196&65535;
 $198 = (($194) - ($197))|0;
 $199 = ($198|0)<(0);
 if ($199) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $200 = $198 << 1;
 $201 = ((($6)) + 10|0);
 $202 = HEAP16[$201>>1]|0;
 $203 = $202&65535;
 $204 = (($200) - ($203))|0;
 $205 = ($204|0)<(0);
 if ($205) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $206 = $204 << 1;
 $207 = ((($6)) + 12|0);
 $208 = HEAP16[$207>>1]|0;
 $209 = $208&65535;
 $210 = (($206) - ($209))|0;
 $211 = ($210|0)<(0);
 if ($211) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $212 = $210 << 1;
 $213 = ((($6)) + 14|0);
 $214 = HEAP16[$213>>1]|0;
 $215 = $214&65535;
 $216 = (($212) - ($215))|0;
 $217 = ($216|0)<(0);
 if ($217) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $218 = $216 << 1;
 $219 = ((($6)) + 16|0);
 $220 = HEAP16[$219>>1]|0;
 $221 = $220&65535;
 $222 = (($218) - ($221))|0;
 $223 = ($222|0)<(0);
 if ($223) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $224 = $222 << 1;
 $225 = ((($6)) + 18|0);
 $226 = HEAP16[$225>>1]|0;
 $227 = $226&65535;
 $228 = (($224) - ($227))|0;
 $229 = ($228|0)<(0);
 if ($229) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $230 = $228 << 1;
 $231 = ((($6)) + 20|0);
 $232 = HEAP16[$231>>1]|0;
 $233 = $232&65535;
 $234 = (($230) - ($233))|0;
 $235 = ($234|0)<(0);
 if ($235) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $236 = $234 << 1;
 $237 = ((($6)) + 22|0);
 $238 = HEAP16[$237>>1]|0;
 $239 = $238&65535;
 $240 = (($236) - ($239))|0;
 $241 = ($240|0)<(0);
 if ($241) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $242 = $240 << 1;
 $243 = ((($6)) + 24|0);
 $244 = HEAP16[$243>>1]|0;
 $245 = $244&65535;
 $246 = (($242) - ($245))|0;
 $247 = ($246|0)<(0);
 if ($247) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $248 = $246 << 1;
 $249 = ((($6)) + 26|0);
 $250 = HEAP16[$249>>1]|0;
 $251 = $250&65535;
 $252 = (($248) - ($251))|0;
 $253 = ($252|0)<(0);
 if ($253) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $254 = $252 << 1;
 $255 = ((($6)) + 28|0);
 $256 = HEAP16[$255>>1]|0;
 $257 = $256&65535;
 $258 = (($254) - ($257))|0;
 $259 = ($258|0)<(0);
 if ($259) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $260 = $258 << 1;
 $261 = $262&65535;
 $263 = (($260) - ($261))|0;
 $264 = ($263|0)<(0);
 if ($264) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $265 = ($263|0)==(0);
 if (!($265)) {
  $42 = ($0|0)==(0);
  $43 = ($$0232285$lcssa311|0)!=(1);
  $or$cond = $42 | $43;
  if ($or$cond) {
   $$0218 = -1;
   STACKTOP = sp;return ($$0218|0);
  }
 }
 $44 = ((($7)) + 2|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($7)) + 4|0);
 HEAP16[$45>>1] = $32;
 $46 = $32&65535;
 $$phi$trans$insert305 = ((($6)) + 4|0);
 $$pre306 = HEAP16[$$phi$trans$insert305>>1]|0;
 $47 = $$pre306&65535;
 $48 = (($47) + ($46))|0;
 $49 = $48&65535;
 $50 = ((($7)) + 6|0);
 HEAP16[$50>>1] = $49;
 $$phi$trans$insert305$1 = ((($6)) + 6|0);
 $$pre306$1 = HEAP16[$$phi$trans$insert305$1>>1]|0;
 $51 = $$pre306$1&65535;
 $52 = (($51) + ($48))|0;
 $53 = $52&65535;
 $54 = ((($7)) + 8|0);
 HEAP16[$54>>1] = $53;
 $$phi$trans$insert305$2 = ((($6)) + 8|0);
 $$pre306$2 = HEAP16[$$phi$trans$insert305$2>>1]|0;
 $fold = (($48) + ($51))|0;
 $55 = $$pre306$2&65535;
 $56 = (($55) + ($fold))|0;
 $57 = $56&65535;
 $58 = ((($7)) + 10|0);
 HEAP16[$58>>1] = $57;
 $$phi$trans$insert305$3 = ((($6)) + 10|0);
 $$pre306$3 = HEAP16[$$phi$trans$insert305$3>>1]|0;
 $fold337 = (($fold) + ($55))|0;
 $59 = $$pre306$3&65535;
 $60 = (($59) + ($fold337))|0;
 $61 = $60&65535;
 $62 = ((($7)) + 12|0);
 HEAP16[$62>>1] = $61;
 $$phi$trans$insert305$4 = ((($6)) + 12|0);
 $$pre306$4 = HEAP16[$$phi$trans$insert305$4>>1]|0;
 $fold338 = (($fold337) + ($59))|0;
 $63 = $$pre306$4&65535;
 $64 = (($63) + ($fold338))|0;
 $65 = $64&65535;
 $66 = ((($7)) + 14|0);
 HEAP16[$66>>1] = $65;
 $$phi$trans$insert305$5 = ((($6)) + 14|0);
 $$pre306$5 = HEAP16[$$phi$trans$insert305$5>>1]|0;
 $fold339 = (($fold338) + ($63))|0;
 $67 = $$pre306$5&65535;
 $68 = (($67) + ($fold339))|0;
 $69 = $68&65535;
 $70 = ((($7)) + 16|0);
 HEAP16[$70>>1] = $69;
 $$phi$trans$insert305$6 = ((($6)) + 16|0);
 $$pre306$6 = HEAP16[$$phi$trans$insert305$6>>1]|0;
 $fold340 = (($fold339) + ($67))|0;
 $71 = $$pre306$6&65535;
 $72 = (($71) + ($fold340))|0;
 $73 = $72&65535;
 $74 = ((($7)) + 18|0);
 HEAP16[$74>>1] = $73;
 $$phi$trans$insert305$7 = ((($6)) + 18|0);
 $$pre306$7 = HEAP16[$$phi$trans$insert305$7>>1]|0;
 $fold341 = (($fold340) + ($71))|0;
 $75 = $$pre306$7&65535;
 $76 = (($75) + ($fold341))|0;
 $77 = $76&65535;
 $78 = ((($7)) + 20|0);
 HEAP16[$78>>1] = $77;
 $$phi$trans$insert305$8 = ((($6)) + 20|0);
 $$pre306$8 = HEAP16[$$phi$trans$insert305$8>>1]|0;
 $fold342 = (($fold341) + ($75))|0;
 $79 = $$pre306$8&65535;
 $80 = (($79) + ($fold342))|0;
 $81 = $80&65535;
 $82 = ((($7)) + 22|0);
 HEAP16[$82>>1] = $81;
 $$phi$trans$insert305$9 = ((($6)) + 22|0);
 $$pre306$9 = HEAP16[$$phi$trans$insert305$9>>1]|0;
 $fold343 = (($fold342) + ($79))|0;
 $83 = $$pre306$9&65535;
 $84 = (($83) + ($fold343))|0;
 $85 = $84&65535;
 $86 = ((($7)) + 24|0);
 HEAP16[$86>>1] = $85;
 $$phi$trans$insert305$10 = ((($6)) + 24|0);
 $$pre306$10 = HEAP16[$$phi$trans$insert305$10>>1]|0;
 $fold344 = (($fold343) + ($83))|0;
 $87 = $$pre306$10&65535;
 $88 = (($87) + ($fold344))|0;
 $89 = $88&65535;
 $90 = ((($7)) + 26|0);
 HEAP16[$90>>1] = $89;
 $$phi$trans$insert305$11 = ((($6)) + 26|0);
 $$pre306$11 = HEAP16[$$phi$trans$insert305$11>>1]|0;
 $fold345 = (($fold344) + ($87))|0;
 $91 = $$pre306$11&65535;
 $92 = (($91) + ($fold345))|0;
 $93 = $92&65535;
 $94 = ((($7)) + 28|0);
 HEAP16[$94>>1] = $93;
 $$phi$trans$insert305$12 = ((($6)) + 28|0);
 $$pre306$12 = HEAP16[$$phi$trans$insert305$12>>1]|0;
 $fold346 = (($fold345) + ($91))|0;
 $95 = $$pre306$12&65535;
 $96 = (($95) + ($fold346))|0;
 $97 = $96&65535;
 $98 = ((($7)) + 30|0);
 HEAP16[$98>>1] = $97;
 if (!($8)) {
  $$1235272 = 0;
  while(1) {
   $99 = (($1) + ($$1235272<<1)|0);
   $100 = HEAP16[$99>>1]|0;
   $101 = ($100<<16>>16)==(0);
   if (!($101)) {
    $102 = $100&65535;
    $103 = $$1235272&65535;
    $104 = (($7) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = (($105) + 1)<<16>>16;
    HEAP16[$104>>1] = $106;
    $107 = $105&65535;
    $108 = (($5) + ($107<<1)|0);
    HEAP16[$108>>1] = $103;
   }
   $109 = (($$1235272) + 1)|0;
   $exitcond = ($109|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$1235272 = $109;
   }
  }
 }
 switch ($0|0) {
 case 0:  {
  $$0215243248$ph = $5;$$0216242249$ph = $5;$$0244247$ph = 19;$$ph = 0;$$ph251 = 0;
  break;
 }
 case 1:  {
  $110 = ($$0233$$0232$>>>0)>(9);
  if ($110) {
   $$0218 = 1;
   STACKTOP = sp;return ($$0218|0);
  } else {
   $$0215243248$ph = (13006);$$0216242249$ph = (12880);$$0244247$ph = 256;$$ph = 0;$$ph251 = 1;
  }
  break;
 }
 default: {
  $111 = ($$0233$$0232$>>>0)>(9);
  $112 = ($0|0)==(2);
  $or$cond5 = $112 & $111;
  if ($or$cond5) {
   $$0218 = 1;
   STACKTOP = sp;return ($$0218|0);
  } else {
   $$0215243248$ph = 13456;$$0216242249$ph = 13330;$$0244247$ph = -1;$$ph = $112;$$ph251 = 0;
  }
 }
 }
 $$ph250$in = 1 << $$0233$$0232$;
 $$0217$ph = HEAP32[$3>>2]|0;
 $$ph250 = (($$ph250$in) + -1)|0;
 $113 = $$0233$$0232$&255;
 $$0217$ph253 = $$0217$ph;$$0219$ph = -1;$$0222$ph = 0;$$0223$ph252 = $$ph250$in;$$0226$ph = 0;$$0228$ph = $$0233$$0232$;$$2$ph = 0;$$3$ph = $$0233$lcssa;
 L93: while(1) {
  $114 = 1 << $$0228$ph;
  $$0222 = $$0222$ph;$$2 = $$2$ph;$$3 = $$3$ph;
  while(1) {
   $115 = (($$3) - ($$0226$ph))|0;
   $116 = $115&255;
   $117 = (($5) + ($$2<<1)|0);
   $118 = HEAP16[$117>>1]|0;
   $119 = $118&65535;
   $120 = ($119|0)<($$0244247$ph|0);
   do {
    if ($120) {
     $$sroa$0$0 = 0;$$sroa$14$0 = $118;
    } else {
     $121 = ($119|0)>($$0244247$ph|0);
     if (!($121)) {
      $$sroa$0$0 = 96;$$sroa$14$0 = 0;
      break;
     }
     $122 = (($$0216242249$ph) + ($119<<1)|0);
     $123 = (($$0215243248$ph) + ($119<<1)|0);
     $124 = HEAP16[$123>>1]|0;
     $125 = $124&255;
     $126 = HEAP16[$122>>1]|0;
     $$sroa$0$0 = $125;$$sroa$14$0 = $126;
    }
   } while(0);
   $127 = 1 << $115;
   $128 = $$0222 >>> $$0226$ph;
   $$0220 = $114;
   while(1) {
    $129 = (($$0220) - ($127))|0;
    $130 = (($129) + ($128))|0;
    $$sroa$0$0$$sroa_idx25 = (($$0217$ph253) + ($130<<2)|0);
    HEAP8[$$sroa$0$0$$sroa_idx25>>0] = $$sroa$0$0;
    $$sroa$11$0$$sroa_idx31 = (((($$0217$ph253) + ($130<<2)|0)) + 1|0);
    HEAP8[$$sroa$11$0$$sroa_idx31>>0] = $116;
    $$sroa$14$0$$sroa_idx38 = (((($$0217$ph253) + ($130<<2)|0)) + 2|0);
    HEAP16[$$sroa$14$0$$sroa_idx38>>1] = $$sroa$14$0;
    $131 = ($129|0)==(0);
    if ($131) {
     break;
    } else {
     $$0220 = $129;
    }
   }
   $132 = (($$3) + -1)|0;
   $133 = 1 << $132;
   $$0221 = $133;
   while(1) {
    $134 = $$0221 & $$0222;
    $135 = ($134|0)==(0);
    $136 = $$0221 >>> 1;
    if ($135) {
     break;
    } else {
     $$0221 = $136;
    }
   }
   $137 = ($$0221|0)==(0);
   $138 = (($$0221) + -1)|0;
   $139 = $138 & $$0222;
   $140 = (($139) + ($$0221))|0;
   $$ = $137 ? 0 : $140;
   $141 = (($$2) + 1)|0;
   $142 = (($6) + ($$3<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = (($143) + -1)<<16>>16;
   HEAP16[$142>>1] = $144;
   $145 = ($144<<16>>16)==(0);
   if ($145) {
    $146 = ($$3|0)==($$0232285$lcssa311|0);
    if ($146) {
     break L93;
    }
    $147 = (($5) + ($141<<1)|0);
    $148 = HEAP16[$147>>1]|0;
    $149 = $148&65535;
    $150 = (($1) + ($149<<1)|0);
    $151 = HEAP16[$150>>1]|0;
    $152 = $151&65535;
    $$4 = $152;
   } else {
    $$4 = $$3;
   }
   $153 = ($$4>>>0)>($$0233$$0232$>>>0);
   if (!($153)) {
    $$0222 = $$;$$2 = $141;$$3 = $$4;
    continue;
   }
   $154 = $$ & $$ph250;
   $155 = ($154|0)==($$0219$ph|0);
   if ($155) {
    $$0222 = $$;$$2 = $141;$$3 = $$4;
   } else {
    break;
   }
  }
  $156 = ($$0226$ph|0)==(0);
  $$0233$$0232$$$0226 = $156 ? $$0233$$0232$ : $$0226$ph;
  $157 = (($$0217$ph253) + ($114<<2)|0);
  $158 = (($$4) - ($$0233$$0232$$$0226))|0;
  $159 = ($$4>>>0)<($$0232285$lcssa311>>>0);
  L113: do {
   if ($159) {
    $160 = 1 << $158;
    $$1225269 = $160;$$1229268 = $158;$162 = $$4;
    while(1) {
     $161 = (($6) + ($162<<1)|0);
     $163 = HEAP16[$161>>1]|0;
     $164 = $163&65535;
     $165 = (($$1225269) - ($164))|0;
     $166 = ($165|0)<(1);
     if ($166) {
      $$1229$lcssa = $$1229268;
      break L113;
     }
     $167 = (($$1229268) + 1)|0;
     $168 = $165 << 1;
     $169 = (($167) + ($$0233$$0232$$$0226))|0;
     $170 = ($169>>>0)<($$0232285$lcssa311>>>0);
     if ($170) {
      $$1225269 = $168;$$1229268 = $167;$162 = $169;
     } else {
      $$1229$lcssa = $167;
      break;
     }
    }
   } else {
    $$1229$lcssa = $158;
   }
  } while(0);
  $171 = 1 << $$1229$lcssa;
  $172 = (($171) + ($$0223$ph252))|0;
  $173 = ($172>>>0)>(852);
  $or$cond7 = $$ph251 & $173;
  $174 = ($172>>>0)>(592);
  $or$cond9 = $$ph & $174;
  $or$cond239 = $or$cond7 | $or$cond9;
  if ($or$cond239) {
   $$0218 = 1;
   label = 43;
   break;
  }
  $175 = $$1229$lcssa&255;
  $176 = HEAP32[$3>>2]|0;
  $177 = (($176) + ($154<<2)|0);
  HEAP8[$177>>0] = $175;
  $178 = (((($176) + ($154<<2)|0)) + 1|0);
  HEAP8[$178>>0] = $113;
  $179 = $157;
  $180 = $176;
  $181 = (($179) - ($180))|0;
  $182 = $181 >>> 2;
  $183 = $182&65535;
  $184 = (((($176) + ($154<<2)|0)) + 2|0);
  HEAP16[$184>>1] = $183;
  $$0217$ph253 = $157;$$0219$ph = $154;$$0222$ph = $$;$$0223$ph252 = $172;$$0226$ph = $$0233$$0232$$$0226;$$0228$ph = $$1229$lcssa;$$2$ph = $141;$$3$ph = $$4;
 }
 if ((label|0) == 43) {
  STACKTOP = sp;return ($$0218|0);
 }
 $185 = ($$|0)==(0);
 if (!($185)) {
  $$sroa$14$0$$sroa_idx37 = (((($$0217$ph253) + ($$<<2)|0)) + 2|0);
  $$sroa$11$0$$sroa_idx = (((($$0217$ph253) + ($$<<2)|0)) + 1|0);
  $$sroa$0$0$$sroa_idx = (($$0217$ph253) + ($$<<2)|0);
  HEAP8[$$sroa$0$0$$sroa_idx>>0] = 64;
  HEAP8[$$sroa$11$0$$sroa_idx>>0] = $116;
  HEAP16[$$sroa$14$0$$sroa_idx37>>1] = 0;
 }
 $186 = HEAP32[$3>>2]|0;
 $187 = (($186) + ($$0223$ph252<<2)|0);
 HEAP32[$3>>2] = $187;
 HEAP32[$4>>2] = $$0233$$0232$;
 $$0218 = 0;
 STACKTOP = sp;return ($$0218|0);
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = Math_imul($2, $1)|0;
 $4 = (_malloc($3)|0);
 return ($4|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$1184 = 0, $$0 = 0, $$0173 = 0, $$0174198 = 0, $$0178197 = 0, $$0190 = 0, $$1$lcssa = 0, $$1175$lcssa245248 = 0, $$1175220 = 0, $$1179$lcssa244249 = 0, $$1179219 = 0, $$1184$lcssa = 0, $$1184196 = 0, $$1199 = 0, $$2$lcssa246247 = 0, $$2176211 = 0, $$2180 = 0, $$2221 = 0, $$3 = 0;
 var $$3177203 = 0, $$3181210 = 0, $$3186$lcssa243250 = 0, $$3186218 = 0, $$4182202 = 0, $$4187 = 0, $$4212 = 0, $$5$lcssa = 0, $$5188209 = 0, $$5204 = 0, $$6 = 0, $$6189$lcssa = 0, $$6189201 = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep241 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 >>> 16;
 $4 = $0 & 65535;
 $5 = ($2|0)==(1);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $8 = (($7) + ($4))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + -65521)|0;
  $$ = $9 ? $10 : $8;
  $11 = (($$) + ($3))|0;
  $12 = ($11>>>0)>(65520);
  $13 = (($11) + 15)|0;
  $$0173 = $12 ? $13 : $11;
  $14 = $$0173 << 16;
  $15 = $14 | $$;
  $$0190 = $15;
  return ($$0190|0);
 }
 $16 = ($1|0)==(0|0);
 if ($16) {
  $$0190 = 1;
  return ($$0190|0);
 }
 $17 = ($2>>>0)<(16);
 if ($17) {
  $19 = ($2|0)==(0);
  if ($19) {
   $$1$lcssa = $3;$$1184$lcssa = $4;
  } else {
   $$0174198 = $2;$$0178197 = $1;$$1184196 = $4;$$1199 = $3;
   while(1) {
    $20 = (($$0174198) + -1)|0;
    $21 = ((($$0178197)) + 1|0);
    $22 = HEAP8[$$0178197>>0]|0;
    $23 = $22&255;
    $24 = (($23) + ($$1184196))|0;
    $25 = (($24) + ($$1199))|0;
    $26 = ($20|0)==(0);
    if ($26) {
     $$1$lcssa = $25;$$1184$lcssa = $24;
     break;
    } else {
     $$0174198 = $20;$$0178197 = $21;$$1184196 = $24;$$1199 = $25;
    }
   }
  }
  $27 = ($$1184$lcssa>>>0)>(65520);
  $28 = (($$1184$lcssa) + -65521)|0;
  $$$1184 = $27 ? $28 : $$1184$lcssa;
  $29 = (($$1$lcssa>>>0) % 65521)&-1;
  $30 = $29 << 16;
  $31 = $30 | $$$1184;
  $$0190 = $31;
  return ($$0190|0);
 }
 $18 = ($2>>>0)>(5551);
 if ($18) {
  $$1175220 = $2;$$1179219 = $1;$$2221 = $3;$$3186218 = $4;
  while(1) {
   $32 = (($$1175220) + -5552)|0;
   $$0 = 347;$$2180 = $$1179219;$$3 = $$2221;$$4187 = $$3186218;
   while(1) {
    $33 = HEAP8[$$2180>>0]|0;
    $34 = $33&255;
    $35 = (($34) + ($$4187))|0;
    $36 = (($35) + ($$3))|0;
    $37 = ((($$2180)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($35) + ($39))|0;
    $41 = (($36) + ($40))|0;
    $42 = ((($$2180)) + 2|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($40) + ($44))|0;
    $46 = (($41) + ($45))|0;
    $47 = ((($$2180)) + 3|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = (($45) + ($49))|0;
    $51 = (($46) + ($50))|0;
    $52 = ((($$2180)) + 4|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($50) + ($54))|0;
    $56 = (($51) + ($55))|0;
    $57 = ((($$2180)) + 5|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = (($55) + ($59))|0;
    $61 = (($56) + ($60))|0;
    $62 = ((($$2180)) + 6|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = (($60) + ($64))|0;
    $66 = (($61) + ($65))|0;
    $67 = ((($$2180)) + 7|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = (($65) + ($69))|0;
    $71 = (($66) + ($70))|0;
    $72 = ((($$2180)) + 8|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($70) + ($74))|0;
    $76 = (($71) + ($75))|0;
    $77 = ((($$2180)) + 9|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = (($75) + ($79))|0;
    $81 = (($76) + ($80))|0;
    $82 = ((($$2180)) + 10|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (($80) + ($84))|0;
    $86 = (($81) + ($85))|0;
    $87 = ((($$2180)) + 11|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = (($85) + ($89))|0;
    $91 = (($86) + ($90))|0;
    $92 = ((($$2180)) + 12|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = (($90) + ($94))|0;
    $96 = (($91) + ($95))|0;
    $97 = ((($$2180)) + 13|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = (($95) + ($99))|0;
    $101 = (($96) + ($100))|0;
    $102 = ((($$2180)) + 14|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($100) + ($104))|0;
    $106 = (($101) + ($105))|0;
    $107 = ((($$2180)) + 15|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = (($105) + ($109))|0;
    $111 = (($106) + ($110))|0;
    $112 = ((($$2180)) + 16|0);
    $113 = (($$0) + -1)|0;
    $114 = ($113|0)==(0);
    if ($114) {
     break;
    } else {
     $$0 = $113;$$2180 = $112;$$3 = $111;$$4187 = $110;
    }
   }
   $scevgep241 = ((($$1179219)) + 5552|0);
   $115 = (($110>>>0) % 65521)&-1;
   $116 = (($111>>>0) % 65521)&-1;
   $117 = ($32>>>0)>(5551);
   if ($117) {
    $$1175220 = $32;$$1179219 = $scevgep241;$$2221 = $116;$$3186218 = $115;
   } else {
    break;
   }
  }
  $118 = ($32|0)==(0);
  if ($118) {
   $$6 = $116;$$7 = $115;
  } else {
   $119 = ($32>>>0)>(15);
   if ($119) {
    $$1175$lcssa245248 = $32;$$1179$lcssa244249 = $scevgep241;$$2$lcssa246247 = $116;$$3186$lcssa243250 = $115;
    label = 14;
   } else {
    $$3177203 = $32;$$4182202 = $scevgep241;$$5204 = $116;$$6189201 = $115;
    label = 17;
   }
  }
 } else {
  $$1175$lcssa245248 = $2;$$1179$lcssa244249 = $1;$$2$lcssa246247 = $3;$$3186$lcssa243250 = $4;
  label = 14;
 }
 if ((label|0) == 14) {
  $120 = (($$1175$lcssa245248) + -16)|0;
  $121 = $120 & -16;
  $122 = (($121) + 16)|0;
  $$2176211 = $$1175$lcssa245248;$$3181210 = $$1179$lcssa244249;$$4212 = $$2$lcssa246247;$$5188209 = $$3186$lcssa243250;
  while(1) {
   $125 = (($$2176211) + -16)|0;
   $126 = HEAP8[$$3181210>>0]|0;
   $127 = $126&255;
   $128 = (($127) + ($$5188209))|0;
   $129 = (($128) + ($$4212))|0;
   $130 = ((($$3181210)) + 1|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = (($128) + ($132))|0;
   $134 = (($129) + ($133))|0;
   $135 = ((($$3181210)) + 2|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = (($133) + ($137))|0;
   $139 = (($134) + ($138))|0;
   $140 = ((($$3181210)) + 3|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($138) + ($142))|0;
   $144 = (($139) + ($143))|0;
   $145 = ((($$3181210)) + 4|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($143) + ($147))|0;
   $149 = (($144) + ($148))|0;
   $150 = ((($$3181210)) + 5|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = (($148) + ($152))|0;
   $154 = (($149) + ($153))|0;
   $155 = ((($$3181210)) + 6|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = (($153) + ($157))|0;
   $159 = (($154) + ($158))|0;
   $160 = ((($$3181210)) + 7|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($158) + ($162))|0;
   $164 = (($159) + ($163))|0;
   $165 = ((($$3181210)) + 8|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = (($163) + ($167))|0;
   $169 = (($164) + ($168))|0;
   $170 = ((($$3181210)) + 9|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = (($168) + ($172))|0;
   $174 = (($169) + ($173))|0;
   $175 = ((($$3181210)) + 10|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = (($173) + ($177))|0;
   $179 = (($174) + ($178))|0;
   $180 = ((($$3181210)) + 11|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = (($178) + ($182))|0;
   $184 = (($179) + ($183))|0;
   $185 = ((($$3181210)) + 12|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($183) + ($187))|0;
   $189 = (($184) + ($188))|0;
   $190 = ((($$3181210)) + 13|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($188) + ($192))|0;
   $194 = (($189) + ($193))|0;
   $195 = ((($$3181210)) + 14|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = (($193) + ($197))|0;
   $199 = (($194) + ($198))|0;
   $200 = ((($$3181210)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($198) + ($202))|0;
   $204 = (($199) + ($203))|0;
   $205 = ((($$3181210)) + 16|0);
   $206 = ($125>>>0)>(15);
   if ($206) {
    $$2176211 = $125;$$3181210 = $205;$$4212 = $204;$$5188209 = $203;
   } else {
    break;
   }
  }
  $123 = (($120) - ($121))|0;
  $scevgep = (($$1179$lcssa244249) + ($122)|0);
  $124 = ($123|0)==(0);
  if ($124) {
   $$5$lcssa = $204;$$6189$lcssa = $203;
   label = 18;
  } else {
   $$3177203 = $123;$$4182202 = $scevgep;$$5204 = $204;$$6189201 = $203;
   label = 17;
  }
 }
 if ((label|0) == 17) {
  while(1) {
   label = 0;
   $207 = (($$3177203) + -1)|0;
   $208 = ((($$4182202)) + 1|0);
   $209 = HEAP8[$$4182202>>0]|0;
   $210 = $209&255;
   $211 = (($210) + ($$6189201))|0;
   $212 = (($211) + ($$5204))|0;
   $213 = ($207|0)==(0);
   if ($213) {
    $$5$lcssa = $212;$$6189$lcssa = $211;
    label = 18;
    break;
   } else {
    $$3177203 = $207;$$4182202 = $208;$$5204 = $212;$$6189201 = $211;
    label = 17;
   }
  }
 }
 if ((label|0) == 18) {
  $214 = (($$6189$lcssa>>>0) % 65521)&-1;
  $215 = (($$5$lcssa>>>0) % 65521)&-1;
  $$6 = $215;$$7 = $214;
 }
 $216 = $$6 << 16;
 $217 = $216 | $$7;
 $$0190 = $217;
 return ($$0190|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$076$masked$i = 0, $$07699$i = 0, $$07898$i = 0, $$08297$i = 0, $$092$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$177$lcssa$i = 0, $$17791$i = 0, $$179$lcssa$i = 0, $$17990$i = 0, $$183$i = 0, $$187$i = 0, $$2$lcssa$i = 0, $$280$lcssa$i = 0, $$28085$i = 0, $$286$i = 0, $$3$i = 0, $$3$masked$i = 0;
 var $$381$i = 0, $$4$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep115$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = $0 ^ -1;
 $5 = ($2|0)==(0);
 L4: do {
  if ($5) {
   $$4$i = $4;
  } else {
   $$07699$i = $4;$$07898$i = $2;$$08297$i = $1;
   while(1) {
    $6 = $$08297$i;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
    $9 = ((($$08297$i)) + 1|0);
    $10 = HEAP8[$$08297$i>>0]|0;
    $11 = $10&255;
    $$076$masked$i = $$07699$i & 255;
    $12 = $11 ^ $$076$masked$i;
    $13 = (2472 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $$07699$i >>> 8;
    $16 = $14 ^ $15;
    $17 = (($$07898$i) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$4$i = $16;
     break L4;
    } else {
     $$07699$i = $16;$$07898$i = $17;$$08297$i = $9;
    }
   }
   $19 = ($$07898$i>>>0)>(31);
   if ($19) {
    $20 = (($$07898$i) + -32)|0;
    $21 = $20 & -32;
    $22 = (($21) + 32)|0;
    $scevgep115$i = (($$08297$i) + ($22)|0);
    $$092$i = $$08297$i;$$17791$i = $$07699$i;$$17990$i = $$07898$i;
    while(1) {
     $28 = ((($$092$i)) + 4|0);
     $29 = HEAP32[$$092$i>>2]|0;
     $30 = $29 ^ $$17791$i;
     $31 = $30 & 255;
     $32 = (5544 + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $30 >>> 8;
     $35 = $34 & 255;
     $36 = (4520 + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 ^ $33;
     $39 = $30 >>> 16;
     $40 = $39 & 255;
     $41 = (3496 + ($40<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $38 ^ $42;
     $44 = $30 >>> 24;
     $45 = (2472 + ($44<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $43 ^ $46;
     $48 = ((($$092$i)) + 8|0);
     $49 = HEAP32[$28>>2]|0;
     $50 = $47 ^ $49;
     $51 = $50 & 255;
     $52 = (5544 + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $50 >>> 8;
     $55 = $54 & 255;
     $56 = (4520 + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $57 ^ $53;
     $59 = $50 >>> 16;
     $60 = $59 & 255;
     $61 = (3496 + ($60<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $58 ^ $62;
     $64 = $50 >>> 24;
     $65 = (2472 + ($64<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $63 ^ $66;
     $68 = ((($$092$i)) + 12|0);
     $69 = HEAP32[$48>>2]|0;
     $70 = $67 ^ $69;
     $71 = $70 & 255;
     $72 = (5544 + ($71<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $70 >>> 8;
     $75 = $74 & 255;
     $76 = (4520 + ($75<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77 ^ $73;
     $79 = $70 >>> 16;
     $80 = $79 & 255;
     $81 = (3496 + ($80<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $78 ^ $82;
     $84 = $70 >>> 24;
     $85 = (2472 + ($84<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $83 ^ $86;
     $88 = ((($$092$i)) + 16|0);
     $89 = HEAP32[$68>>2]|0;
     $90 = $87 ^ $89;
     $91 = $90 & 255;
     $92 = (5544 + ($91<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $90 >>> 8;
     $95 = $94 & 255;
     $96 = (4520 + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $97 ^ $93;
     $99 = $90 >>> 16;
     $100 = $99 & 255;
     $101 = (3496 + ($100<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $98 ^ $102;
     $104 = $90 >>> 24;
     $105 = (2472 + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $103 ^ $106;
     $108 = ((($$092$i)) + 20|0);
     $109 = HEAP32[$88>>2]|0;
     $110 = $107 ^ $109;
     $111 = $110 & 255;
     $112 = (5544 + ($111<<2)|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $110 >>> 8;
     $115 = $114 & 255;
     $116 = (4520 + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117 ^ $113;
     $119 = $110 >>> 16;
     $120 = $119 & 255;
     $121 = (3496 + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $118 ^ $122;
     $124 = $110 >>> 24;
     $125 = (2472 + ($124<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $123 ^ $126;
     $128 = ((($$092$i)) + 24|0);
     $129 = HEAP32[$108>>2]|0;
     $130 = $127 ^ $129;
     $131 = $130 & 255;
     $132 = (5544 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $130 >>> 8;
     $135 = $134 & 255;
     $136 = (4520 + ($135<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $137 ^ $133;
     $139 = $130 >>> 16;
     $140 = $139 & 255;
     $141 = (3496 + ($140<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $138 ^ $142;
     $144 = $130 >>> 24;
     $145 = (2472 + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $143 ^ $146;
     $148 = ((($$092$i)) + 28|0);
     $149 = HEAP32[$128>>2]|0;
     $150 = $147 ^ $149;
     $151 = $150 & 255;
     $152 = (5544 + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $150 >>> 8;
     $155 = $154 & 255;
     $156 = (4520 + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $157 ^ $153;
     $159 = $150 >>> 16;
     $160 = $159 & 255;
     $161 = (3496 + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $158 ^ $162;
     $164 = $150 >>> 24;
     $165 = (2472 + ($164<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $163 ^ $166;
     $168 = ((($$092$i)) + 32|0);
     $169 = HEAP32[$148>>2]|0;
     $170 = $167 ^ $169;
     $171 = $170 & 255;
     $172 = (5544 + ($171<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $170 >>> 8;
     $175 = $174 & 255;
     $176 = (4520 + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 ^ $173;
     $179 = $170 >>> 16;
     $180 = $179 & 255;
     $181 = (3496 + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $178 ^ $182;
     $184 = $170 >>> 24;
     $185 = (2472 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $183 ^ $186;
     $188 = (($$17990$i) + -32)|0;
     $189 = ($188>>>0)>(31);
     if ($189) {
      $$092$i = $168;$$17791$i = $187;$$17990$i = $188;
     } else {
      break;
     }
    }
    $23 = (($20) - ($21))|0;
    $$0$lcssa$i = $scevgep115$i;$$177$lcssa$i = $187;$$179$lcssa$i = $23;
   } else {
    $$0$lcssa$i = $$08297$i;$$177$lcssa$i = $$07699$i;$$179$lcssa$i = $$07898$i;
   }
   $24 = ($$179$lcssa$i>>>0)>(3);
   if ($24) {
    $25 = (($$179$lcssa$i) + -4)|0;
    $26 = $25 >>> 2;
    $27 = (($26) + 1)|0;
    $$187$i = $$0$lcssa$i;$$28085$i = $$179$lcssa$i;$$286$i = $$177$lcssa$i;
    while(1) {
     $190 = ((($$187$i)) + 4|0);
     $191 = HEAP32[$$187$i>>2]|0;
     $192 = $191 ^ $$286$i;
     $193 = $192 & 255;
     $194 = (5544 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $192 >>> 8;
     $197 = $196 & 255;
     $198 = (4520 + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $199 ^ $195;
     $201 = $192 >>> 16;
     $202 = $201 & 255;
     $203 = (3496 + ($202<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $200 ^ $204;
     $206 = $192 >>> 24;
     $207 = (2472 + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $205 ^ $208;
     $210 = (($$28085$i) + -4)|0;
     $211 = ($210>>>0)>(3);
     if ($211) {
      $$187$i = $190;$$28085$i = $210;$$286$i = $209;
     } else {
      break;
     }
    }
    $212 = $26 << 2;
    $scevgep$i = (($$0$lcssa$i) + ($27<<2)|0);
    $213 = (($25) - ($212))|0;
    $$1$lcssa$i = $scevgep$i;$$2$lcssa$i = $209;$$280$lcssa$i = $213;
   } else {
    $$1$lcssa$i = $$0$lcssa$i;$$2$lcssa$i = $$177$lcssa$i;$$280$lcssa$i = $$179$lcssa$i;
   }
   $214 = ($$280$lcssa$i|0)==(0);
   if ($214) {
    $$4$i = $$2$lcssa$i;
   } else {
    $$183$i = $$1$lcssa$i;$$3$i = $$2$lcssa$i;$$381$i = $$280$lcssa$i;
    while(1) {
     $215 = ((($$183$i)) + 1|0);
     $216 = HEAP8[$$183$i>>0]|0;
     $217 = $216&255;
     $$3$masked$i = $$3$i & 255;
     $218 = $217 ^ $$3$masked$i;
     $219 = (2472 + ($218<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $$3$i >>> 8;
     $222 = $220 ^ $221;
     $223 = (($$381$i) + -1)|0;
     $224 = ($223|0)==(0);
     if ($224) {
      $$4$i = $222;
      break;
     } else {
      $$183$i = $215;$$3$i = $222;$$381$i = $223;
     }
    }
   }
  }
 } while(0);
 $225 = $$4$i ^ -1;
 $$1 = $225;
 return ($$1|0);
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0295 = 0, $$0298 = 0, $$0302 = 0, $$0308 = 0, $$0316 = 0, $$0325 = 0, $$1 = 0, $$1296$lcssa = 0, $$1296$ph = 0, $$1296398 = 0, $$1299 = 0, $$1303 = 0, $$1309 = 0, $$1317 = 0, $$1326 = 0, $$2 = 0, $$2297 = 0, $$2300 = 0, $$2304 = 0;
 var $$2310 = 0, $$3 = 0, $$3301 = 0, $$3305 = 0, $$3311 = 0, $$3319 = 0, $$3328 = 0, $$4$lcssa = 0, $$4$ph = 0, $$4306 = 0, $$4312 = 0, $$4320 = 0, $$4329 = 0, $$4399 = 0, $$5 = 0, $$5307 = 0, $$5313$lcssa = 0, $$5313$ph = 0, $$5313397 = 0, $$5321 = 0;
 var $$5330 = 0, $$6 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$7323 = 0, $$7332 = 0, $$8 = 0, $$8324 = 0, $$8333 = 0, $$9 = 0, $$9334 = 0, $$lcssa = 0, $$lcssa345 = 0, $$lcssa348 = 0, $$lcssa354 = 0, $$lcssa356 = 0, $$sroa$0$0 = 0, $$sroa$0$0$in = 0, $$sroa$0$0$in374 = 0;
 var $$sroa$0$0377 = 0, $$sroa$0$1 = 0, $$sroa$0$1$in = 0, $$sroa$0$1$in383 = 0, $$sroa$0$1386 = 0, $$sroa$10$0 = 0, $$sroa$10$0$in = 0, $$sroa$10$0$in376 = 0, $$sroa$10$0$lcssa$off0 = 0, $$sroa$10$0379 = 0, $$sroa$10$0380 = 0, $$sroa$10$1 = 0, $$sroa$10$1$in = 0, $$sroa$10$1$in385 = 0, $$sroa$10$1$lcssa = 0, $$sroa$10$1388 = 0, $$sroa$10$1389 = 0, $$sroa$8$0 = 0, $$sroa$8$0$in = 0, $$sroa$8$0$in375 = 0;
 var $$sroa$8$0378 = 0, $$sroa$8$1 = 0, $$sroa$8$1$in = 0, $$sroa$8$1$in384 = 0, $$sroa$8$1387 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $extract$t = 0, $extract$t405 = 0, $or$cond = 0, $scevgep = 0, $scevgep448 = 0, $scevgep450 = 0, $scevgep451 = 0, $scevgep453 = 0, $scevgep454 = 0, $scevgep457 = 0, $scevgep458 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + -1|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -5)|0;
 $9 = (($5) + ($8)|0);
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + -1|0);
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($1))|0;
 $16 = (($12) + ($15)|0);
 $17 = (($14) + -257)|0;
 $18 = (($12) + ($17)|0);
 $19 = ((($3)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($3)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($3)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($3)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($3)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($3)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($3)) + 84|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = 1 << $36;
 $38 = (($37) + -1)|0;
 $39 = ((($3)) + 88|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = 1 << $40;
 $42 = (($41) + -1)|0;
 $43 = $16;
 $44 = ((($3)) + 7104|0);
 $45 = ((($26)) + -1|0);
 $46 = ($24|0)==(0);
 $47 = (($24) + ($20))|0;
 $48 = (($43) - ($24))|0;
 $$0302 = $5;$$0308 = $12;$$0316 = $28;$$0325 = $30;
 L1: while(1) {
  $49 = ($$0325>>>0)<(15);
  if ($49) {
   $50 = ((($$0302)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << $$0325;
   $54 = (($53) + ($$0316))|0;
   $55 = (($$0325) + 8)|0;
   $56 = ((($$0302)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << $55;
   $60 = (($54) + ($59))|0;
   $61 = (($$0325) + 16)|0;
   $$1303 = $56;$$1317 = $60;$$1326 = $61;
  } else {
   $$1303 = $$0302;$$1317 = $$0316;$$1326 = $$0325;
  }
  $62 = $$1317 & $38;
  $$sroa$0$0$in374 = (($32) + ($62<<2)|0);
  $$sroa$8$0$in375 = (((($32) + ($62<<2)|0)) + 1|0);
  $$sroa$10$0$in376 = (((($32) + ($62<<2)|0)) + 2|0);
  $$sroa$0$0377 = HEAP8[$$sroa$0$0$in374>>0]|0;
  $$sroa$8$0378 = HEAP8[$$sroa$8$0$in375>>0]|0;
  $$sroa$10$0379 = HEAP16[$$sroa$10$0$in376>>1]|0;
  $63 = $$sroa$8$0378&255;
  $64 = $$1317 >>> $63;
  $65 = (($$1326) - ($63))|0;
  $66 = ($$sroa$0$0377<<24>>24)==(0);
  $extract$t = $$sroa$10$0379&255;
  do {
   if ($66) {
    $$lcssa345 = $65;$$lcssa348 = $64;$$sroa$10$0$lcssa$off0 = $extract$t;
    label = 7;
   } else {
    $67 = $$sroa$0$0377&255;
    $$sroa$10$0380 = $$sroa$10$0379;$70 = $67;$75 = $65;$83 = $64;
    while(1) {
     $69 = $70 & 16;
     $71 = ($69|0)==(0);
     if (!($71)) {
      break;
     }
     $243 = $70 & 64;
     $244 = ($243|0)==(0);
     if (!($244)) {
      label = 55;
      break L1;
     }
     $245 = $$sroa$10$0380&65535;
     $246 = 1 << $70;
     $247 = (($246) + -1)|0;
     $248 = $83 & $247;
     $249 = (($248) + ($245))|0;
     $$sroa$0$0$in = (($32) + ($249<<2)|0);
     $$sroa$8$0$in = (((($32) + ($249<<2)|0)) + 1|0);
     $$sroa$10$0$in = (((($32) + ($249<<2)|0)) + 2|0);
     $$sroa$0$0 = HEAP8[$$sroa$0$0$in>>0]|0;
     $$sroa$8$0 = HEAP8[$$sroa$8$0$in>>0]|0;
     $$sroa$10$0 = HEAP16[$$sroa$10$0$in>>1]|0;
     $250 = $$sroa$8$0&255;
     $251 = $83 >>> $250;
     $252 = (($75) - ($250))|0;
     $253 = $$sroa$0$0&255;
     $254 = ($$sroa$0$0<<24>>24)==(0);
     if ($254) {
      label = 6;
      break;
     } else {
      $$sroa$10$0380 = $$sroa$10$0;$70 = $253;$75 = $252;$83 = $251;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $extract$t405 = $$sroa$10$0&255;
     $$lcssa345 = $252;$$lcssa348 = $251;$$sroa$10$0$lcssa$off0 = $extract$t405;
     label = 7;
     break;
    }
    $72 = $$sroa$10$0380&65535;
    $73 = $70 & 15;
    $74 = ($73|0)==(0);
    if ($74) {
     $$0295 = $72;$$3305 = $$1303;$$4320 = $83;$$4329 = $75;
    } else {
     $76 = ($75>>>0)<($73>>>0);
     $77 = ((($$1303)) + 1|0);
     if ($76) {
      $78 = (($75) + 8)|0;
      $79 = HEAP8[$77>>0]|0;
      $80 = $79&255;
      $81 = $80 << $75;
      $82 = (($81) + ($83))|0;
      $$2304 = $77;$$3319 = $82;$$3328 = $78;
     } else {
      $$2304 = $$1303;$$3319 = $83;$$3328 = $75;
     }
     $84 = 1 << $73;
     $85 = (($84) + -1)|0;
     $86 = $$3319 & $85;
     $87 = (($86) + ($72))|0;
     $88 = $$3319 >>> $73;
     $89 = (($$3328) - ($73))|0;
     $$0295 = $87;$$3305 = $$2304;$$4320 = $88;$$4329 = $89;
    }
    $90 = ($$4329>>>0)<(15);
    if ($90) {
     $91 = ((($$3305)) + 1|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 << $$4329;
     $95 = (($94) + ($$4320))|0;
     $96 = (($$4329) + 8)|0;
     $97 = ((($$3305)) + 2|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = $99 << $96;
     $101 = (($95) + ($100))|0;
     $102 = (($$4329) + 16)|0;
     $$4306 = $97;$$5321 = $101;$$5330 = $102;
    } else {
     $$4306 = $$3305;$$5321 = $$4320;$$5330 = $$4329;
    }
    $103 = $$5321 & $42;
    $$sroa$0$1$in383 = (($34) + ($103<<2)|0);
    $$sroa$8$1$in384 = (((($34) + ($103<<2)|0)) + 1|0);
    $$sroa$10$1$in385 = (((($34) + ($103<<2)|0)) + 2|0);
    $$sroa$0$1386 = HEAP8[$$sroa$0$1$in383>>0]|0;
    $$sroa$8$1387 = HEAP8[$$sroa$8$1$in384>>0]|0;
    $$sroa$10$1388 = HEAP16[$$sroa$10$1$in385>>1]|0;
    $104 = $$sroa$8$1387&255;
    $105 = $$5321 >>> $104;
    $106 = (($$5330) - ($104))|0;
    $107 = $$sroa$0$1386&255;
    $108 = $107 & 16;
    $109 = ($108|0)==(0);
    if ($109) {
     $$sroa$10$1389 = $$sroa$10$1388;$227 = $107;$233 = $105;$238 = $106;
     while(1) {
      $226 = $227 & 64;
      $228 = ($226|0)==(0);
      if (!($228)) {
       label = 52;
       break L1;
      }
      $229 = $$sroa$10$1389&65535;
      $230 = 1 << $227;
      $231 = (($230) + -1)|0;
      $232 = $233 & $231;
      $234 = (($232) + ($229))|0;
      $$sroa$0$1$in = (($34) + ($234<<2)|0);
      $$sroa$8$1$in = (((($34) + ($234<<2)|0)) + 1|0);
      $$sroa$10$1$in = (((($34) + ($234<<2)|0)) + 2|0);
      $$sroa$0$1 = HEAP8[$$sroa$0$1$in>>0]|0;
      $$sroa$8$1 = HEAP8[$$sroa$8$1$in>>0]|0;
      $$sroa$10$1 = HEAP16[$$sroa$10$1$in>>1]|0;
      $235 = $$sroa$8$1&255;
      $236 = $233 >>> $235;
      $237 = (($238) - ($235))|0;
      $239 = $$sroa$0$1&255;
      $240 = $239 & 16;
      $241 = ($240|0)==(0);
      if ($241) {
       $$sroa$10$1389 = $$sroa$10$1;$227 = $239;$233 = $236;$238 = $237;
      } else {
       $$lcssa = $239;$$lcssa354 = $237;$$lcssa356 = $236;$$sroa$10$1$lcssa = $$sroa$10$1;
       break;
      }
     }
    } else {
     $$lcssa = $107;$$lcssa354 = $106;$$lcssa356 = $105;$$sroa$10$1$lcssa = $$sroa$10$1388;
    }
    $110 = $$sroa$10$1$lcssa&65535;
    $111 = $$lcssa & 15;
    $112 = ($$lcssa354>>>0)<($111>>>0);
    if ($112) {
     $113 = ((($$4306)) + 1|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = $115 << $$lcssa354;
     $117 = (($116) + ($$lcssa356))|0;
     $118 = (($$lcssa354) + 8)|0;
     $119 = ($118>>>0)<($111>>>0);
     $120 = ((($$4306)) + 2|0);
     if ($119) {
      $121 = (($$lcssa354) + 16)|0;
      $122 = HEAP8[$120>>0]|0;
      $123 = $122&255;
      $124 = $123 << $118;
      $125 = (($124) + ($117))|0;
      $$5307 = $120;$$7323 = $125;$$7332 = $121;
     } else {
      $$5307 = $113;$$7323 = $117;$$7332 = $118;
     }
    } else {
     $$5307 = $$4306;$$7323 = $$lcssa356;$$7332 = $$lcssa354;
    }
    $126 = 1 << $111;
    $127 = (($126) + -1)|0;
    $128 = $$7323 & $127;
    $129 = (($128) + ($110))|0;
    $130 = $$7323 >>> $111;
    $131 = (($$7332) - ($111))|0;
    $132 = $$0308;
    $133 = (($132) - ($43))|0;
    $134 = ($129>>>0)>($133>>>0);
    if (!($134)) {
     $205 = (0 - ($129))|0;
     $206 = (($$0308) + ($205)|0);
     $$2297 = $$0295;$$5 = $206;$$6314 = $$0308;
     while(1) {
      $207 = ((($$5)) + 1|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ((($$6314)) + 1|0);
      HEAP8[$209>>0] = $208;
      $210 = ((($$5)) + 2|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = ((($$6314)) + 2|0);
      HEAP8[$212>>0] = $211;
      $213 = ((($$5)) + 3|0);
      $214 = HEAP8[$213>>0]|0;
      $215 = ((($$6314)) + 3|0);
      HEAP8[$215>>0] = $214;
      $216 = (($$2297) + -3)|0;
      $217 = ($216>>>0)>(2);
      if ($217) {
       $$2297 = $216;$$5 = $213;$$6314 = $215;
      } else {
       break;
      }
     }
     $218 = ($216|0)==(0);
     if ($218) {
      $$6 = $$5307;$$7315 = $215;$$8324 = $130;$$8333 = $131;
      break;
     }
     $219 = ((($$5)) + 4|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ((($$6314)) + 4|0);
     HEAP8[$221>>0] = $220;
     $222 = ($216|0)==(1);
     if ($222) {
      $$6 = $$5307;$$7315 = $221;$$8324 = $130;$$8333 = $131;
      break;
     }
     $223 = ((($$5)) + 5|0);
     $224 = HEAP8[$223>>0]|0;
     $225 = ((($$6314)) + 5|0);
     HEAP8[$225>>0] = $224;
     $$6 = $$5307;$$7315 = $225;$$8324 = $130;$$8333 = $131;
     break;
    }
    $135 = (($129) - ($133))|0;
    $136 = ($135>>>0)>($22>>>0);
    if ($136) {
     $137 = HEAP32[$44>>2]|0;
     $138 = ($137|0)==(0);
     if (!($138)) {
      label = 22;
      break L1;
     }
    }
    do {
     if ($46) {
      $140 = (($20) - ($135))|0;
      $141 = (($45) + ($140)|0);
      $142 = ($$0295>>>0)>($135>>>0);
      if ($142) {
       $143 = (($$0295) - ($135))|0;
       $144 = (($129) - ($132))|0;
       $$0 = $141;$$0298 = $135;$$1309 = $$0308;
       while(1) {
        $145 = ((($$0)) + 1|0);
        $146 = HEAP8[$145>>0]|0;
        $147 = ((($$1309)) + 1|0);
        HEAP8[$147>>0] = $146;
        $148 = (($$0298) + -1)|0;
        $149 = ($148|0)==(0);
        if ($149) {
         break;
        } else {
         $$0 = $145;$$0298 = $148;$$1309 = $147;
        }
       }
       $scevgep457 = (($$0308) + ($43)|0);
       $scevgep458 = (($scevgep457) + ($144)|0);
       $150 = (0 - ($129))|0;
       $151 = (($scevgep458) + ($150)|0);
       $$1296$ph = $143;$$4$ph = $151;$$5313$ph = $scevgep458;
      } else {
       $$1296$ph = $$0295;$$4$ph = $141;$$5313$ph = $$0308;
      }
     } else {
      $152 = ($24>>>0)<($135>>>0);
      if (!($152)) {
       $173 = (($24) - ($135))|0;
       $174 = (($45) + ($173)|0);
       $175 = ($$0295>>>0)>($135>>>0);
       if (!($175)) {
        $$1296$ph = $$0295;$$4$ph = $174;$$5313$ph = $$0308;
        break;
       }
       $176 = (($$0295) - ($135))|0;
       $177 = (($129) - ($132))|0;
       $$3 = $174;$$3301 = $135;$$4312 = $$0308;
       while(1) {
        $178 = ((($$3)) + 1|0);
        $179 = HEAP8[$178>>0]|0;
        $180 = ((($$4312)) + 1|0);
        HEAP8[$180>>0] = $179;
        $181 = (($$3301) + -1)|0;
        $182 = ($181|0)==(0);
        if ($182) {
         break;
        } else {
         $$3 = $178;$$3301 = $181;$$4312 = $180;
        }
       }
       $scevgep = (($$0308) + ($43)|0);
       $scevgep448 = (($scevgep) + ($177)|0);
       $183 = (0 - ($129))|0;
       $184 = (($scevgep448) + ($183)|0);
       $$1296$ph = $176;$$4$ph = $184;$$5313$ph = $scevgep448;
       break;
      }
      $153 = (($47) - ($135))|0;
      $154 = (($45) + ($153)|0);
      $155 = (($135) - ($24))|0;
      $156 = ($$0295>>>0)>($155>>>0);
      if ($156) {
       $157 = (($$0295) - ($155))|0;
       $158 = (($129) - ($132))|0;
       $$1 = $154;$$1299 = $155;$$2310 = $$0308;
       while(1) {
        $159 = ((($$1)) + 1|0);
        $160 = HEAP8[$159>>0]|0;
        $161 = ((($$2310)) + 1|0);
        HEAP8[$161>>0] = $160;
        $162 = (($$1299) + -1)|0;
        $163 = ($162|0)==(0);
        if ($163) {
         break;
        } else {
         $$1 = $159;$$1299 = $162;$$2310 = $161;
        }
       }
       $scevgep450 = (($$0308) + ($48)|0);
       $scevgep451 = (($scevgep450) + ($158)|0);
       $164 = ($157>>>0)>($24>>>0);
       if ($164) {
        $scevgep453 = (($$0308) + ($43)|0);
        $$2 = $45;$$2300 = $24;$$3311 = $scevgep451;
        while(1) {
         $165 = ((($$2)) + 1|0);
         $166 = HEAP8[$165>>0]|0;
         $167 = ((($$3311)) + 1|0);
         HEAP8[$167>>0] = $166;
         $168 = (($$2300) + -1)|0;
         $169 = ($168|0)==(0);
         if ($169) {
          break;
         } else {
          $$2 = $165;$$2300 = $168;$$3311 = $167;
         }
        }
        $170 = (($157) - ($24))|0;
        $scevgep454 = (($scevgep453) + ($158)|0);
        $171 = (0 - ($129))|0;
        $172 = (($scevgep454) + ($171)|0);
        $$1296$ph = $170;$$4$ph = $172;$$5313$ph = $scevgep454;
       } else {
        $$1296$ph = $157;$$4$ph = $45;$$5313$ph = $scevgep451;
       }
      } else {
       $$1296$ph = $$0295;$$4$ph = $154;$$5313$ph = $$0308;
      }
     }
    } while(0);
    $185 = ($$1296$ph>>>0)>(2);
    if ($185) {
     $$1296398 = $$1296$ph;$$4399 = $$4$ph;$$5313397 = $$5313$ph;
     while(1) {
      $186 = ((($$4399)) + 1|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = ((($$5313397)) + 1|0);
      HEAP8[$188>>0] = $187;
      $189 = ((($$4399)) + 2|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = ((($$5313397)) + 2|0);
      HEAP8[$191>>0] = $190;
      $192 = ((($$4399)) + 3|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = ((($$5313397)) + 3|0);
      HEAP8[$194>>0] = $193;
      $195 = (($$1296398) + -3)|0;
      $196 = ($195>>>0)>(2);
      if ($196) {
       $$1296398 = $195;$$4399 = $192;$$5313397 = $194;
      } else {
       $$1296$lcssa = $195;$$4$lcssa = $192;$$5313$lcssa = $194;
       break;
      }
     }
    } else {
     $$1296$lcssa = $$1296$ph;$$4$lcssa = $$4$ph;$$5313$lcssa = $$5313$ph;
    }
    $197 = ($$1296$lcssa|0)==(0);
    if ($197) {
     $$6 = $$5307;$$7315 = $$5313$lcssa;$$8324 = $130;$$8333 = $131;
    } else {
     $198 = ((($$4$lcssa)) + 1|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = ((($$5313$lcssa)) + 1|0);
     HEAP8[$200>>0] = $199;
     $201 = ($$1296$lcssa|0)==(1);
     if ($201) {
      $$6 = $$5307;$$7315 = $200;$$8324 = $130;$$8333 = $131;
     } else {
      $202 = ((($$4$lcssa)) + 2|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = ((($$5313$lcssa)) + 2|0);
      HEAP8[$204>>0] = $203;
      $$6 = $$5307;$$7315 = $204;$$8324 = $130;$$8333 = $131;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $68 = ((($$0308)) + 1|0);
   HEAP8[$68>>0] = $$sroa$10$0$lcssa$off0;
   $$6 = $$1303;$$7315 = $68;$$8324 = $$lcssa348;$$8333 = $$lcssa345;
  }
  $258 = ($$6>>>0)<($9>>>0);
  $259 = ($$7315>>>0)<($18>>>0);
  $or$cond = $259 & $258;
  if ($or$cond) {
   $$0302 = $$6;$$0308 = $$7315;$$0316 = $$8324;$$0325 = $$8333;
  } else {
   $$7 = $$6;$$8 = $$7315;$$9 = $$8324;$$9334 = $$8333;
   break;
  }
 }
 do {
  if ((label|0) == 22) {
   $139 = ((($0)) + 24|0);
   HEAP32[$139>>2] = 23555;
   HEAP32[$3>>2] = 29;
   $$7 = $$5307;$$8 = $$0308;$$9 = $130;$$9334 = $131;
  }
  else if ((label|0) == 52) {
   $242 = ((($0)) + 24|0);
   HEAP32[$242>>2] = 23585;
   HEAP32[$3>>2] = 29;
   $$7 = $$4306;$$8 = $$0308;$$9 = $233;$$9334 = $238;
  }
  else if ((label|0) == 55) {
   $255 = $70 & 32;
   $256 = ($255|0)==(0);
   if ($256) {
    $257 = ((($0)) + 24|0);
    HEAP32[$257>>2] = 23607;
    HEAP32[$3>>2] = 29;
    $$7 = $$1303;$$8 = $$0308;$$9 = $83;$$9334 = $75;
    break;
   } else {
    HEAP32[$3>>2] = 11;
    $$7 = $$1303;$$8 = $$0308;$$9 = $83;$$9334 = $75;
    break;
   }
  }
 } while(0);
 $260 = $$9334 >>> 3;
 $261 = (0 - ($260))|0;
 $262 = (($$7) + ($261)|0);
 $263 = $260 << 3;
 $264 = (($$9334) - ($263))|0;
 $265 = 1 << $264;
 $266 = (($265) + -1)|0;
 $267 = $266 & $$9;
 $268 = ((($262)) + 1|0);
 HEAP32[$0>>2] = $268;
 $269 = ((($$8)) + 1|0);
 HEAP32[$10>>2] = $269;
 $270 = $9;
 $271 = $262;
 $272 = (($270) + 5)|0;
 $273 = (($272) - ($271))|0;
 HEAP32[$6>>2] = $273;
 $274 = $18;
 $275 = $$8;
 $276 = (($274) + 257)|0;
 $277 = (($276) - ($275))|0;
 HEAP32[$13>>2] = $277;
 HEAP32[$27>>2] = $267;
 HEAP32[$29>>2] = $264;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 8;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6675]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 26744;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[6675]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((127|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup_120($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=10896; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((23635 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_149($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 24115;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 24115;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 24115;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 24115 : (24117);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (24116);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 24115;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 24115;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 24125;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 24132;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (24133) : (24138);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (24135);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (24099 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(24167,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(24167,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 24151 : 24155;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 24159 : 24163;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 24115;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (24099 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (24115 + ($255)|0);
    $$332 = $or$cond282 ? 24115 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 24115;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_149($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg_149($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (24169 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 24257;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 24257;
  } else {
   $$01113 = 24257;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2694]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[2694]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((26728)|0));
   $$02325 = HEAP32[(26724)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((26728)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 127]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $13 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $7;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $8 = (___syscall220(220,($vararg_buffer|0))|0);
   $9 = ($8|0)<(1);
   if (!($9)) {
    HEAP32[$3>>2] = $8;
    HEAP32[$1>>2] = 0;
    $13 = 0;
    label = 6;
    break;
   }
   switch ($8|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $10 = (0 - ($8))|0;
   $11 = (___errno_location()|0);
   HEAP32[$11>>2] = $10;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $12 = (((($0)) + 24|0) + ($13)|0);
  $14 = ((($12)) + 8|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + ($13))|0;
  HEAP32[$1>>2] = $17;
  $18 = ((($12)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $19;
  $$1 = $12;
 }
 STACKTOP = sp;return ($$1|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function ___mmap($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = ($5|0)<(0);
 $7 = $6 << 31 >> 31;
 $8 = $5 & 4095;
 $9 = $7 & -4096;
 $10 = ($8|0)==(0);
 $11 = ($9|0)==(0);
 $12 = $10 & $11;
 do {
  if ($12) {
   $14 = ($1>>>0)>(2147483646);
   if ($14) {
    $15 = (___errno_location()|0);
    HEAP32[$15>>2] = 12;
    $$0 = (-1);
    break;
   }
   $16 = $3 & 16;
   $17 = ($16|0)!=(0);
   if ($17) {
    _dummy1(-1);
   }
   $18 = $5 >> 12;
   HEAP32[$vararg_buffer>>2] = $0;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $1;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $2;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $3;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $4;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $18;
   $19 = (___syscall192(192,($vararg_buffer|0))|0);
   $20 = (___syscall_ret($19)|0);
   $21 = $20;
   if ($17) {
    _dummy0();
    $$0 = $21;
   } else {
    $$0 = $21;
   }
  } else {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = 22;
   $$0 = (-1);
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _dummy0() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummy1($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _dummy1(-1);
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall91(91,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 _dummy0();
 STACKTOP = sp;return ($3|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _strcasecmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01718 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $1;$20 = 0;
  } else {
   $4 = $2&255;
   $$01718 = $0;$$019 = $1;$10 = $4;$8 = $2;
   while(1) {
    $5 = HEAP8[$$019>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$019;$20 = $8;
     break L1;
    }
    $9 = ($8<<24>>24)==($5<<24>>24);
    if (!($9)) {
     $11 = (_tolower($10)|0);
     $12 = (_tolower($6)|0);
     $13 = ($11|0)==($12|0);
     if (!($13)) {
      $$0$lcssa = $$019;$20 = $8;
      break L1;
     }
    }
    $14 = ((($$01718)) + 1|0);
    $15 = ((($$019)) + 1|0);
    $16 = HEAP8[$14>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)==(0);
    if ($18) {
     $$0$lcssa = $15;$20 = 0;
     break;
    } else {
     $$01718 = $14;$$019 = $15;$10 = $17;$8 = $16;
    }
   }
  }
 } while(0);
 $19 = $20&255;
 $21 = (_tolower($19)|0);
 $22 = HEAP8[$$0$lcssa>>0]|0;
 $23 = $22&255;
 $24 = (_tolower($23)|0);
 $25 = (($21) - ($24))|0;
 return ($25|0);
}
function _strncasecmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$02125 = 0, $$02227 = 0, $$02227$in = 0, $$023 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$023 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$23 = 0;
   } else {
    $6 = $4&255;
    $$02125 = $0;$$02227$in = $2;$$026 = $1;$11 = $4;$13 = $6;
    while(1) {
     $$02227 = (($$02227$in) + -1)|0;
     $7 = HEAP8[$$026>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)!=(0);
     $10 = ($$02227|0)!=(0);
     $or$cond = $10 & $9;
     if (!($or$cond)) {
      $$0$lcssa = $$026;$23 = $11;
      break L3;
     }
     $12 = ($11<<24>>24)==($7<<24>>24);
     if (!($12)) {
      $14 = (_tolower($13)|0);
      $15 = (_tolower($8)|0);
      $16 = ($14|0)==($15|0);
      if (!($16)) {
       $$0$lcssa = $$026;$23 = $11;
       break L3;
      }
     }
     $17 = ((($$02125)) + 1|0);
     $18 = ((($$026)) + 1|0);
     $19 = HEAP8[$17>>0]|0;
     $20 = $19&255;
     $21 = ($19<<24>>24)==(0);
     if ($21) {
      $$0$lcssa = $18;$23 = 0;
      break;
     } else {
      $$02125 = $17;$$02227$in = $$02227;$$026 = $18;$11 = $19;$13 = $20;
     }
    }
   }
  } while(0);
  $22 = $23&255;
  $24 = (_tolower($22)|0);
  $25 = HEAP8[$$0$lcssa>>0]|0;
  $26 = $25&255;
  $27 = (_tolower($26)|0);
  $28 = (($24) - ($27))|0;
  $$023 = $28;
 }
 return ($$023|0);
}
function _ftruncate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $4 = (___syscall194(194,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall3(3,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=26061; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $scevgep = ((($0)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $3 = ((($0)) + 15|0);
  HEAP8[$3>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $4 = (($$027>>>0) / 10)&-1;
   $5 = (($$126) + 1)|0;
   $6 = ($$027>>>0)<(10);
   if ($6) {
    break;
   } else {
    $$027 = $4;$$126 = $5;
   }
  }
  $7 = (($0) + ($5)|0);
  HEAP8[$7>>0] = 0;
  $$02324 = $1;$$225 = $5;
  while(1) {
   $8 = (($$02324>>>0) % 10)&-1;
   $9 = $8 | 48;
   $10 = $9&255;
   $11 = (($$225) + -1)|0;
   $12 = (($0) + ($11)|0);
   HEAP8[$12>>0] = $10;
   $13 = (($$02324>>>0) / 10)&-1;
   $14 = ($$02324>>>0)<(10);
   if ($14) {
    break;
   } else {
    $$02324 = $13;$$225 = $11;
   }
  }
 }
 return;
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $4 = (___syscall140(140,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$3>>2]|0;
 $8 = $6 ? -1 : $7;
 STACKTOP = sp;return ($8|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall4(4,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall197(197,($vararg_buffer|0))|0);
 $4 = ($3|0)==(-9);
 if ($4) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $5 = (___syscall221(221,($vararg_buffer2|0))|0);
  $6 = ($5|0)<(0);
  if ($6) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   HEAP32[$vararg_buffer6>>2] = $2;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $1;
   $8 = (___syscall195(195,($vararg_buffer6|0))|0);
   $9 = (___syscall_ret($8)|0);
   $$0 = $9;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = (___syscall_ret($3)|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[6687]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (26788 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[6687] = $24;
     } else {
      $25 = HEAP32[(26764)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(26756)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (26788 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[6687] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(26764)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(26768)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (26788 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[6687] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(26764)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(26756)>>2] = $84;
     HEAP32[(26768)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(26752)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (27052 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(26764)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (27052 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(26752)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(26764)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(26764)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(26764)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(26768)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (26788 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[6687] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(26764)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(26756)>>2] = $$0191$i;
      HEAP32[(26768)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(26752)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (27052 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (27052 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(26756)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(26764)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (27052 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(26752)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(26764)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(26764)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(26764)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (26788 + ($425<<2)|0);
          $427 = HEAP32[6687]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[6687] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(26764)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (27052 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(26752)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(26764)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(26764)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(26756)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(26768)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(26768)>>2] = $511;
   HEAP32[(26756)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(26756)>>2] = 0;
   HEAP32[(26768)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(26760)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(26760)>>2] = $526;
  $527 = HEAP32[(26772)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(26772)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[6805]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(27228)>>2] = 4096;
  HEAP32[(27224)>>2] = 4096;
  HEAP32[(27232)>>2] = -1;
  HEAP32[(27236)>>2] = -1;
  HEAP32[(27240)>>2] = 0;
  HEAP32[(27192)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[6805] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(27228)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(27188)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(27180)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(27192)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(26772)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (27196);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(27224)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(27180)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(27188)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(27228)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(27192)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(27192)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(27180)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(27180)>>2] = $624;
  $625 = HEAP32[(27184)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(27184)>>2] = $624;
  }
  $627 = HEAP32[(26772)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(26764)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(26764)>>2] = $$748$i;
    }
    HEAP32[(27196)>>2] = $$748$i;
    HEAP32[(27200)>>2] = $$723947$i;
    HEAP32[(27208)>>2] = 0;
    $632 = HEAP32[6805]|0;
    HEAP32[(26784)>>2] = $632;
    HEAP32[(26780)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (26788 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(26772)>>2] = $646;
    HEAP32[(26760)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(27236)>>2]|0;
    HEAP32[(26776)>>2] = $652;
   } else {
    $$024370$i = (27196);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(26760)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(26772)>>2] = $676;
       HEAP32[(26760)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(27236)>>2]|0;
       HEAP32[(26776)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(26764)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(26764)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (27196);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (27196);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(26760)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(26760)>>2] = $724;
        HEAP32[(26772)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(26768)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(26756)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(26756)>>2] = $730;
         HEAP32[(26768)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (26788 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[6687]|0;
            $757 = $756 & $755;
            HEAP32[6687] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (27052 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(26752)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(26752)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(26764)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(26764)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(26764)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (26788 + ($834<<2)|0);
         $836 = HEAP32[6687]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[6687] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(26764)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (27052 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(26752)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(26752)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(26764)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(26764)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (27196);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(26772)>>2] = $944;
    HEAP32[(26760)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(27236)>>2]|0;
    HEAP32[(26776)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(27196)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(27196)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(27196)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(27196)+12>>2]|0;
    HEAP32[(27196)>>2] = $$748$i;
    HEAP32[(27200)>>2] = $$723947$i;
    HEAP32[(27208)>>2] = 0;
    HEAP32[(27204)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (26788 + ($965<<2)|0);
      $967 = HEAP32[6687]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[6687] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(26764)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (27052 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(26752)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(26752)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(26764)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(26764)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(26760)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(26760)>>2] = $1047;
   $1048 = HEAP32[(26772)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(26772)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(26764)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(26768)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(26756)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (26788 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[6687]|0;
     $38 = $37 & $36;
     HEAP32[6687] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (27052 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(26752)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(26752)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(26764)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(26764)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(26764)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(26772)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(26760)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(26760)>>2] = $123;
   HEAP32[(26772)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(26768)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(26768)>>2] = 0;
   HEAP32[(26756)>>2] = 0;
   return;
  }
  $128 = HEAP32[(26768)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(26756)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(26756)>>2] = $131;
   HEAP32[(26768)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (26788 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(26764)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[6687]|0;
     $155 = $154 & $153;
     HEAP32[6687] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(26764)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(26764)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(26764)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (27052 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(26752)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(26752)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(26764)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(26764)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(26764)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(26768)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(26756)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (26788 + ($236<<2)|0);
  $238 = HEAP32[6687]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[6687] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(26764)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (27052 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(26752)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(26752)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(26764)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(26764)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(26780)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(26780)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (27204);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(26780)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(26764)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(27228)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(26772)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(26760)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(26772)>>2] = $40;
  HEAP32[(26760)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(26768)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(26756)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(26756)>>2] = $storemerge1;
  HEAP32[(26768)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (26788 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[6687]|0;
    $93 = $92 & $91;
    HEAP32[6687] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (27052 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(26752)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(26752)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(26764)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(26764)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(26764)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(26764)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(26768)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(26756)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (26788 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[6687]|0;
     $34 = $33 & $32;
     HEAP32[6687] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (27052 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(26752)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(26752)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(26764)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(26764)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(26764)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(26764)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(26772)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(26760)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(26760)>>2] = $118;
   HEAP32[(26772)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(26768)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(26768)>>2] = 0;
   HEAP32[(26756)>>2] = 0;
   return;
  }
  $123 = HEAP32[(26768)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(26756)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(26756)>>2] = $126;
   HEAP32[(26768)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (26788 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[6687]|0;
     $149 = $148 & $147;
     HEAP32[6687] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (27052 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(26752)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(26752)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(26764)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(26764)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(26764)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(26768)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(26756)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (26788 + ($227<<2)|0);
  $229 = HEAP32[6687]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[6687] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(26764)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (27052 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(26752)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(26752)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(26764)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(26764)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 255]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(1608|0),(23|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    $37 = HEAP32[2753]|0;
    HEAP32[$vararg_buffer7>>2] = $37;
    _abort_message(26162,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[386]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 127](1544,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[2753]|0;
    $32 = HEAP32[$30>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = $31;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $35;
    _abort_message(26076,$vararg_buffer);
    // unreachable;
   } else {
    $36 = HEAP32[2753]|0;
    HEAP32[$vararg_buffer3>>2] = $36;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(26121,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(26200,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((27244|0),(128|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[6812]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(26351,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2695]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,1568,1552,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 127]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if ($15) {
    $16 = ((($1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($2|0);
    if (!($18)) {
     $19 = ((($1)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($2|0);
     if (!($21)) {
      $24 = ((($1)) + 32|0);
      HEAP32[$24>>2] = $3;
      HEAP32[$19>>2] = $2;
      $25 = ((($1)) + 40|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($1)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       $31 = ((($1)) + 24|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(2);
       if ($33) {
        $34 = ((($1)) + 54|0);
        HEAP8[$34>>0] = 1;
       }
      }
      $35 = ((($1)) + 44|0);
      HEAP32[$35>>2] = 4;
      break;
     }
    }
    $22 = ($3|0)==(1);
    if ($22) {
     $23 = ((($1)) + 32|0);
     HEAP32[$23>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 $20 = ($10|0)==($2|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 31]($2,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 31]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 31]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $49 = ((($0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    FUNCTION_TABLE_viiiii[$53 & 31]($50,$1,$2,$3,$4);
    break;
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($1)) + 52|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($1)) + 53|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($0)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$34 & 31]($31,$1,$2,$2,1,$4);
     $35 = HEAP8[$29>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$037$off039 = 0;
      label = 13;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $not$ = ($37<<24>>24)==(0);
      if ($not$) {
       $$037$off039 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$19>>2] = $2;
       $38 = ((($1)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[$38>>2] = $40;
       $41 = ((($1)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(1);
       if ($43) {
        $44 = ((($1)) + 24|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(2);
        if ($46) {
         $47 = ((($1)) + 54|0);
         HEAP8[$47>>0] = 1;
         if ($$037$off039) {
          label = 17;
          break;
         } else {
          $48 = 4;
          break;
         }
        }
       }
       if ($$037$off039) {
        label = 17;
       } else {
        $48 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $48 = 3;
     }
     HEAP32[$25>>2] = $48;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 127]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((27248|0),(129|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(26400,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[6812]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(26450,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(130)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(131,(26503|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(131,(26543|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(132);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2752]|0;HEAP32[2752] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26593|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (11104);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6813]|0;HEAP32[6813] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 127]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,1568,1640,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6() {
 ; nullFunc_v(6);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(7);return 0;
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9);
}
function b10(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0;
}
function b11(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(11);return 0;
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,___stdio_write,_sn_write,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__ZL21FlatStream_BlockCheckP12TBlockStreamy,b0,b0,__ZL21PartStream_BlockCheckP12TBlockStreamy,b0,b0,b0,b0,b0,__ZL13BaseFile_OpenP11TFileStreamPKcj,b0,b0,__ZL15BaseFile_ResizeP11TFileStreamy,b0,b0,b0,__ZL12BaseMap_OpenP11TFileStreamPKcj,b0,b0,__ZL13BaseHttp_OpenP11TFileStreamPKcj,b0,b0,b0,b0,b0,__ZL16D3Handler_InsertP20TRootHandler_Diablo3PKcPh,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZN11TByteStream8GetBytesEjP14_ARRAY_POINTER,b0,b0,b0,b0,__ZN15TMndxFindResult13SetSearchPathEPKcj,b0,b0,__ZL18MndxHandler_InsertP17TRootHandler_MNDXPKcPh,b0,b0,b0,b0,b0,b0,b0,b0,__ZN20TFileNameDatabasePtr11sub_1956CE0EP15TMndxFindResultPb,b0,__ZL17OvrHandler_InsertP16TRootHandler_OvrPKcPh,b0,b0,b0,b0,b0,__ZL17WowHandler_InsertP17TRootHandler_WoW6PKcPh,b0,b0
,b0,b0,b0,b0,b0,__ZL17FileDataIdComparePKvS0_S0_,_zcalloc,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZL13BaseFile_InitP11TFileStream,__ZL12BaseMap_InitP11TFileStream,__ZL13BaseHttp_InitP11TFileStream,__ZL13BaseNone_InitP11TFileStream,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,b3,b3,b3
,__ZL16FlatStream_CloseP12TBlockStream,b3,b3,__ZL16PartStream_CloseP12TBlockStream,b3,b3,b3,__ZL18Block4Stream_CloseP12TBlockStream,b3,b3,b3,b3,b3,b3,b3,b3,__ZL14BaseFile_CloseP11TFileStream,b3,b3,__ZL13BaseMap_CloseP11TFileStream,b3,b3,__ZL14BaseHttp_CloseP11TFileStream,b3,b3,b3,b3,b3,b3,b3
,__ZL15D3Handler_CloseP20TRootHandler_Diablo3,b3,__ZN9TStruct40D2Ev,__ZN9TStruct40C2Ev,b3,__ZN13TGenericArrayD2Ev,b3,b3,b3,b3,b3,b3,__ZN14TBitEntryArrayD2Ev,b3,__ZN13TGenericArrayC2Ev,b3,__ZN12TSparseArrayD2Ev,b3,__ZN12TSparseArrayC2Ev,b3,__ZN16TNameIndexStructD2Ev,b3,__ZN14TBitEntryArrayC2Ev,__ZN16TNameIndexStructC2Ev,__ZN20TFileNameDatabasePtrC2Ev,__ZN9TStruct10C2Ev,__ZN11TByteStreamC2Ev,__ZN20TFileNameDatabasePtrD2Ev,b3,b3
,__ZN17TFileNameDatabaseC2Ev,__ZN17TFileNameDatabaseD2Ev,b3,b3,b3,b3,b3,b3,b3,__ZN15TMndxFindResultD2Ev,b3,b3,b3,b3,__ZL17MndxHandler_CloseP17TRootHandler_MNDX,b3,__ZN15TMndxFindResultC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZL16OvrHandler_CloseP16TRootHandler_Ovr,b3,b3,b3,b3
,b3,__ZL16WowHandler_CloseP17TRootHandler_WoW6,b3,b3,b3,b3,b3,b3,_cleanup_120,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZL19D3Handler_EndSearchP20TRootHandler_Diablo3P12_TCascSearch,b4
,b4,b4,b4,b4,b4,b4,__ZN13TGenericArray8CopyFromERS_,b4,b4,b4,b4,b4,b4,__ZN14TBitEntryArray12ExchangeWithERS_,b4,b4,b4,__ZN12TSparseArray12ExchangeWithERS_,b4,b4,b4,__ZN16TNameIndexStruct12ExchangeWithERS_,b4,b4,b4,b4,b4,b4,__ZN13TGenericArray12ExchangeWithERS_,__ZN9TStruct108CopyFromERS_
,b4,b4,b4,b4,__ZN11TByteStream12ExchangeWithERS_,__ZN17TFileNameDatabase12ExchangeWithERS_,b4,b4,b4,b4,b4,b4,__ZL21MndxHandler_EndSearchP17TRootHandler_MNDXP12_TCascSearch,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZL20OvrHandler_EndSearchP16TRootHandler_OvrP12_TCascSearch,b4,b4,b4,b4,b4,__ZL20WowHandler_EndSearchP17TRootHandler_WoW6P12_TCascSearch
,b4,b4,b4,b4,b4,b4,b4,_zcfree,b4,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZL15BaseFile_CreateP11TFileStream,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,_strlen,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZL25default_terminate_handlerv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b6,b6,b6,___cxa_end_catch__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZL20FlatStream_BlockReadP12TBlockStreamyyPhjb,b7,b7,__ZL20PartStream_BlockReadP12TBlockStreamyyPhjb,__ZL20EncrStream_BlockReadP16TEncryptedStreamyyPhjb,b7,__ZL22Block4Stream_BlockReadP12TBlockStreamyyPhjb,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL16BlockStream_ReadP12TBlockStreamPyPvj,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL13BaseFile_ReadP11TFileStreamPyPvj,__ZL14BaseFile_WriteP11TFileStreamPyPKvj,b8,b8,b8,b8,b8,__ZL12BaseMap_ReadP11TFileStreamPyPvj,b8,b8,__ZL13BaseHttp_ReadP11TFileStreamPyPvj,b8,b8,b8,__ZL26IndexDirectory_OnFileFoundPKcPjS1_Pv,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL19InsertToPackageListP19_CASC_MNDX_PACKAGESPKcjj,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_iii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZL19BlockStream_GetSizeP11TFileStreamPy,__ZL18BlockStream_GetPosP11TFileStreamPy
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZL16BaseFile_GetSizeP11TFileStreamPy,__ZL15BaseFile_GetPosP11TFileStreamPy,b10,b10,b10,b10,b10,b10,b10,__ZL19ParseFile_BuildInfoP13_TCascStoragePv,__ZL17ParseFile_BuildDbP13_TCascStoragePv,b10,b10,b10,b10,__ZL16D3Handler_GetKeyP20TRootHandler_Diablo3PKc
,b10,__ZL19D3Handler_GetFileIdP20TRootHandler_Diablo3PKc,b10,b10,__ZN13TGenericArray15LoadDwordsArrayER11TByteStream,b10,b10,__ZN13TGenericArray17LoadTripletsArrayER11TByteStream,__ZN13TGenericArray13LoadByteArrayER11TByteStream,__ZN13TGenericArray17LoadFragmentInfosER11TByteStream,__ZN13TGenericArray11LoadStringsER11TByteStream,__ZN14TBitEntryArray14LoadFromStreamER11TByteStream,b10,b10,b10,__ZN12TSparseArray14LoadFromStreamER11TByteStream,b10,b10,b10,__ZN16TNameIndexStruct14LoadFromStreamER11TByteStream,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,__ZN17TFileNameDatabase14LoadFromStreamER11TByteStream,b10,b10,b10,b10,__ZL19MAR_FILE_SearchFileP9_MAR_FILEP15TMndxFindResult,b10,b10,b10,b10,__ZL18MndxHandler_GetKeyP17TRootHandler_MNDXPKc,b10,__ZL21MndxHandler_GetFileIdP17TRootHandler_MNDXPKc,b10,b10,__ZL16AllocatePackagesjj,b10,b10,b10,b10,b10,__ZL17OvrHandler_GetKeyP16TRootHandler_OvrPKc,b10,__ZL20OvrHandler_GetFileIdP16TRootHandler_OvrPKc,b10,b10,b10
,__ZL17WowHandler_GetKeyP17TRootHandler_WoW6PKc,b10,__ZL20WowHandler_GetFileIdP17TRootHandler_WoW6PKc,__ZL20ParseRoot_CountFilesP17TRootHandler_WoW6P16_CASC_ROOT_BLOCK,__ZL24ParseRoot_AddRootEntriesP17TRootHandler_WoW6P16_CASC_ROOT_BLOCK,b10,b10,b10,b10];
var FUNCTION_TABLE_iiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZL16D3Handler_SearchP20TRootHandler_Diablo3P12_TCascSearchPjS3_S3_,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZL18MndxHandler_SearchP17TRootHandler_MNDXP12_TCascSearchPjS3_S3_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZL17OvrHandler_SearchP16TRootHandler_OvrP12_TCascSearchPjS3_S3_,b11,b11,b11,b11,b11,__ZL17WowHandler_SearchP17TRootHandler_WoW6P12_TCascSearchPjS3_S3_,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,___assert_fail__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12];

  return { _CascOpenStorage: _CascOpenStorage, _i64Subtract: _i64Subtract, _llvm_cttz_i32: _llvm_cttz_i32, _bitshift64Lshr: _bitshift64Lshr, _CascReadFile: _CascReadFile, _CascFindClose: _CascFindClose, _CascGetFileId: _CascGetFileId, _CascOpenFileByEncodingKey: _CascOpenFileByEncodingKey, _CascSetFilePointer: _CascSetFilePointer, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _CascFindFirstFile: _CascFindFirstFile, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _CascFindNextFile: _CascFindNextFile, _CascOpenFileByIndexKey: _CascOpenFileByIndexKey, _memset: _memset, _sbrk: _sbrk, _CascGetFileSize: _CascGetFileSize, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, _CascCloseFile: _CascCloseFile, _CascOpenFile: _CascOpenFile, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _pthread_self: _pthread_self, _CascCloseStorage: _CascCloseStorage, ___udivdi3: ___udivdi3, _CascGetStorageInfo: _CascGetStorageInfo, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _malloc: _malloc, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__CascOpenStorage = asm["_CascOpenStorage"]; asm["_CascOpenStorage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascOpenStorage.apply(null, arguments);
};

var real__CascOpenFile = asm["_CascOpenFile"]; asm["_CascOpenFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascOpenFile.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__CascReadFile = asm["_CascReadFile"]; asm["_CascReadFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascReadFile.apply(null, arguments);
};

var real__CascFindClose = asm["_CascFindClose"]; asm["_CascFindClose"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascFindClose.apply(null, arguments);
};

var real__CascGetFileId = asm["_CascGetFileId"]; asm["_CascGetFileId"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascGetFileId.apply(null, arguments);
};

var real__CascOpenFileByEncodingKey = asm["_CascOpenFileByEncodingKey"]; asm["_CascOpenFileByEncodingKey"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascOpenFileByEncodingKey.apply(null, arguments);
};

var real__CascSetFilePointer = asm["_CascSetFilePointer"]; asm["_CascSetFilePointer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascSetFilePointer.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__CascFindFirstFile = asm["_CascFindFirstFile"]; asm["_CascFindFirstFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascFindFirstFile.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__CascFindNextFile = asm["_CascFindNextFile"]; asm["_CascFindNextFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascFindNextFile.apply(null, arguments);
};

var real__CascOpenFileByIndexKey = asm["_CascOpenFileByIndexKey"]; asm["_CascOpenFileByIndexKey"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascOpenFileByIndexKey.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__CascGetFileSize = asm["_CascGetFileSize"]; asm["_CascGetFileSize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascGetFileSize.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__CascCloseFile = asm["_CascCloseFile"]; asm["_CascCloseFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascCloseFile.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__CascCloseStorage = asm["_CascCloseStorage"]; asm["_CascCloseStorage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascCloseStorage.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__CascGetStorageInfo = asm["_CascGetStorageInfo"]; asm["_CascGetStorageInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__CascGetStorageInfo.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var _CascOpenStorage = Module["_CascOpenStorage"] = asm["_CascOpenStorage"];
var _CascOpenFile = Module["_CascOpenFile"] = asm["_CascOpenFile"];
var _memset = Module["_memset"] = asm["_memset"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _CascReadFile = Module["_CascReadFile"] = asm["_CascReadFile"];
var _CascFindClose = Module["_CascFindClose"] = asm["_CascFindClose"];
var _CascGetFileId = Module["_CascGetFileId"] = asm["_CascGetFileId"];
var _CascOpenFileByEncodingKey = Module["_CascOpenFileByEncodingKey"] = asm["_CascOpenFileByEncodingKey"];
var _CascSetFilePointer = Module["_CascSetFilePointer"] = asm["_CascSetFilePointer"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _CascFindFirstFile = Module["_CascFindFirstFile"] = asm["_CascFindFirstFile"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _CascFindNextFile = Module["_CascFindNextFile"] = asm["_CascFindNextFile"];
var _CascOpenFileByIndexKey = Module["_CascOpenFileByIndexKey"] = asm["_CascOpenFileByIndexKey"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _CascGetFileSize = Module["_CascGetFileSize"] = asm["_CascGetFileSize"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _CascCloseFile = Module["_CascCloseFile"] = asm["_CascCloseFile"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _CascCloseStorage = Module["_CascCloseStorage"] = asm["_CascCloseStorage"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _CascGetStorageInfo = Module["_CascGetStorageInfo"] = asm["_CascGetStorageInfo"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



